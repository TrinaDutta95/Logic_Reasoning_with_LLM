{"premises-FOL": ["∀x (PerformsInSchoolTalentShowsOften(x) → (AttendsSchoolEvents(x) ∧ EngagedWithSchoolEvents(x)))", "∀x (Person(x) → (PerformsInSchoolTalentShows(x) ⊕ (Inactive(x) ∧ Disinterested(x))))", "∀x (ChaperoneHighSchoolDance(x) → ¬StudentAtSchool(x))", "∀x (Person(x) ∧ Inactive(x) ∧ Disinterested(x) ∧ CommunityMember(x) → ChaperonesHighSchoolDances(x))", "∀x (YoungChildOrTeenager(x) ∧ WishesToFurtherAcademicCareer(x) ∧ SeeksEducationalOpportunities(x) → StudentWhoAttendsSchool(x))", "∀x (Bonnie(x) → ((AttendsSchoolEvents(x) ∧ VeryEngaged(x)) ∨ (¬AttendsSchoolEvents(x) ∧ ¬VeryEngaged(x))))"], "conclusion-FOL": "∃x (PerformsInSchoolTalentShows(x, Bonnie))"}
{"premises-FOL": ["∀x (PerformsInSchoolTalentShowsOften(x) → (AttendsSchoolEvents(x) ∧ EngagedWithSchoolEvents(x)))", "∀x (Person(x) → (PerformsInSchoolTalentShows(x) ⊕ (Inactive(x) ∧ Disinterested(x))))", "∀x (ChaperoneHighSchoolDance(x) → ¬StudentAtSchool(x))", "∀x (Person(x) ∧ Inactive(x) ∧ Disinterested(x) ∧ CommunityMember(x) → ChaperonesHighSchoolDances(x))", "∀x (YoungChildOrTeenager(x) ∧ WishesToFurtherAcademicCareer(x) ∧ SeeksEducationalOpportunities(x) → StudentWhoAttendsSchool(x))", "∀x (Bonnie(x) → ((AttendsSchoolEvents(x) ∧ VeryEngaged(x)) ∨ (¬AttendsSchoolEvents(x) ∧ ¬VeryEngaged(x))))"], "conclusion-FOL": "∀x (Bonnie(x) → ((YoungChild(x) ∨ Teenager(x)) ∧ (FurtherAcademicCareer(x) ∧ EducationalOpportunities(x)) ∧ (ChaperonesHighSchoolDances(x) ∨ ¬(YoungChild(x) ∨ Teenager(x))) → (Student(x) ∧ AttendsSchool(x) ∨ (Inactive(x) ∧ Dis"}
{"premises-FOL": ["∀x (PerformsInSchoolTalentShowsOften(x) → (AttendsSchoolEvents(x) ∧ EngagedWithSchoolEvents(x)))", "∀x (Person(x) → (PerformsInSchoolTalentShows(x) ⊕ (Inactive(x) ∧ Disinterested(x))))", "∀x (ChaperoneHighSchoolDance(x) → ¬StudentAtSchool(x))", "∀x (Person(x) ∧ Inactive(x) ∧ Disinterested(x) ∧ CommunityMember(x) → ChaperonesHighSchoolDances(x))", "∀x (YoungChildOrTeenager(x) ∧ WishesToFurtherAcademicCareer(x) ∧ SeeksEducationalOpportunities(x) → StudentWhoAttendsSchool(x))", "∀x (Bonnie(x) → ((AttendsSchoolEvents(x) ∧ VeryEngaged(x)) ∨ (¬AttendsSchoolEvents(x) ∧ ¬VeryEngaged(x))))"], "conclusion-FOL": "∀x (Bonnie(x) → ((ChaperonesHighSchoolDances(x) ∨ PerformsInSchoolTalentShows(x)) ∧ (YoungChildOrTeenager(x) ∧ WishesToFurtherAcademicCareer(x) ∧ EducationalOpportunities(x)) ∧ (InactiveAndDisinterested(x) ∧ CommunityMember(x))))"}
{"premises-FOL": ["∀x∀y (Employee(x) ∧ Customer(y) ∧ SchedulesMeeting(x, y) → AppearsInCompany(x))", "∀x (HasLunchInCompany(x) → SchedulesMeetingsWithCustomers(x))", "∀x (Employee(x) → (HasLunchInCompany(x) ⊕ HasLunchAtHome(x)))", "∀x (Employee(x) ∧ LunchAtHome(x) → WorkingRemotelyFromHome(x))", "∀x (Employee(x) ∧ ¬InHomeCountry(x) → WorksRemotelyFromHome(x))", "¬∃x (Manager(x) ∧ WorksRemotelyFromHome(x))", "∀x (James(x) → (Manager(x) ∧ AppearsInCompanyToday(x) ∨ (¬Manager(x) ∧ ¬AppearsInCompanyToday(x))))"], "conclusion-FOL": "∃x (Person(x) ∧ Company(y) ∧ LunchIn(x, y))"}
{"premises-FOL": ["∀x∀y (Employee(x) ∧ Customer(y) ∧ SchedulesMeeting(x, y) → AppearsInCompany(x))", "∀x (HasLunchInCompany(x) → SchedulesMeetingsWithCustomers(x))", "∀x (Employee(x) → (HasLunchInCompany(x) ⊕ HasLunchAtHome(x)))", "∀x (Employee(x) ∧ LunchAtHome(x) → WorkingRemotelyFromHome(x))", "∀x (Employee(x) ∧ ¬InHomeCountry(x) → WorksRemotelyFromHome(x))", "¬∃x (Manager(x) ∧ WorksRemotelyFromHome(x))", "∀x (James(x) → (Manager(x) ∧ AppearsInCompanyToday(x) ∨ (¬Manager(x) ∧ ¬AppearsInCompanyToday(x))))"], "conclusion-FOL": "¬∃x (Company(x) ∧ LunchIn(James, x))"}
{"premises-FOL": ["∀x∀y (Employee(x) ∧ Customer(y) ∧ SchedulesMeeting(x, y) → AppearsInCompany(x))", "∀x (HasLunchInCompany(x) → SchedulesMeetingsWithCustomers(x))", "∀x (Employee(x) → (HasLunchInCompany(x) ⊕ HasLunchAtHome(x)))", "∀x (Employee(x) ∧ LunchAtHome(x) → WorkingRemotelyFromHome(x))", "∀x (Employee(x) ∧ ¬InHomeCountry(x) → WorksRemotelyFromHome(x))", "¬∃x (Manager(x) ∧ WorksRemotelyFromHome(x))", "∀x (James(x) → (Manager(x) ∧ AppearsInCompanyToday(x) ∨ (¬Manager(x) ∧ ¬AppearsInCompanyToday(x))))"], "conclusion-FOL": "∀x (Manager(x) ∧ InOtherCountries(x) → (HasLunchAtHome(x) ∧ WorksRemotelyFromHome(x) ∨ (¬HasLunchAtHome(x) ∧ ¬WorksRemotelyFromHome(x))))"}
{"premises-FOL": ["Monkeypox(m) ∧ InfectiousDisease(m) ∧ CausedBy(m, monkeypoxVirus)", "∀x (MonkeypoxVirus(x) → (OccursInAnimal(x) ∧ (OccursInHuman(x) ∨ ¬OccursInHuman(x))))", "∀x (Human(x) → Mammal(x))", "∀x (Mammal(x) → Animal(x))", "∀x (Symptom(x) ∧ Monkeypox(x) → (Fever(x) ∧ Headache(x) ∧ MusclePains(x) ∧ FeelingTired(x)))", "∀x (Glu(x) → FeelsTired(x))"], "conclusion-FOL": "∃x (Animal(x))"}
{"premises-FOL": ["Monkeypox(m) ∧ InfectiousDisease(m) ∧ CausedBy(m, monkeypoxVirus)", "∀x (MonkeypoxVirus(x) → (OccursInAnimal(x) ∧ (OccursInHuman(x) ∨ ¬OccursInHuman(x))))", "∀x (Human(x) → Mammal(x))", "∀x (Mammal(x) → Animal(x))", "∀x (Symptom(x) ∧ Monkeypox(x) → (Fever(x) ∧ Headache(x) ∧ MusclePains(x) ∧ FeelingTired(x)))", "∀x (Glu(x) → FeelsTired(x))"], "conclusion-FOL": "∀x (Person(x) → ¬GetsFlu(x))"}
{"premises-FOL": ["Monkeypox(m) ∧ InfectiousDisease(m) ∧ CausedBy(m, monkeypoxVirus)", "∀x (MonkeypoxVirus(x) → (OccursInAnimal(x) ∧ (OccursInHuman(x) ∨ ¬OccursInHuman(x))))", "∀x (Human(x) → Mammal(x))", "∀x (Mammal(x) → Animal(x))", "∀x (Symptom(x) ∧ Monkeypox(x) → (Fever(x) ∧ Headache(x) ∧ MusclePains(x) ∧ FeelingTired(x)))", "∀x (Glu(x) → FeelsTired(x))"], "conclusion-FOL": "∀x (Monkeypox(x) → Coughing(x))"}
{"premises-FOL": ["∀x ∀y ∀z (WildTurkey(x) ∧ EasternWildTurkey(x) ∧ OsceolaWildTurkey(y) ∧ GouldsWildTurkey(z) → (Type(x, y) ∧ Type(x, z)))", "∀x ∀y ∀z (Turkey(x) ∧ RioGrandeWildTurkey(y) ∧ OcellatedWildTurkey(z) → (Turkey(x) ∧ WildTurkey(y) ∧ WildTurkey(z)))", "¬(EasternWildTurkey(tom))", "¬(OsceolaWildTurkey(tom))", "¬(Tom(t) ∧ GouldsWildTurkey(t) ∨ MerriamsWildTurkey(t) ∨ RioGrandeWildTurkey(t))", "∀x (WildTurkey(x) ↔ Tom(x))"], "conclusion-FOL": "∀x (OcellatedWildTurkey(x) ↔ Tom(x))"}
{"premises-FOL": ["∀x ∀y ∀z (WildTurkey(x) ∧ EasternWildTurkey(x) ∧ OsceolaWildTurkey(y) ∧ GouldsWildTurkey(z) → (Type(x, y) ∧ Type(x, z)))", "∀x ∀y ∀z (Turkey(x) ∧ RioGrandeWildTurkey(y) ∧ OcellatedWildTurkey(z) → (Turkey(x) ∧ WildTurkey(y) ∧ WildTurkey(z)))", "¬(EasternWildTurkey(tom))", "¬(OsceolaWildTurkey(tom))", "¬(Tom(t) ∧ GouldsWildTurkey(t) ∨ MerriamsWildTurkey(t) ∨ RioGrandeWildTurkey(t))", "∀x (WildTurkey(x) ↔ Tom(x))"], "conclusion-FOL": "Person(tom) ∧ WildTurkey(tom) ∧ Eastern(tom)"}
{"premises-FOL": ["∀x ∀y ∀z (WildTurkey(x) ∧ EasternWildTurkey(x) ∧ OsceolaWildTurkey(y) ∧ GouldsWildTurkey(z) → (Type(x, y) ∧ Type(x, z)))", "∀x ∀y ∀z (Turkey(x) ∧ RioGrandeWildTurkey(y) ∧ OcellatedWildTurkey(z) → (Turkey(x) ∧ WildTurkey(y) ∧ WildTurkey(z)))", "¬(EasternWildTurkey(tom))", "¬(OsceolaWildTurkey(tom))", "¬(Tom(t) ∧ GouldsWildTurkey(t) ∨ MerriamsWildTurkey(t) ∨ RioGrandeWildTurkey(t))", "∀x (WildTurkey(x) ↔ Tom(x))"], "conclusion-FOL": "∀x (WildTurkey(x) ↔ Joey(x))"}
{"premises-FOL": ["∃x (JapaneseGameCompany(x) ∧ Created(x, LegendOfZelda))", "∀x (Game(x) ∧ InTop10(x) → MadeByJapaneseCompany(x))", "∀x (Game(x) ∧ SellsMoreThanOneMillionCopies(x) → SelectedIntoTop10List(x))", "∃x (Game(x) ∧ Zelda(x) ∧ SoldMoreThanOneMillion(x))"], "conclusion-FOL": "∃x (Game(x) ∧ LegendOfZelda(x) ∧ InTop10(x))"}
{"premises-FOL": ["∃x (JapaneseGameCompany(x) ∧ Created(x, LegendOfZelda))", "∀x (Game(x) ∧ InTop10(x) → MadeByJapaneseCompany(x))", "∀x (Game(x) ∧ SellsMoreThanOneMillionCopies(x) → SelectedIntoTop10List(x))", "∃x (Game(x) ∧ Zelda(x) ∧ SoldMoreThanOneMillion(x))"], "conclusion-FOL": "JapaneseVideoGameCompany(FIFA22)"}
{"premises-FOL": ["∃x (JapaneseGameCompany(x) ∧ Created(x, LegendOfZelda))", "∀x (Game(x) ∧ InTop10(x) → MadeByJapaneseCompany(x))", "∀x (Game(x) ∧ SellsMoreThanOneMillionCopies(x) → SelectedIntoTop10List(x))", "∃x (Game(x) ∧ Zelda(x) ∧ SoldMoreThanOneMillion(x))"], "conclusion-FOL": "¬(LegendOfZeldaInTop10(n))"}
{"premises-FOL": ["∀x (Square(x) → HasFourSides(x))", "∀x (FourSided(x) → Shape(x))"], "conclusion-FOL": "∀x (Square(x) → Shape(x))"}
{"premises-FOL": ["∀x (Rabbit(x) → Cute(x))", "∃x (Turtle(x))", "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x)))", "∀x (Skittish(x) → ¬Still(x))", "∀x (Squirrel(x) → Skittish(x))", "∀x (Rock(x) → Still(x))"], "conclusion-FOL": "∀x (Rock(x) → Turtle(x))"}
{"premises-FOL": ["∀x (Rabbit(x) → Cute(x))", "∃x (Turtle(x))", "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x)))", "∀x (Skittish(x) → ¬Still(x))", "∀x (Squirrel(x) → Skittish(x))", "∀x (Rock(x) → Still(x))"], "conclusion-FOL": "∀x (Rock(x) → ¬Turtle(x))"}
{"premises-FOL": ["∀x (Rabbit(x) → Cute(x))", "∃x (Turtle(x))", "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x)))", "∀x (Skittish(x) → ¬Still(x))", "∀x (Squirrel(x) → Skittish(x))", "∀x (Rock(x) → Still(x))"], "conclusion-FOL": "∀x (Rock(x) → (Turtle(x) ∨ Cute(x)))"}
{"premises-FOL": ["∀x (Rabbit(x) → Cute(x))", "∃x (Turtle(x))", "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x)))", "∀x (Skittish(x) → ¬Still(x))", "∀x (Squirrel(x) → Skittish(x))", "∀x (Rock(x) → Still(x))"], "conclusion-FOL": "∀x (Rock(x) ∧ ¬(Turtle(x) ∧ Squirrel(x)) → (Cute(x) ∨ Skittish(x)))"}
{"premises-FOL": ["∀x (Rabbit(x) → Cute(x))", "∃x (Turtle(x))", "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x)))", "∀x (Skittish(x) → ¬Still(x))", "∀x (Squirrel(x) → Skittish(x))", "∀x (Rock(x) → Still(x))"], "conclusion-FOL": "∀x ((Cute(x) ∧ Still(x)) → (Turtle(x) ∧ Skittish(x)))"}
{"premises-FOL": ["PopularNetflixShow(StrangerThings)", "∀x (NetflixShow(x) ∧ Popular(x) → BingeWatch(Karen, x))", "∀x (BingeWatchesNetflixShow(x) → DownloadsShow(x))", "¬(KarenDownloads(BlackMirror))", "∃x (NetflixShow(x) ∧ Name(x, \"Black Mirror\"))", "∀x∀y (BingeWatchesNetflixShow(x) → SharesTo(x, y, Lisa))"], "conclusion-FOL": "∀x ∀y (Karen(x) ∧ Lisa(y) ∧ Shares(x, y, \"Stranger Things\"))"}
{"premises-FOL": ["PopularNetflixShow(StrangerThings)", "∀x (NetflixShow(x) ∧ Popular(x) → BingeWatch(Karen, x))", "∀x (BingeWatchesNetflixShow(x) → DownloadsShow(x))", "¬(KarenDownloads(BlackMirror))", "∃x (NetflixShow(x) ∧ Name(x, \"Black Mirror\"))", "∀x∀y (BingeWatchesNetflixShow(x) → SharesTo(x, y, Lisa))"], "conclusion-FOL": "Popular(BlackMirror)"}
{"premises-FOL": ["PopularNetflixShow(StrangerThings)", "∀x (NetflixShow(x) ∧ Popular(x) → BingeWatch(Karen, x))", "∀x (BingeWatchesNetflixShow(x) → DownloadsShow(x))", "¬(KarenDownloads(BlackMirror))", "∃x (NetflixShow(x) ∧ Name(x, \"Black Mirror\"))", "∀x∀y (BingeWatchesNetflixShow(x) → SharesTo(x, y, Lisa))"], "conclusion-FOL": "∀x ∀y (Karen(x) ∧ Lisa(y) ∧ SharesBlackMirror(x, y))"}
{"premises-FOL": ["CapitalOf(Beijing, People'sRepublicOfChina)", "WorldMostPopulousNationalCapitalCity(Beijing)", "LocatedIn(Beijing, NorthernChina)", "Hosted(Beijing, 2008SummerOlympics) ∧ Hosted(Beijing, 2008SummerParalympics)", "∀x (City(x) ∧ HostedSummerOlympics(x) ∧ HostedWinterOlympics(x) ∧ HostedSummerParalympics(x) ∧ HostedWinterParalympics(x))", "∀x (UniversityInBeijing(x) ∧ RankAmongBestInAsiaPacific(x) ∧ RankAmongBestInWorld(x) → ConsistentlyRanked(x))"], "conclusion-FOL": "Hosted(Beijing, 2008SummerOlympics) ∧ Hosted(Beijing, WinterOlympics)"}
{"premises-FOL": ["CapitalOf(Beijing, People'sRepublicOfChina)", "WorldMostPopulousNationalCapitalCity(Beijing)", "LocatedIn(Beijing, NorthernChina)", "Hosted(Beijing, 2008SummerOlympics) ∧ Hosted(Beijing, 2008SummerParalympics)", "∀x (City(x) ∧ HostedSummerOlympics(x) ∧ HostedWinterOlympics(x) ∧ HostedSummerParalympics(x) ∧ HostedWinterParalympics(x))", "∀x (UniversityInBeijing(x) ∧ RankAmongBestInAsiaPacific(x) ∧ RankAmongBestInWorld(x) → ConsistentlyRanked(x))"], "conclusion-FOL": "SouthernChina(Beijing)"}
{"premises-FOL": ["CapitalOf(Beijing, People'sRepublicOfChina)", "WorldMostPopulousNationalCapitalCity(Beijing)", "LocatedIn(Beijing, NorthernChina)", "Hosted(Beijing, 2008SummerOlympics) ∧ Hosted(Beijing, 2008SummerParalympics)", "∀x (City(x) ∧ HostedSummerOlympics(x) ∧ HostedWinterOlympics(x) ∧ HostedSummerParalympics(x) ∧ HostedWinterParalympics(x))", "∀x (UniversityInBeijing(x) ∧ RankAmongBestInAsiaPacific(x) ∧ RankAmongBestInWorld(x) → ConsistentlyRanked(x))"], "conclusion-FOL": "SecondLargestChineseCityByUrbanPopulation(Beijing)"}
{"premises-FOL": ["∀x (Alien(x) → Extraterrestrial(x))", "∀x (FromMars(x) → Alien(x))", "¬∃x (Extraterrestrial(x) ∧ Human(x))", "∀x (Earthian(x) → Human(x))", "∀x (Marvin(x) → (¬FromEarth(x) ∧ ¬FromMars(x)))", "∀x (Marvin(x) ∧ ¬FromEarth(x) → Extraterrestrial(x))"], "conclusion-FOL": "∀x (Alien(x) → Marvin(x))"}
{"premises-FOL": ["∀x (Alien(x) → Extraterrestrial(x))", "∀x (FromMars(x) → Alien(x))", "¬∃x (Extraterrestrial(x) ∧ Human(x))", "∀x (Earthian(x) → Human(x))", "∀x (Marvin(x) → (¬FromEarth(x) ∧ ¬FromMars(x)))", "∀x (Marvin(x) ∧ ¬FromEarth(x) → Extraterrestrial(x))"], "conclusion-FOL": "∀x (Marvin(x) → ¬(Human(x) ∨ FromMars(x)))"}
{"premises-FOL": ["∀x (Alien(x) → Extraterrestrial(x))", "∀x (FromMars(x) → Alien(x))", "¬∃x (Extraterrestrial(x) ∧ Human(x))", "∀x (Earthian(x) → Human(x))", "∀x (Marvin(x) → (¬FromEarth(x) ∧ ¬FromMars(x)))", "∀x (Marvin(x) ∧ ¬FromEarth(x) → Extraterrestrial(x))"], "conclusion-FOL": "∀x (Marvin(x) ∧ ¬FromMars(x) → Human(x))"}
{"premises-FOL": ["∀x (Person(x) → (GrandSlamChampion(x) ⊕ OscarNominatedActor(x)))", "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))", "∀x (OscarNominatedActor(x) → Celebrity(x))", "∀x (ProfessionalTennisPlayer(x) → Athlete(x))", "∀x (Celebrity(x) → WellPaid(x))", "∀x (Athlete(x) → Famous(x))", "∀x (WellPaid(x) → LivesInTaxHaven(x))", "∀x (Famous(x) ∧ Athlete(x) → WellPaid(x))"], "conclusion-FOL": "GrandSlamChampion(djokovic)"}
{"premises-FOL": ["∀x (Person(x) → (GrandSlamChampion(x) ⊕ OscarNominatedActor(x)))", "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))", "∀x (OscarNominatedActor(x) → Celebrity(x))", "∀x (ProfessionalTennisPlayer(x) → Athlete(x))", "∀x (Celebrity(x) → WellPaid(x))", "∀x (Athlete(x) → Famous(x))", "∀x (WellPaid(x) → LivesInTaxHaven(x))", "∀x (Famous(x) ∧ Athlete(x) → WellPaid(x))"], "conclusion-FOL": "∃x (TennisPlayer(x) ∧ Djokovic(x) ∧ LivesInTaxHaven(x))"}
{"premises-FOL": ["∀x (Person(x) → (GrandSlamChampion(x) ⊕ OscarNominatedActor(x)))", "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))", "∀x (OscarNominatedActor(x) → Celebrity(x))", "∀x (ProfessionalTennisPlayer(x) → Athlete(x))", "∀x (Celebrity(x) → WellPaid(x))", "∀x (Athlete(x) → Famous(x))", "∀x (WellPaid(x) → LivesInTaxHaven(x))", "∀x (Famous(x) ∧ Athlete(x) → WellPaid(x))"], "conclusion-FOL": "¬(DjokovicLivesInTaxHaven(Djokovic))"}
{"premises-FOL": ["∀x (DiamondMine(x) → (ProfessionalWrestlingStable(x) ∧ FormedInWWE(x)))", "∀x ∀y (RoderickStrong(x) ∧ DiamondMine(y) → Leads(x, y))", "∀x∀y∀z (DiamondMine(x) ∧ CreedBrothers(y) ∧ IvyNile(z) → Includes(x, y) ∧ Includes(x, z))", "∃x ∃y (Imperium(x) ∧ DiamondMine(y) ∧ Feud(x, y))"], "conclusion-FOL": "∀x (Roderick(x) ∧ ProfessionalWrestling(y) ∧ Stable(z) ∧ Leads(x, y, z) → Strong(x))"}
{"premises-FOL": ["∀x (DiamondMine(x) → (ProfessionalWrestlingStable(x) ∧ FormedInWWE(x)))", "∀x ∀y (RoderickStrong(x) ∧ DiamondMine(y) → Leads(x, y))", "∀x∀y∀z (DiamondMine(x) ∧ CreedBrothers(y) ∧ IvyNile(z) → Includes(x, y) ∧ Includes(x, z))", "∃x ∃y (Imperium(x) ∧ DiamondMine(y) ∧ Feud(x, y))"], "conclusion-FOL": "∀x ∀y (Roderick(x) ∧ CreedBrothers(y) → StrongLeads(x, y))"}
{"premises-FOL": ["∀x (DiamondMine(x) → (ProfessionalWrestlingStable(x) ∧ FormedInWWE(x)))", "∀x ∀y (RoderickStrong(x) ∧ DiamondMine(y) → Leads(x, y))", "∀x∀y∀z (DiamondMine(x) ∧ CreedBrothers(y) ∧ IvyNile(z) → Includes(x, y) ∧ Includes(x, z))", "∃x ∃y (Imperium(x) ∧ DiamondMine(y) ∧ Feud(x, y))"], "conclusion-FOL": "¬(Imperium(x) ∧ FeudWith(x, y) ∧ ProfessionalWrestlingStable(y) ∧ Includes(y, ivy_nile))"}
{"premises-FOL": ["SymphonyNo9(musicPiece)", "∀x (Composer(x) → WritesMusicPieces(x))", "Wrote(Beethoven, SymphonyNo9)", "∀x ∀y (ViennaMusicSociety(x) ∧ SymphonyNo9(y) → Premiered(x, y))", "∀x (ViennaMusicSociety(x) → Orchestra(x))", "∀x (Beethoven(x) → LeadsViennaMusicSociety(x))", "∀x ∀y (Orchestra(x) ∧ Conductor(y) → LedBy(x, y))"], "conclusion-FOL": "∃x (Composer(x) ∧ Beethoven(x))"}
{"premises-FOL": ["SymphonyNo9(musicPiece)", "∀x (Composer(x) → WritesMusicPieces(x))", "Wrote(Beethoven, SymphonyNo9)", "∀x ∀y (ViennaMusicSociety(x) ∧ SymphonyNo9(y) → Premiered(x, y))", "∀x (ViennaMusicSociety(x) → Orchestra(x))", "∀x (Beethoven(x) → LeadsViennaMusicSociety(x))", "∀x ∀y (Orchestra(x) ∧ Conductor(y) → LedBy(x, y))"], "conclusion-FOL": "∃x∃y (Orchestra(x) ∧ MusicPiece(y) ∧ Premiered(x, y))"}
{"premises-FOL": ["SymphonyNo9(musicPiece)", "∀x (Composer(x) → WritesMusicPieces(x))", "Wrote(Beethoven, SymphonyNo9)", "∀x ∀y (ViennaMusicSociety(x) ∧ SymphonyNo9(y) → Premiered(x, y))", "∀x (ViennaMusicSociety(x) → Orchestra(x))", "∀x (Beethoven(x) → LeadsViennaMusicSociety(x))", "∀x ∀y (Orchestra(x) ∧ Conductor(y) → LedBy(x, y))"], "conclusion-FOL": "¬(Conductor(beethoven))"}
{"premises-FOL": ["∀x (DesignStyle(x) ∧ DesignedBy(x, ZahaHadid) → Timeless(x))", "¬∃x (MassProductDesign(x) ∧ Timeless(x))", "Either(DesignStyle(zahaHadid) ∨ DesignStyle(kellyWearstler))", "∀x (DesignStyle(x) ∧ DesignedBy(x, KellyWearstler) → Evocative(x))", "∀x (DesignStyle(x) ∧ DesignedBy(x, KellyWearstler) → Dreamy(x))", "∀x (Design(x) ∧ DesignByMax(x) ∧ Timeless(x) → (MassProductDesign(x) ∧ Evocative(x)))"], "conclusion-FOL": "∀x (Design(x) ∧ DesignedBy(x, \"Max\") → MassProductDesign(x))"}
{"premises-FOL": ["∀x (DesignStyle(x) ∧ DesignedBy(x, ZahaHadid) → Timeless(x))", "¬∃x (MassProductDesign(x) ∧ Timeless(x))", "Either(DesignStyle(zahaHadid) ∨ DesignStyle(kellyWearstler))", "∀x (DesignStyle(x) ∧ DesignedBy(x, KellyWearstler) → Evocative(x))", "∀x (DesignStyle(x) ∧ DesignedBy(x, KellyWearstler) → Dreamy(x))", "∀x (Design(x) ∧ DesignByMax(x) ∧ Timeless(x) → (MassProductDesign(x) ∧ Evocative(x)))"], "conclusion-FOL": "∀x (Design(x) ∧ DesignedBy(x, \"Max\") → (Evocative(x) ∧ Dreamy(x)))"}
{"premises-FOL": ["∀x (DesignStyle(x) ∧ DesignedBy(x, ZahaHadid) → Timeless(x))", "¬∃x (MassProductDesign(x) ∧ Timeless(x))", "Either(DesignStyle(zahaHadid) ∨ DesignStyle(kellyWearstler))", "∀x (DesignStyle(x) ∧ DesignedBy(x, KellyWearstler) → Evocative(x))", "∀x (DesignStyle(x) ∧ DesignedBy(x, KellyWearstler) → Dreamy(x))", "∀x (Design(x) ∧ DesignByMax(x) ∧ Timeless(x) → (MassProductDesign(x) ∧ Evocative(x)))"], "conclusion-FOL": "∀x (Design(x) ∧ DesignedBy(x, \"Max\") → (Evocative(x) ⊕ Dreamy(x)))"}
{"premises-FOL": ["∀x (RankedHighlyByWTA(x) → MostActiveMajorTennisPlayer(x))", "∀x (LostToIgaSwietek(x) → HighlyRankedByWTA(x))", "∀x (FemaleTennisPlayer(x) ∧ ParticipatesInRolandGarros(x) → LostToIgaSwietek(x))", "Either (FemaleTennisPlayers(2022, RolandGarros) ∨ MaleTennisPlayers(2022, RolandGarros))", "∀x (MaleTennisPlayer(x) ∧ AtRolandGarros2022(x) → LostToRafaelNadal(x))", "∀x (CocoGauff(x) ∧ (HighlyRankedByWTA(x) ∨ LostToRafaelNadal(x)) → ¬MaleTennisPlayerAtRolandGarros2022(x))"], "conclusion-FOL": "∃x (MostActivePlayerInMajorTennis(x) ∧ CocoGauff(x))"}
{"premises-FOL": ["∀x (RankedHighlyByWTA(x) → MostActiveMajorTennisPlayer(x))", "∀x (LostToIgaSwietek(x) → HighlyRankedByWTA(x))", "∀x (FemaleTennisPlayer(x) ∧ ParticipatesInRolandGarros(x) → LostToIgaSwietek(x))", "Either (FemaleTennisPlayers(2022, RolandGarros) ∨ MaleTennisPlayers(2022, RolandGarros))", "∀x (MaleTennisPlayer(x) ∧ AtRolandGarros2022(x) → LostToRafaelNadal(x))", "∀x (CocoGauff(x) ∧ (HighlyRankedByWTA(x) ∨ LostToRafaelNadal(x)) → ¬MaleTennisPlayerAtRolandGarros2022(x))"], "conclusion-FOL": "∃x ∃y (CocoGauff(x) ∧ RafaelNadal(y) ∧ LostTo(x, y))"}
{"premises-FOL": ["∀x (RankedHighlyByWTA(x) → MostActiveMajorTennisPlayer(x))", "∀x (LostToIgaSwietek(x) → HighlyRankedByWTA(x))", "∀x (FemaleTennisPlayer(x) ∧ ParticipatesInRolandGarros(x) → LostToIgaSwietek(x))", "Either (FemaleTennisPlayers(2022, RolandGarros) ∨ MaleTennisPlayers(2022, RolandGarros))", "∀x (MaleTennisPlayer(x) ∧ AtRolandGarros2022(x) → LostToRafaelNadal(x))", "∀x (CocoGauff(x) ∧ (HighlyRankedByWTA(x) ∨ LostToRafaelNadal(x)) → ¬MaleTennisPlayerAtRolandGarros2022(x))"], "conclusion-FOL": "¬(CocoGauffLostToIgaSwietekOrMostActiveMajorTennisPlayer(CocoGauff))"}
{"premises-FOL": ["∀x (Cat(x) → Mammal(x))", "∃x (Pet(x) ∧ ¬Mammal(x))"], "conclusion-FOL": "∀x (Pet(x) ∧ ¬Cat(x))"}
{"premises-FOL": ["∀x (Year(x) → (Season(x, spring) ∨ Season(x, summer) ∨ Season(x, fall) ∨ Season(x, winter)))", "∀x (Student(x) ∧ WantsLongVacation(x) → LovesSummer(x))", "∃x (FavoriteSeason(x, Emma) ∧ Season(x, Summer))", "∃x ∃y (Person(x) ∧ Person(y) ∧ FavoriteSeason(x, y) ∧ Mia(x) ∧ Emma(y) ∧ ¬(FavoriteSeason(x, y)))", "∃x (Person(x) ∧ WantsLongVacation(x))"], "conclusion-FOL": "FavoriteSeason(james, summer)"}
{"premises-FOL": ["∀x (Year(x) → (Season(x, spring) ∨ Season(x, summer) ∨ Season(x, fall) ∨ Season(x, winter)))", "∀x (Student(x) ∧ WantsLongVacation(x) → LovesSummer(x))", "∃x (FavoriteSeason(x, Emma) ∧ Season(x, Summer))", "∃x ∃y (Person(x) ∧ Person(y) ∧ FavoriteSeason(x, y) ∧ Mia(x) ∧ Emma(y) ∧ ¬(FavoriteSeason(x, y)))", "∃x (Person(x) ∧ WantsLongVacation(x))"], "conclusion-FOL": "FavoriteSeason(james, fall)"}
{"premises-FOL": ["∀x (Year(x) → (Season(x, spring) ∨ Season(x, summer) ∨ Season(x, fall) ∨ Season(x, winter)))", "∀x (Student(x) ∧ WantsLongVacation(x) → LovesSummer(x))", "∃x (FavoriteSeason(x, Emma) ∧ Season(x, Summer))", "∃x ∃y (Person(x) ∧ Person(y) ∧ FavoriteSeason(x, y) ∧ Mia(x) ∧ Emma(y) ∧ ¬(FavoriteSeason(x, y)))", "∃x (Person(x) ∧ WantsLongVacation(x))"], "conclusion-FOL": "∀x (Person(x) ∧ FavoriteSeason(x, spring) → Mia(x))"}
{"premises-FOL": ["∀x (DigitalMedia(x) → ¬Analog(x))", "∀x (PrintedText(x) → Analog(x))", "∀x (StreamingService(x) → Digital(x))", "∀x (HardcoverBook(x) → PrintedText(x))", "∀x (StreamingService(x) → HardcoverBook(x))"], "conclusion-FOL": "PrintedText(1984)"}
{"premises-FOL": ["∀x (DigitalMedia(x) → ¬Analog(x))", "∀x (PrintedText(x) → Analog(x))", "∀x (StreamingService(x) → Digital(x))", "∀x (HardcoverBook(x) → PrintedText(x))", "∀x (StreamingService(x) → HardcoverBook(x))"], "conclusion-FOL": "StreamingService(1984)"}
{"premises-FOL": ["∀x (DigitalMedia(x) → ¬Analog(x))", "∀x (PrintedText(x) → Analog(x))", "∀x (StreamingService(x) → Digital(x))", "∀x (HardcoverBook(x) → PrintedText(x))", "∀x (StreamingService(x) → HardcoverBook(x))"], "conclusion-FOL": "¬(StreamingService(1984))"}
{"premises-FOL": ["∀x (RomanceLanguage(x) → IndoEuropean(x))", "∀x (RomanceLanguage(x) → LanguageFamily(x))", "∀x∀y (Language(x) ∧ Language(y) ∧ LanguageFamily(x, y) → Related(x, y))", "∀x∀y (French(x) ∧ Spanish(y) → RomanceLanguage(x) ∧ RomanceLanguage(y))", "RelatedLanguage(German, Spanish)", "∀x (Basque(x) → ¬RelatedToAnyLanguage(x))"], "conclusion-FOL": "∀x (Language(x) ∧ Basque(x) → Romance(x))"}
{"premises-FOL": ["∀x (RomanceLanguage(x) → IndoEuropean(x))", "∀x (RomanceLanguage(x) → LanguageFamily(x))", "∀x∀y (Language(x) ∧ Language(y) ∧ LanguageFamily(x, y) → Related(x, y))", "∀x∀y (French(x) ∧ Spanish(y) → RomanceLanguage(x) ∧ RomanceLanguage(y))", "RelatedLanguage(German, Spanish)", "∀x (Basque(x) → ¬RelatedToAnyLanguage(x))"], "conclusion-FOL": "∀x (German(x) → RomanceLanguage(x))"}
{"premises-FOL": ["∀x (RomanceLanguage(x) → IndoEuropean(x))", "∀x (RomanceLanguage(x) → LanguageFamily(x))", "∀x∀y (Language(x) ∧ Language(y) ∧ LanguageFamily(x, y) → Related(x, y))", "∀x∀y (French(x) ∧ Spanish(y) → RomanceLanguage(x) ∧ RomanceLanguage(y))", "RelatedLanguage(German, Spanish)", "∀x (Basque(x) → ¬RelatedToAnyLanguage(x))"], "conclusion-FOL": "∀x (French(x) → Indo-European(x))"}
{"premises-FOL": ["Player(robert_lewandowski) ∧ Position(striker)", "∀x (Striker(x) → SoccerPlayer(x))", "Left(Lewandowski, BayernMunchen)", "∀x∀y (Player(x) ∧ Team(y) ∧ LeftTeam(x, y) → ¬PlayForTeam(x, y))"], "conclusion-FOL": "SoccerPlayer(lewandowski)"}
{"premises-FOL": ["Player(robert_lewandowski) ∧ Position(striker)", "∀x (Striker(x) → SoccerPlayer(x))", "Left(Lewandowski, BayernMunchen)", "∀x∀y (Player(x) ∧ Team(y) ∧ LeftTeam(x, y) → ¬PlayForTeam(x, y))"], "conclusion-FOL": "Player(robert_lewandowski) ∧ Club(BayernMunchen)"}
{"premises-FOL": ["Player(robert_lewandowski) ∧ Position(striker)", "∀x (Striker(x) → SoccerPlayer(x))", "Left(Lewandowski, BayernMunchen)", "∀x∀y (Player(x) ∧ Team(y) ∧ LeftTeam(x, y) → ¬PlayForTeam(x, y))"], "conclusion-FOL": "Player(robert_lewandowski) ∧ Star(robert_lewandowski)"}
{"premises-FOL": ["City(billings) ∧ In(billings, montana)", "∀x (City(x) ∧ InMontana(x) → (Butte(x) ∨ Helena(x) ∨ Missoula(x)))", "∀x∀y (City(x) ∧ City(y) ∧ InState(x, y) → (WhiteSulphurSprings(x) ∧ Butte(y)))", "¬(PierreCity(pierre) ∧ InMontana(pierre))", "∀x (City(x) ∧ InButte(x) → ¬InPierre(x))"], "conclusion-FOL": "∀x∀y (Butte(x) ∧ Pierre(y) → InState(x, y))"}
{"premises-FOL": ["City(billings) ∧ In(billings, montana)", "∀x (City(x) ∧ InMontana(x) → (Butte(x) ∨ Helena(x) ∨ Missoula(x)))", "∀x∀y (City(x) ∧ City(y) ∧ InState(x, y) → (WhiteSulphurSprings(x) ∧ Butte(y)))", "¬(PierreCity(pierre) ∧ InMontana(pierre))", "∀x (City(x) ∧ InButte(x) → ¬InPierre(x))"], "conclusion-FOL": "∀x∀y (Pierre(x) ∧ Bismarck(y) → InState(x, y))"}
{"premises-FOL": ["City(billings) ∧ In(billings, montana)", "∀x (City(x) ∧ InMontana(x) → (Butte(x) ∨ Helena(x) ∨ Missoula(x)))", "∀x∀y (City(x) ∧ City(y) ∧ InState(x, y) → (WhiteSulphurSprings(x) ∧ Butte(y)))", "¬(PierreCity(pierre) ∧ InMontana(pierre))", "∀x (City(x) ∧ InButte(x) → ¬InPierre(x))"], "conclusion-FOL": "Home(montana, missoula)"}
{"premises-FOL": ["∀x (InternationalStudent(x) ∧ InUS(x) → (F1Visa(x) ⊕ J1Visa(x)))", "∀x (InternationalStudent(x) ∧ InUS(x) ∧ HasF1Visa(x) → (ApplyCPT(x) ∨ ApplyOPT(x)))", "∃x (Student(x) ∧ International(x))", "∀x (Mike(x) ∧ WantsToWorkInUS(x) → ApplyForCPT(x))"], "conclusion-FOL": "∃x (Person(x) ∧ HasF1Visa(x))"}
{"premises-FOL": ["∀x (InternationalStudent(x) ∧ InUS(x) → (F1Visa(x) ⊕ J1Visa(x)))", "∀x (InternationalStudent(x) ∧ InUS(x) ∧ HasF1Visa(x) → (ApplyCPT(x) ∨ ApplyOPT(x)))", "∃x (Student(x) ∧ International(x))", "∀x (Mike(x) ∧ WantsToWorkInUS(x) → ApplyForCPT(x))"], "conclusion-FOL": "HasJ1Visa(mike)"}
{"premises-FOL": ["∀x (Cow(x) → Bovine(x))", "∃x (Pet(x) ∧ Cow(x))", "∀x (Bovine(x) → Domesticated(x))", "∀x (DomesticatedAnimal(x) → ¬Alligator(x))", "∀x (Aligator(x) ↔ Ted(x))"], "conclusion-FOL": "Pet(ted)"}
{"premises-FOL": ["∀x (Cow(x) → Bovine(x))", "∃x (Pet(x) ∧ Cow(x))", "∀x (Bovine(x) → Domesticated(x))", "∀x (DomesticatedAnimal(x) → ¬Alligator(x))", "∀x (Aligator(x) ↔ Ted(x))"], "conclusion-FOL": "∀x (Pet(x) ∧ Cow(x))"}
{"premises-FOL": ["∀x (Cow(x) → Bovine(x))", "∃x (Pet(x) ∧ Cow(x))", "∀x (Bovine(x) → Domesticated(x))", "∀x (DomesticatedAnimal(x) → ¬Alligator(x))", "∀x (Aligator(x) ↔ Ted(x))"], "conclusion-FOL": "∀x (Cow(x) → ¬Pet(x))"}
{"premises-FOL": ["PrivateIvyLeagueResearchUniversity(yale)", "Moved(yale, new_haven, 1716)", "423000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "∀x (YaleUniversity(x) → (OrganizedInto(x, 27) ∧ (ResidentialColleges(x) ∨ YaleGraduateSchoolOfArtsAndSciences(x) ∨ ProfessionalSchools(x))))", "ResidentialCollegesAtYale(BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)"], "conclusion-FOL": "∃x (PrivateIvyLeagueResearchUniversity(x) ∧ MovedToNewHaven(x))"}
{"premises-FOL": ["PrivateIvyLeagueResearchUniversity(yale)", "Moved(yale, new_haven, 1716)", "423000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "∀x (YaleUniversity(x) → (OrganizedInto(x, 27) ∧ (ResidentialColleges(x) ∨ YaleGraduateSchoolOfArtsAndSciences(x) ∨ ProfessionalSchools(x))))", "ResidentialCollegesAtYale(BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)"], "conclusion-FOL": "∀x (EducationalInstitution(x) ∧ University(x) ∧ Endowment(x) ∧ Largest(x) → YaleUniversity(x))"}
{"premises-FOL": ["PrivateIvyLeagueResearchUniversity(yale)", "Moved(yale, new_haven, 1716)", "423000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "∀x (YaleUniversity(x) → (OrganizedInto(x, 27) ∧ (ResidentialColleges(x) ∨ YaleGraduateSchoolOfArtsAndSciences(x) ∨ ProfessionalSchools(x))))", "ResidentialCollegesAtYale(BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)"], "conclusion-FOL": "ResidentialCollege(PiersonCollege, Yale)"}
{"premises-FOL": ["∀x∀y (Badults(x) ∧ Pappys(y) → (BritishSitcomSeries(x) ∧ StarringMembers(x, y)))", "∀x (Badults(x) ∧ PilotedIn(x, July 2013) ∧ OnBBCThree(x))", "∃x (WorkingTitle(x) ∧ SecretDudeSociety(x) ∧ UsedFor(x, Badults))", "∀x (AndrewCollins(x) ∧ ScriptEditor(x, Badults))"], "conclusion-FOL": "AndrewCollins(a) ∧ ScriptEditor(a) ∧ Series(a) ∧ WorkingTitle(a, \"TheSecretDudeSociety\")"}
{"premises-FOL": ["∀x∀y (Badults(x) ∧ Pappys(y) → (BritishSitcomSeries(x) ∧ StarringMembers(x, y)))", "∀x (Badults(x) ∧ PilotedIn(x, July 2013) ∧ OnBBCThree(x))", "∃x (WorkingTitle(x) ∧ SecretDudeSociety(x) ∧ UsedFor(x, Badults))", "∀x (AndrewCollins(x) ∧ ScriptEditor(x, Badults))"], "conclusion-FOL": "¬(∃x (MemberOfPappys(x) ∧ StarredForShow(x) ∧ PilotsOnBBCTwo(x) ∨ PilotsOnBBCThree(x)))"}
{"premises-FOL": ["∀x (GrowthCompany(x) → VolatileStock(x))", "∀x (StockPrice(x) ∧ Volatile(x) → ¬SuitableForRetirementFund(x))", "∃x (Company(x) ∧ GrowthCompanyStock(x))", "∀x (Company(x) ∧ Mature(x) → SuitableForRetirementFund(x))", "∀x (Company(x) ∧ Mature(x) → Stock(x, KO))"], "conclusion-FOL": "CompanyStock(KO)"}
{"premises-FOL": ["∀x (GrowthCompany(x) → VolatileStock(x))", "∀x (StockPrice(x) ∧ Volatile(x) → ¬SuitableForRetirementFund(x))", "∃x (Company(x) ∧ GrowthCompanyStock(x))", "∀x (Company(x) ∧ Mature(x) → SuitableForRetirementFund(x))", "∀x (Company(x) ∧ Mature(x) → Stock(x, KO))"], "conclusion-FOL": "∀x (Company(x) ∧ KO(x) → (Stock(x) ∧ GrowthCompanyStock(x)))"}
{"premises-FOL": ["∀x (GrowthCompany(x) → VolatileStock(x))", "∀x (StockPrice(x) ∧ Volatile(x) → ¬SuitableForRetirementFund(x))", "∃x (Company(x) ∧ GrowthCompanyStock(x))", "∀x (Company(x) ∧ Mature(x) → SuitableForRetirementFund(x))", "∀x (Company(x) ∧ Mature(x) → Stock(x, KO))"], "conclusion-FOL": "∀x (GrowthCompanyStock(x) ∧ (Stock(x) ∧ VolatilePrice(x)) → (¬CompanyStock(x) ∧ ¬VolatilePrice(x)))"}
{"premises-FOL": ["∀x (VehicleRegistrationPlate(x) ∧ InIstanbul(x) → BeginsWithNumber34(x))", "∀x (Plate(x) ∧ ¬BeginsWith(x, 34) → ¬FromIstanbul(x))", "VehicleRegistrationPlate(joe, istanbul)", "HasLicensePlateNumber(Tom, 35)", "∀x (LicensePlate(x) ∧ BeginsWithNumber(x, 35) → ¬BeginsWithNumber(x, 34))"], "conclusion-FOL": "HasLicensePlateNumber(Joe, 34)"}
{"premises-FOL": ["∀x (VehicleRegistrationPlate(x) ∧ InIstanbul(x) → BeginsWithNumber34(x))", "∀x (Plate(x) ∧ ¬BeginsWith(x, 34) → ¬FromIstanbul(x))", "VehicleRegistrationPlate(joe, istanbul)", "HasLicensePlateNumber(Tom, 35)", "∀x (LicensePlate(x) ∧ BeginsWithNumber(x, 35) → ¬BeginsWithNumber(x, 34))"], "conclusion-FOL": "LicensePlate(tom, istanbul)"}
{"premises-FOL": ["∀x (WorksInStudentJobsOnCampus(x) → NeedsToEarnMoneyToPayForCollegeTuition(x))", "∀x (FrequentTakeoutInCollege(x) → StudentJobOnCampus(x))", "∀x (Person(x) → (OrderTakeoutFrequently(x) ⊕ (EnjoysDiningHallMeals(x) ∧ EnjoysRecipes(x))))", "∀x (EnjoyDiningHallMealsAndRecipes(x) → ¬PickyEater(x))", "∀x∀y (EnjoyDiningHallMealsAndRecipes(x) ∧ SpendTimeEatingAndCatchingUp(x, y) → EatInCampusDiningHalls(y))", "∀x (WorksInStudentJobsOnCampus(x) ∧ NeedsToEarnMoneyForCollegeTuition(x) → (¬Picky(x) ∧ ¬NeedsToEarnMoneyForCollegeTuition(x)))"], "conclusion-FOL": "∀x (Mary(x) ∧ NeedsMoney(x) → HelpPayForCollegeTuition(x))"}
{"premises-FOL": ["∀x (WorksInStudentJobsOnCampus(x) → NeedsToEarnMoneyToPayForCollegeTuition(x))", "∀x (FrequentTakeoutInCollege(x) → StudentJobOnCampus(x))", "∀x (Person(x) → (OrderTakeoutFrequently(x) ⊕ (EnjoysDiningHallMeals(x) ∧ EnjoysRecipes(x))))", "∀x (EnjoyDiningHallMealsAndRecipes(x) → ¬PickyEater(x))", "∀x∀y (EnjoyDiningHallMealsAndRecipes(x) ∧ SpendTimeEatingAndCatchingUp(x, y) → EatInCampusDiningHalls(y))", "∀x (WorksInStudentJobsOnCampus(x) ∧ NeedsToEarnMoneyForCollegeTuition(x) → (¬Picky(x) ∧ ¬NeedsToEarnMoneyForCollegeTuition(x)))"], "conclusion-FOL": "∀x (Mary(x) → (¬PickyEater(x) ∧ SpendsTimeEating(x) ∧ SpendsTimeCatchingUpWithFriends(x)))"}
{"premises-FOL": ["∀x (WorksInStudentJobsOnCampus(x) → NeedsToEarnMoneyToPayForCollegeTuition(x))", "∀x (FrequentTakeoutInCollege(x) → StudentJobOnCampus(x))", "∀x (Person(x) → (OrderTakeoutFrequently(x) ⊕ (EnjoysDiningHallMeals(x) ∧ EnjoysRecipes(x))))", "∀x (EnjoyDiningHallMealsAndRecipes(x) → ¬PickyEater(x))", "∀x∀y (EnjoyDiningHallMealsAndRecipes(x) ∧ SpendTimeEatingAndCatchingUp(x, y) → EatInCampusDiningHalls(y))", "∀x (WorksInStudentJobsOnCampus(x) ∧ NeedsToEarnMoneyForCollegeTuition(x) → (¬Picky(x) ∧ ¬NeedsToEarnMoneyForCollegeTuition(x)))"], "conclusion-FOL": "∀x (Student(x) ∧ Mary(x) → (¬PickyEater(x) ∨ (PickyEater(x) ∧ SpendsTimeInDiningHalls(x))))"}
{"premises-FOL": ["∀x (Bakery(x) → ¬Spicy(x))", "∀x (Cupcake(x) → Bakes(x))", "∀x (Hotpot(x) → Spicy(x))", "∀x (ProductOfBakedByMelissa(x) → Cupcake(x))", "∀x (DriedThaiChilies(x) ∧ (Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x)))"], "conclusion-FOL": "∀x (DriedThaiChilies(x) → BakedByMelissa(x))"}
{"premises-FOL": ["∀x (Bakery(x) → ¬Spicy(x))", "∀x (Cupcake(x) → Bakes(x))", "∀x (Hotpot(x) → Spicy(x))", "∀x (ProductOfBakedByMelissa(x) → Cupcake(x))", "∀x (DriedThaiChilies(x) ∧ (Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x)))"], "conclusion-FOL": "∀x (DriedThaiChili(x) → ¬ProductOf(x, BakedByMelissa))"}
{"premises-FOL": ["∀x (Bakery(x) → ¬Spicy(x))", "∀x (Cupcake(x) → Bakes(x))", "∀x (Hotpot(x) → Spicy(x))", "∀x (ProductOfBakedByMelissa(x) → Cupcake(x))", "∀x (DriedThaiChilies(x) ∧ (Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x)))"], "conclusion-FOL": "∀x (DriedThaiChili(x) → Hotpot(x))"}
{"premises-FOL": ["∀x (Bakery(x) → ¬Spicy(x))", "∀x (Cupcake(x) → Bakes(x))", "∀x (Hotpot(x) → Spicy(x))", "∀x (ProductOfBakedByMelissa(x) → Cupcake(x))", "∀x (DriedThaiChilies(x) ∧ (Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x)))"], "conclusion-FOL": "∀x (DriedThaiChili(x) → ¬(BakedByMelissa(x) ∨ Bakery(x)))"}
{"premises-FOL": ["∀x (Bakery(x) → ¬Spicy(x))", "∀x (Cupcake(x) → Bakes(x))", "∀x (Hotpot(x) → Spicy(x))", "∀x (ProductOfBakedByMelissa(x) → Cupcake(x))", "∀x (DriedThaiChilies(x) ∧ (Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x)))"], "conclusion-FOL": "∀x (DriedThaiChili(x) → (Cupcake(x) ∧ ProductOf(x, BakedByMelissa)))"}
{"premises-FOL": ["∀x (Restaurant(x) ∧ ListedInYelpsRecommendations(x) → ¬ManyNegativeReviews(x))", "∀x (Restaurant(x) ∧ RatingGreaterThan(x, 9) → ListedInRecommendations(x))", "∃x (Restaurant(x) ∧ ¬ProvidesTakeOutService(x) ∧ ReceivesManyNegativeReviews(x))", "∀x (Restaurant(x) ∧ PopularAmongLocalResidents(x) → RatingGreaterThan9(x))", "∃x (Subway(x) ∧ (RatingGreaterThan(x, 9) ∨ PopularAmongLocalResidents(x)))"], "conclusion-FOL": "∀x (Subway(x) ∧ TakeOutService(x) ∧ ManyNegativeReviews(x) → (RatingGreaterThan9(x) ∧ ¬TakeOutService(x)))"}
{"premises-FOL": ["∀x (Restaurant(x) ∧ ListedInYelpsRecommendations(x) → ¬ManyNegativeReviews(x))", "∀x (Restaurant(x) ∧ RatingGreaterThan(x, 9) → ListedInRecommendations(x))", "∃x (Restaurant(x) ∧ ¬ProvidesTakeOutService(x) ∧ ReceivesManyNegativeReviews(x))", "∀x (Restaurant(x) ∧ PopularAmongLocalResidents(x) → RatingGreaterThan9(x))", "∃x (Subway(x) ∧ (RatingGreaterThan(x, 9) ∨ PopularAmongLocalResidents(x)))"], "conclusion-FOL": "∀x (Subway(x) → (TakeOutService(x) ∧ ¬ManyNegativeReviews(x)))"}
{"premises-FOL": ["∀x (Restaurant(x) ∧ ListedInYelpsRecommendations(x) → ¬ManyNegativeReviews(x))", "∀x (Restaurant(x) ∧ RatingGreaterThan(x, 9) → ListedInRecommendations(x))", "∃x (Restaurant(x) ∧ ¬ProvidesTakeOutService(x) ∧ ReceivesManyNegativeReviews(x))", "∀x (Restaurant(x) ∧ PopularAmongLocalResidents(x) → RatingGreaterThan9(x))", "∃x (Subway(x) ∧ (RatingGreaterThan(x, 9) ∨ PopularAmongLocalResidents(x)))"], "conclusion-FOL": "∀x (Subway(x) → ¬ProvidesTakeOutService(x))"}
{"premises-FOL": ["∀x (SuperheroMovie(x) → GoodGuysWin(x))", "∀x (SuperheroMovie(x) ↔ (SirDigbyChickenCaesar(x) ∧ Movie(x)))", "∀x∀y (GoodGuy(x) ∧ BadGuy(y) → Fights(x, y))", "SirDigby(n) ∧ Nemesis(m) → Fights(n, m)", "∀x (SuperheroMovie(x) ∧ NamedAfterCharacter(x) → GoodGuy(x))", "SirDigbyChickenCaesar(n) ↔ NamedAfter(n, SirDigby)", "∀x∀y (Person(x) ∧ Person(y) ∧ WinsFight(x, y) → LosesFight(y, x))", "∀x∀y (SuperheroMovie(x) ∧ NamedAfterCharacter(x, y) → AppearsInMovie(y, x))"], "conclusion-FOL": "∃x (Nemesis(x, SirDigby) ∧ Loses(x))"}
{"premises-FOL": ["∀x (Book(x) → ContainsTonsOfKnowledge(x))", "∀x (ReadsBook(x) → GainsKnowledge(x))", "∀x (GainsKnowledge(x) → BecomesSmarter(x))", "∀x∀y (Harry(x) ∧ Book(y) ∧ Walden(y) ∧ ByHenryThoreau(y) → Read(x, y))"], "conclusion-FOL": "∀x (Walden(x) → ContainsKnowledge(x))"}
{"premises-FOL": ["∀x (Book(x) → ContainsTonsOfKnowledge(x))", "∀x (ReadsBook(x) → GainsKnowledge(x))", "∀x (GainsKnowledge(x) → BecomesSmarter(x))", "∀x∀y (Harry(x) ∧ Book(y) ∧ Walden(y) ∧ ByHenryThoreau(y) → Read(x, y))"], "conclusion-FOL": "Smarter(Harry)"}
{"premises-FOL": ["∀x (Book(x) → ContainsTonsOfKnowledge(x))", "∀x (ReadsBook(x) → GainsKnowledge(x))", "∀x (GainsKnowledge(x) → BecomesSmarter(x))", "∀x∀y (Harry(x) ∧ Book(y) ∧ Walden(y) ∧ ByHenryThoreau(y) → Read(x, y))"], "conclusion-FOL": "∀x (Person(x) ∧ Smarter(x) → GainedKnowledge(x))"}
{"premises-FOL": ["∀x (NaturalLanguageProcessingTask(x) → (LanguageGenerationTask(x) ⊕ LanguageUnderstandingTask(x)))", "∀x (OutputOfNLPTask(x) ∧ TextSequence(x) → LanguageGenerationTask(x))", "∀x (MachineTranslation(x) → NaturalLanguageProcessingTask(x))", "∀x (MachineTranslationOutput(x) → TextSequence(x))"], "conclusion-FOL": "∀x (MachineTranslation(x) → LanguageGenerationTask(x))"}
{"premises-FOL": ["∀x (NaturalLanguageProcessingTask(x) → (LanguageGenerationTask(x) ⊕ LanguageUnderstandingTask(x)))", "∀x (OutputOfNLPTask(x) ∧ TextSequence(x) → LanguageGenerationTask(x))", "∀x (MachineTranslation(x) → NaturalLanguageProcessingTask(x))", "∀x (MachineTranslationOutput(x) → TextSequence(x))"], "conclusion-FOL": "∀x (MachineTranslation(x) → LanguageUnderstandingTask(x))"}
{"premises-FOL": ["∀x (Pet(x) ∧ ManagedBuilding(y) ∧ AllowedIn(x, y) → AllowedIn(x, y))", "∀x∀y (ManagedBuilding(x) ∧ Apartment(y) ∧ Rent(y) → DepositRequired(y))", "∀x (SecurityDeposit(x) → (EqualToMonthsRent(x) ∨ MoreThanMonthsRent(x)))", "Cat(fluffy) ∧ Owns(tom, fluffy)", "∀x (Cat(x) → Pet(x))", "ManagedBuilding(olive_garden)", "MonthlyRent(olive_garden, 2000)", "∀x∀y∀z (RentApartment(x, y, z) ↔ (ManagedBuilding(y) ∧ AllowedToMoveInWithFluffy(x, y) ∧ SecurityDepositNoMoreThan(z, 1500)))", "∀x ∀y (2000$ → MoreThan(x, y))"], "conclusion-FOL": "∀x (Tom(x) ∧ RentsApartment(x, y) ∧ InTheOliveGarden(y))"}
{"premises-FOL": ["∀x (Pet(x) ∧ ManagedBuilding(y) ∧ AllowedIn(x, y) → AllowedIn(x, y))", "∀x∀y (ManagedBuilding(x) ∧ Apartment(y) ∧ Rent(y) → DepositRequired(y))", "∀x (SecurityDeposit(x) → (EqualToMonthsRent(x) ∨ MoreThanMonthsRent(x)))", "Cat(fluffy) ∧ Owns(tom, fluffy)", "∀x (Cat(x) → Pet(x))", "ManagedBuilding(olive_garden)", "MonthlyRent(olive_garden, 2000)", "∀x∀y∀z (RentApartment(x, y, z) ↔ (ManagedBuilding(y) ∧ AllowedToMoveInWithFluffy(x, y) ∧ SecurityDepositNoMoreThan(z, 1500)))", "∀x ∀y (2000$ → MoreThan(x, y))"], "conclusion-FOL": "∀x∀y∀z (Person(x) ∧ Apartment(y) ∧ TheOliveGarden(z) ∧ InApartment(x, y) ∧ HasCat(x, Fluffy) → AllowedToMove(x, y))"}
{"premises-FOL": ["∀x (Pet(x) ∧ ManagedBuilding(y) ∧ AllowedIn(x, y) → AllowedIn(x, y))", "∀x∀y (ManagedBuilding(x) ∧ Apartment(y) ∧ Rent(y) → DepositRequired(y))", "∀x (SecurityDeposit(x) → (EqualToMonthsRent(x) ∨ MoreThanMonthsRent(x)))", "Cat(fluffy) ∧ Owns(tom, fluffy)", "∀x (Cat(x) → Pet(x))", "ManagedBuilding(olive_garden)", "MonthlyRent(olive_garden, 2000)", "∀x∀y∀z (RentApartment(x, y, z) ↔ (ManagedBuilding(y) ∧ AllowedToMoveInWithFluffy(x, y) ∧ SecurityDepositNoMoreThan(z, 1500)))", "∀x ∀y (2000$ → MoreThan(x, y))"], "conclusion-FOL": "∀x (SecurityDeposit(x) ∧ OliveGarden(x) → (IsMoreThan(x, 2000)))"}
{"premises-FOL": ["∀x (Animal(x) ∧ LovedByTourists(x) → MaxsFavorite(x))", "∀x (Animal(x) ∧ FromAustralia(x) → LovedByTourists(x))", "∀x (Quokka(x) → FromAustralia(x))", "∀x (Animal(x) ∧ FavoriteOf(Max, x) → VeryFluffy(x))", "∀x (Animal(x) ∧ FavoriteOf(x, Max) → LovesToSleep(x))", "∀x (Koala(x) ∧ VeryFluffy(x) → ¬Quokka(x))"], "conclusion-FOL": "∀x (Koala(x) → LovesToSleep(x))"}
{"premises-FOL": ["∀x (Animal(x) ∧ LovedByTourists(x) → MaxsFavorite(x))", "∀x (Animal(x) ∧ FromAustralia(x) → LovedByTourists(x))", "∀x (Quokka(x) → FromAustralia(x))", "∀x (Animal(x) ∧ FavoriteOf(Max, x) → VeryFluffy(x))", "∀x (Animal(x) ∧ FavoriteOf(x, Max) → LovesToSleep(x))", "∀x (Koala(x) ∧ VeryFluffy(x) → ¬Quokka(x))"], "conclusion-FOL": "∀x (Koala(x) → (LovesToSleep(x) ∧ Quokka(x)))"}
{"premises-FOL": ["∀x (Animal(x) ∧ LovedByTourists(x) → MaxsFavorite(x))", "∀x (Animal(x) ∧ FromAustralia(x) → LovedByTourists(x))", "∀x (Quokka(x) → FromAustralia(x))", "∀x (Animal(x) ∧ FavoriteOf(Max, x) → VeryFluffy(x))", "∀x (Animal(x) ∧ FavoriteOf(x, Max) → LovesToSleep(x))", "∀x (Koala(x) ∧ VeryFluffy(x) → ¬Quokka(x))"], "conclusion-FOL": "∀x (Koala(x) ∧ Quokka(x) → (LovesToSleep(x) ⊕ VeryFluffy(x)))"}
{"premises-FOL": ["∀x (Man(x) → (Kind(x) ⊕ Evil(x)))", "¬∃x (Ugly(x) ∧ Handsome(x))", "∀x (Evil(x) → Ugly(x))", "∀x (Gentleman(x) → Handsome(x))", "∀x (CEO(x) → Gentleman(x))", "∀x (Gentleman(x) ↔ Harry(x))"], "conclusion-FOL": "∃x (Person(x) ∧ CEO(x))"}
{"premises-FOL": ["∀x (Man(x) → (Kind(x) ⊕ Evil(x)))", "¬∃x (Ugly(x) ∧ Handsome(x))", "∀x (Evil(x) → Ugly(x))", "∀x (Gentleman(x) → Handsome(x))", "∀x (CEO(x) → Gentleman(x))", "∀x (Gentleman(x) ↔ Harry(x))"], "conclusion-FOL": "Kind(harry) ∨ CEO(harry)"}
{"premises-FOL": ["∀x (Man(x) → (Kind(x) ⊕ Evil(x)))", "¬∃x (Ugly(x) ∧ Handsome(x))", "∀x (Evil(x) → Ugly(x))", "∀x (Gentleman(x) → Handsome(x))", "∀x (CEO(x) → Gentleman(x))", "∀x (Gentleman(x) ↔ Harry(x))"], "conclusion-FOL": "∀x (Harry(x) ∧ (Evil(x) ∧ Ugly(x)) ∨ (¬Evil(x) ∧ ¬Ugly(x)) → ¬Kind(x) ∧ ¬CEO(x))"}
{"premises-FOL": ["∀x (Person(x) ∧ (Twin(x) ∨ Triplet(x)) → SpendsTimeWithSiblings(x))", "∀x∀y (Person(x) ∧ Person(y) ∧ Siblings(x, y) ∧ SameAge(x, y) → (Twins(x, y) ∨ Triplets(x, y)))", "∀x (PeopleComplainAboutAnnoyingSiblings(x) → SameAgeSiblings(x))", "∀x (Person(x) ∧ ¬LiveAtHomeRegularly(x) → ¬StrongBondsWithFamily(x))", "∀x (SpendsA LotOfTimeWithSiblings(x) ∧ PlaysWithSiblings(x) → DidNotLiveAtHomeRegularly(x))", "∀x (Luke(x) → ((Twin(x) ∨ Triplet(x)) ∧ StrongBonds(x, FamilyMembers)))"], "conclusion-FOL": "∀x ∀y ∀z (Luke(x) ∧ Sibling(y) ∧ Sibling(z) → (SpendsTimeHangingOut(x, y) ∧ SpendsTimePlaying(x, z)))"}
{"premises-FOL": ["∀x (Person(x) ∧ (Twin(x) ∨ Triplet(x)) → SpendsTimeWithSiblings(x))", "∀x∀y (Person(x) ∧ Person(y) ∧ Siblings(x, y) ∧ SameAge(x, y) → (Twins(x, y) ∨ Triplets(x, y)))", "∀x (PeopleComplainAboutAnnoyingSiblings(x) → SameAgeSiblings(x))", "∀x (Person(x) ∧ ¬LiveAtHomeRegularly(x) → ¬StrongBondsWithFamily(x))", "∀x (SpendsA LotOfTimeWithSiblings(x) ∧ PlaysWithSiblings(x) → DidNotLiveAtHomeRegularly(x))", "∀x (Luke(x) → ((Twin(x) ∨ Triplet(x)) ∧ StrongBonds(x, FamilyMembers)))"], "conclusion-FOL": "∀x (Luke(x) ∧ AnnoyingSiblings(x) → ComplainsOften(x))"}
{"premises-FOL": ["∀x (Person(x) ∧ (Twin(x) ∨ Triplet(x)) → SpendsTimeWithSiblings(x))", "∀x∀y (Person(x) ∧ Person(y) ∧ Siblings(x, y) ∧ SameAge(x, y) → (Twins(x, y) ∨ Triplets(x, y)))", "∀x (PeopleComplainAboutAnnoyingSiblings(x) → SameAgeSiblings(x))", "∀x (Person(x) ∧ ¬LiveAtHomeRegularly(x) → ¬StrongBondsWithFamily(x))", "∀x (SpendsA LotOfTimeWithSiblings(x) ∧ PlaysWithSiblings(x) → DidNotLiveAtHomeRegularly(x))", "∀x (Luke(x) → ((Twin(x) ∨ Triplet(x)) ∧ StrongBonds(x, FamilyMembers)))"], "conclusion-FOL": "¬(Twin(luke) ∨ Triplet(luke) ∨ ComplainsAboutAnnoyingSiblings(luke))"}
{"premises-FOL": ["Cost(GRETest, 205)", "∀x (GREApplicant(x) ∧ ProvesEconomicHardship(x) → ReceivesFinancialAid(x))", "∀x (EconomicHardship(x) ↔ (DifficultyCausedByLackOfMoney(x) ∨ DifficultyCausedByLackOfResources(x)))", "∃x (Person(x) ∧ SingleParentFamily(x))", "∃x (Father(x) ∧ OutOfWork(x) ∧ MoreThanYear(x))"], "conclusion-FOL": "∀x (Student(x) ∧ AppliesForFinancialAid(x, ETS) → CanTakeGRE(x))"}
{"premises-FOL": ["Cost(GRETest, 205)", "∀x (GREApplicant(x) ∧ ProvesEconomicHardship(x) → ReceivesFinancialAid(x))", "∀x (EconomicHardship(x) ↔ (DifficultyCausedByLackOfMoney(x) ∨ DifficultyCausedByLackOfResources(x)))", "∃x (Person(x) ∧ SingleParentFamily(x))", "∃x (Father(x) ∧ OutOfWork(x) ∧ MoreThanYear(x))"], "conclusion-FOL": "Cost(GRETest, BelowUS300)"}
{"premises-FOL": ["Cost(GRETest, 205)", "∀x (GREApplicant(x) ∧ ProvesEconomicHardship(x) → ReceivesFinancialAid(x))", "∀x (EconomicHardship(x) ↔ (DifficultyCausedByLackOfMoney(x) ∨ DifficultyCausedByLackOfResources(x)))", "∃x (Person(x) ∧ SingleParentFamily(x))", "∃x (Father(x) ∧ OutOfWork(x) ∧ MoreThanYear(x))"], "conclusion-FOL": "¬∃x (FinancialAid(x) ∧ AvailableFor(x, GRE))"}
{"premises-FOL": ["∀x (People(x) ∧ SpillFoodOnClothing(x) → (¬TidySpacesConsistently(x) ∧ EnjoyCleaningProcess(x)))", "∀x (Foodie(x) ∧ GoesOutFrequently(x) ∧ FindsNewFoodRestaurants(x) → SpillsFoodOnClothing(x))", "∀x (OnlyChildWithoutSiblings(x) → (TidySpacesConsistently(x) ∧ EnjoyCleaningProcess(x)))", "∀x∀y (Person(x) ∧ Parent(y, x) ∧ VeryBusyWithRegularJob(y) → OnlyChildWithoutSiblings(x))", "∀x (Household(x) ∧ HighNetIncome(x) → (∃y (Parent(y) ∧ VeryBusyWithRegularJob(y))))", "∀x (Person(x) ∧ SpillsFoodOnClothing(x) ∧ GrewUpAsOnlyChild(x) → (WithNoSiblings(x) ∨ ¬WithNoSiblings(x)))"], "conclusion-FOL": "∀x (Person(x) ∧ TidiesSpace(x) ∧ CleaningProcess(x) → EnjoysProcess(x))"}
{"premises-FOL": ["∀x (People(x) ∧ SpillFoodOnClothing(x) → (¬TidySpacesConsistently(x) ∧ EnjoyCleaningProcess(x)))", "∀x (Foodie(x) ∧ GoesOutFrequently(x) ∧ FindsNewFoodRestaurants(x) → SpillsFoodOnClothing(x))", "∀x (OnlyChildWithoutSiblings(x) → (TidySpacesConsistently(x) ∧ EnjoyCleaningProcess(x)))", "∀x∀y (Person(x) ∧ Parent(y, x) ∧ VeryBusyWithRegularJob(y) → OnlyChildWithoutSiblings(x))", "∀x (Household(x) ∧ HighNetIncome(x) → (∃y (Parent(y) ∧ VeryBusyWithRegularJob(y))))", "∀x (Person(x) ∧ SpillsFoodOnClothing(x) ∧ GrewUpAsOnlyChild(x) → (WithNoSiblings(x) ∨ ¬WithNoSiblings(x)))"], "conclusion-FOL": "∀x (Person(x) ∧ (Foodie(x) ∧ GoesOutFrequently(x) ∧ FindsNewFoodRestaurants(x)) ∨ (HighNetIncome(x) ∧ Household(x)))"}
{"premises-FOL": ["∀x (People(x) ∧ SpillFoodOnClothing(x) → (¬TidySpacesConsistently(x) ∧ EnjoyCleaningProcess(x)))", "∀x (Foodie(x) ∧ GoesOutFrequently(x) ∧ FindsNewFoodRestaurants(x) → SpillsFoodOnClothing(x))", "∀x (OnlyChildWithoutSiblings(x) → (TidySpacesConsistently(x) ∧ EnjoyCleaningProcess(x)))", "∀x∀y (Person(x) ∧ Parent(y, x) ∧ VeryBusyWithRegularJob(y) → OnlyChildWithoutSiblings(x))", "∀x (Household(x) ∧ HighNetIncome(x) → (∃y (Parent(y) ∧ VeryBusyWithRegularJob(y))))", "∀x (Person(x) ∧ SpillsFoodOnClothing(x) ∧ GrewUpAsOnlyChild(x) → (WithNoSiblings(x) ∨ ¬WithNoSiblings(x)))"], "conclusion-FOL": "∀x (Peter(x) → ((FoodieWhoGoesOutFrequently(x) ∧ FindsNewFoodRestaurants(x) ∧ BelongsToHighNetIncomeHousehold(x)) ∨ (FoodieWhoGoesOutFrequently(x) ∧ ¬FindsNewFoodRestaurants(x) ∧ ¬BelongsToHighNetIncomeHousehold(x))))"}
{"premises-FOL": ["∀x (FirTree(x) → Evergreen(x))", "∃x (Worship(x) ∧ FirTree(x))"], "conclusion-FOL": "∃x (Evergreen(x) ∧ ¬ObjectOfWorship(x))"}
{"premises-FOL": ["MountainRange(picurisMountains, NewMexico, Texas)", "∀x ∀y (JuanDeOnate(x) ∧ PicurisMountains(y) → Visited(x, y))", "Donated(HardingPegmatiteMine)", "¬∃x ∃y ∃z (MountainRange(x) ∧ Mine(y) ∧ Donated(z) ∧ LocatedIn(y, x) ∧ DonatedBy(z, x))"], "conclusion-FOL": "∀x∀y (JuanDeOnate(x) ∧ MountainRange(y) ∧ Visits(x, y) ∧ InNewMexico(y))"}
{"premises-FOL": ["MountainRange(picurisMountains, NewMexico, Texas)", "∀x ∀y (JuanDeOnate(x) ∧ PicurisMountains(y) → Visited(x, y))", "Donated(HardingPegmatiteMine)", "¬∃x ∃y ∃z (MountainRange(x) ∧ Mine(y) ∧ Donated(z) ∧ LocatedIn(y, x) ∧ DonatedBy(z, x))"], "conclusion-FOL": "∀x∀y (JuanDeOnate(x) ∧ MountainRange(y) → Visited(x, y))"}
{"premises-FOL": ["MountainRange(picurisMountains, NewMexico, Texas)", "∀x ∀y (JuanDeOnate(x) ∧ PicurisMountains(y) → Visited(x, y))", "Donated(HardingPegmatiteMine)", "¬∃x ∃y ∃z (MountainRange(x) ∧ Mine(y) ∧ Donated(z) ∧ LocatedIn(y, x) ∧ DonatedBy(z, x))"], "conclusion-FOL": "¬(HardingPegmatiteMine(x) ∧ InMountainRange(x, NewMexico))"}
{"premises-FOL": ["∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → BlockShooting(x, y))", "∀x (Man(x) ∧ TallerThanClassmates(x))", "∀x ∀y ∀z (Person(x) ∧ Person(y) ∧ Person(z) ∧ Taller(x, y) ∧ Taller(y, z) → Taller(x, z))", "Man(Peter) ∧ TallerThan(Peter, Michael)", "∀x∀y (Person(x) ∧ Person(y) ∧ BlocksShooting(x, y) ∧ ¬JumpsWhenShooting(y) → CanBlockShooting(x, y))", "∀x ∀y (Michael(x) ∧ Windy(y) → ¬BlockShooting(x, y))", "∀x (Shooter(x) ∧ CanJumpWhenShooting(x) → GreatShooter(x))"], "conclusion-FOL": "Shorter(Peter, MichaelClassMan)"}
{"premises-FOL": ["∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → BlockShooting(x, y))", "∀x (Man(x) ∧ TallerThanClassmates(x))", "∀x ∀y ∀z (Person(x) ∧ Person(y) ∧ Person(z) ∧ Taller(x, y) ∧ Taller(y, z) → Taller(x, z))", "Man(Peter) ∧ TallerThan(Peter, Michael)", "∀x∀y (Person(x) ∧ Person(y) ∧ BlocksShooting(x, y) ∧ ¬JumpsWhenShooting(y) → CanBlockShooting(x, y))", "∀x ∀y (Michael(x) ∧ Windy(y) → ¬BlockShooting(x, y))", "∀x (Shooter(x) ∧ CanJumpWhenShooting(x) → GreatShooter(x))"], "conclusion-FOL": "∀x (Windy(x) → GreatShooter(x))"}
{"premises-FOL": ["∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → BlockShooting(x, y))", "∀x (Man(x) ∧ TallerThanClassmates(x))", "∀x ∀y ∀z (Person(x) ∧ Person(y) ∧ Person(z) ∧ Taller(x, y) ∧ Taller(y, z) → Taller(x, z))", "Man(Peter) ∧ TallerThan(Peter, Michael)", "∀x∀y (Person(x) ∧ Person(y) ∧ BlocksShooting(x, y) ∧ ¬JumpsWhenShooting(y) → CanBlockShooting(x, y))", "∀x ∀y (Michael(x) ∧ Windy(y) → ¬BlockShooting(x, y))", "∀x (Shooter(x) ∧ CanJumpWhenShooting(x) → GreatShooter(x))"], "conclusion-FOL": "∀x ∀y (Peter(x) ∧ Windy(y) → CanBlockShooting(x, y))"}
{"premises-FOL": ["BarutinCove(barutinCove) ∧ BulgarianSettlement(barutin) ∧ NamedAfter(cove, barutin)", "∀x (BarutinCove(x) → OnSouthwestCoastOfSnowIsland(x))", "∀x∀y∀z (SouthShetlandIslands(x) ∧ SnowIsland(y) ∧ GreenwichIsland(z) ∧ DeceptionIsland(x) → (Includes(x, y) ∧ Includes(x, z)))", "PartOf(SouthShetlandIslands, Antarctica)", "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"], "conclusion-FOL": "∀x (Barutin(x) → (NamedAfter(x, IslandsInAntarctica)))"}
{"premises-FOL": ["BarutinCove(barutinCove) ∧ BulgarianSettlement(barutin) ∧ NamedAfter(cove, barutin)", "∀x (BarutinCove(x) → OnSouthwestCoastOfSnowIsland(x))", "∀x∀y∀z (SouthShetlandIslands(x) ∧ SnowIsland(y) ∧ GreenwichIsland(z) ∧ DeceptionIsland(x) → (Includes(x, y) ∧ Includes(x, z)))", "PartOf(SouthShetlandIslands, Antarctica)", "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"], "conclusion-FOL": "∃x (Cove(x) ∧ NamedAfterPlaceInBulgaria(x))"}
{"premises-FOL": ["BarutinCove(barutinCove) ∧ BulgarianSettlement(barutin) ∧ NamedAfter(cove, barutin)", "∀x (BarutinCove(x) → OnSouthwestCoastOfSnowIsland(x))", "∀x∀y∀z (SouthShetlandIslands(x) ∧ SnowIsland(y) ∧ GreenwichIsland(z) ∧ DeceptionIsland(x) → (Includes(x, y) ∧ Includes(x, z)))", "PartOf(SouthShetlandIslands, Antarctica)", "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"], "conclusion-FOL": "¬(BarutinInAntarctica(x))"}
{"premises-FOL": ["∃x (Affection(x) ∧ Love(x))", "∃x (Love(x) ∧ Positive(x))"], "conclusion-FOL": "∃x (Affection(x) ∧ Positive(x))"}
{"premises-FOL": ["∀x (CanTransportMultiplePassengers(x) → ¬Empty(x))", "∀x (Airline(x) → CanTransportMultiplePassengers(x))", "∀x (Plane(x) → Empty(x))", "∀x (Boeing707(x) → Plane(x))", "¬(GreyhoundAirline → (∃x (GreyhoundPlane(x))))"], "conclusion-FOL": "∀x (Greyhound(x) → Airline(x))"}
{"premises-FOL": ["∀x (CanTransportMultiplePassengers(x) → ¬Empty(x))", "∀x (Airline(x) → CanTransportMultiplePassengers(x))", "∀x (Plane(x) → Empty(x))", "∀x (Boeing707(x) → Plane(x))", "¬(GreyhoundAirline → (∃x (GreyhoundPlane(x))))"], "conclusion-FOL": "∀x (Greyhound(x) → Boeing707(x))"}
{"premises-FOL": ["∀x (CanTransportMultiplePassengers(x) → ¬Empty(x))", "∀x (Airline(x) → CanTransportMultiplePassengers(x))", "∀x (Plane(x) → Empty(x))", "∀x (Boeing707(x) → Plane(x))", "¬(GreyhoundAirline → (∃x (GreyhoundPlane(x))))"], "conclusion-FOL": "¬(Greyhound(x) ∧ Boeing707(x))"}
{"premises-FOL": ["∀x (Mammal(x) → Animal(x))", "∀x (Monkey(x) → Mammal(x))", "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))", "∀x (Bird(x) → Fly(x))", "∀x (Animal(x) → Breathes(x))", "∀x (CanFly(x) → HasWings(x))", "∀x (Rock(x) ∧ ¬(Fly(x) ∨ Bird(x)) → ¬(Flies(x) ∨ Breathes(x)))"], "conclusion-FOL": "∀x (Rock(x) → Monkey(x))"}
{"premises-FOL": ["∀x (Mammal(x) → Animal(x))", "∀x (Monkey(x) → Mammal(x))", "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))", "∀x (Bird(x) → Fly(x))", "∀x (Animal(x) → Breathes(x))", "∀x (CanFly(x) → HasWings(x))", "∀x (Rock(x) ∧ ¬(Fly(x) ∨ Bird(x)) → ¬(Flies(x) ∨ Breathes(x)))"], "conclusion-FOL": "∀x (Rock(x) → HasWings(x))"}
{"premises-FOL": ["∀x (Mammal(x) → Animal(x))", "∀x (Monkey(x) → Mammal(x))", "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))", "∀x (Bird(x) → Fly(x))", "∀x (Animal(x) → Breathes(x))", "∀x (CanFly(x) → HasWings(x))", "∀x (Rock(x) ∧ ¬(Fly(x) ∨ Bird(x)) → ¬(Flies(x) ∨ Breathes(x)))"], "conclusion-FOL": "∀x (Rock(x) → ¬HasWings(x))"}
{"premises-FOL": ["∀x (HasWedding(x) → ∃y (Child(y) ∧ HasChild(x, y)))", "∀x (TravelsToParisForHoneymoon(x) → HasWedding(x))", "∀x (Wedding(x) ∧ OccursInJuly(x) → TravelsToParisForHoneymoon(x))", "∃x (Wedding(x) ∧ Month(x, July) ∧ WellAttended(x))", "∀x (Person(x) ∧ HasAtLeastOneChild(x) → (¬TravelsToParisForHoneymoon(x) ∧ ¬HasWedding(x)))", "∀x (Wedding(x) ∧ WellAttended(x) → (WeddingInJuly(x) ∨ TravelsToParisForHoneymoon(x)))"], "conclusion-FOL": "∃x (Person(x) ∧ Wedding(x) ∧ WellAttended(x))"}
{"premises-FOL": ["∀x (HasWedding(x) → ∃y (Child(y) ∧ HasChild(x, y)))", "∀x (TravelsToParisForHoneymoon(x) → HasWedding(x))", "∀x (Wedding(x) ∧ OccursInJuly(x) → TravelsToParisForHoneymoon(x))", "∃x (Wedding(x) ∧ Month(x, July) ∧ WellAttended(x))", "∀x (Person(x) ∧ HasAtLeastOneChild(x) → (¬TravelsToParisForHoneymoon(x) ∧ ¬HasWedding(x)))", "∀x (Wedding(x) ∧ WellAttended(x) → (WeddingInJuly(x) ∨ TravelsToParisForHoneymoon(x)))"], "conclusion-FOL": "¬∃x (Wedding(x) ∧ WellAttended(x) ∧ HasJohn(x))"}
{"premises-FOL": ["∀x (HasWedding(x) → ∃y (Child(y) ∧ HasChild(x, y)))", "∀x (TravelsToParisForHoneymoon(x) → HasWedding(x))", "∀x (Wedding(x) ∧ OccursInJuly(x) → TravelsToParisForHoneymoon(x))", "∃x (Wedding(x) ∧ Month(x, July) ∧ WellAttended(x))", "∀x (Person(x) ∧ HasAtLeastOneChild(x) → (¬TravelsToParisForHoneymoon(x) ∧ ¬HasWedding(x)))", "∀x (Wedding(x) ∧ WellAttended(x) → (WeddingInJuly(x) ∨ TravelsToParisForHoneymoon(x)))"], "conclusion-FOL": "∃x (Person(x) ∧ Child(x))"}
{"premises-FOL": ["∀x (HasWedding(x) → ∃y (Child(y) ∧ HasChild(x, y)))", "∀x (TravelsToParisForHoneymoon(x) → HasWedding(x))", "∀x (Wedding(x) ∧ OccursInJuly(x) → TravelsToParisForHoneymoon(x))", "∃x (Wedding(x) ∧ Month(x, July) ∧ WellAttended(x))", "∀x (Person(x) ∧ HasAtLeastOneChild(x) → (¬TravelsToParisForHoneymoon(x) ∧ ¬HasWedding(x)))", "∀x (Wedding(x) ∧ WellAttended(x) → (WeddingInJuly(x) ∨ TravelsToParisForHoneymoon(x)))"], "conclusion-FOL": "¬(WeddingWellAttended(john) ∨ HoneymoonInParis(john))"}
{"premises-FOL": ["∃x (Mammal(x) ∧ HasTeeth(x))", "∀x (Platypus(x) → ¬HasTeeth(x))", "∀x (Platypus(x) → Mammal(x))", "∀x (Human(x) → HasTeeth(x))"], "conclusion-FOL": "∀x (Platypus(x) → (Mammal(x) ∧ ¬HasTeeth(x)))"}
{"premises-FOL": ["∃x (Mammal(x) ∧ HasTeeth(x))", "∀x (Platypus(x) → ¬HasTeeth(x))", "∀x (Platypus(x) → Mammal(x))", "∀x (Human(x) → HasTeeth(x))"], "conclusion-FOL": "∀x (Platypus(x) → Reptile(x))"}
{"premises-FOL": ["∃x (Mammal(x) ∧ HasTeeth(x))", "∀x (Platypus(x) → ¬HasTeeth(x))", "∀x (Platypus(x) → Mammal(x))", "∀x (Human(x) → HasTeeth(x))"], "conclusion-FOL": "∀x (Human(x) → Mammal(x))"}
{"premises-FOL": ["∀x (Plunger(x) → Sucks(x))", "∀x (Vacuum(x) → Sucks(x))", "∀x (Vampire(x) → Sucks(x))", "∀x (Space(x) → Vacuum(x))", "∀x (Duster(x) → ¬Sucks(x))"], "conclusion-FOL": "∀x (Space(x) → Sucks(x))"}
{"premises-FOL": ["∀x (Plunger(x) → Sucks(x))", "∀x (Vacuum(x) → Sucks(x))", "∀x (Vampire(x) → Sucks(x))", "∀x (Space(x) → Vacuum(x))", "∀x (Duster(x) → ¬Sucks(x))"], "conclusion-FOL": "∀x (Space(x) → Vampire(x))"}
{"premises-FOL": ["∀x (Plunger(x) → Sucks(x))", "∀x (Vacuum(x) → Sucks(x))", "∀x (Vampire(x) → Sucks(x))", "∀x (Space(x) → Vacuum(x))", "∀x (Duster(x) → ¬Sucks(x))"], "conclusion-FOL": "∀x (HouseholdAppliance(x) → Sucks(x))"}
{"premises-FOL": ["∀x (MachineLearningAlgorithm(x) → (SupervisedLearning(x) ∨ UnsupervisedLearning(x) ∨ ReinforcementLearning(x)))", "∀x (UnsupervisedLearning(x) → ¬RequiresLabelledData(x))", "∀x (StateOfTheArtTextSummarizationModel(x) → TrainedWithMachineLearningAlgorithms(x))", "¬(ReinforcementLearning(r) ∧ Train(r, sotasum))", "∀x (MachineLearningAlgorithm(x) ∧ TextSummarizationModel(y) ∧ RequiresLabelledData(x, y) → Trains(x, y))"], "conclusion-FOL": "∀x (SupervisedLearning(x) → TrainStateOfTheArtTextSummarizationModel(x))"}
{"premises-FOL": ["∀x (MachineLearningAlgorithm(x) → (SupervisedLearning(x) ∨ UnsupervisedLearning(x) ∨ ReinforcementLearning(x)))", "∀x (UnsupervisedLearning(x) → ¬RequiresLabelledData(x))", "∀x (StateOfTheArtTextSummarizationModel(x) → TrainedWithMachineLearningAlgorithms(x))", "¬(ReinforcementLearning(r) ∧ Train(r, sotasum))", "∀x (MachineLearningAlgorithm(x) ∧ TextSummarizationModel(y) ∧ RequiresLabelledData(x, y) → Trains(x, y))"], "conclusion-FOL": "∀x (UnsupervisedLearning(x) → TrainStateOfTheArtTextSummarizationModel(x))"}
{"premises-FOL": ["∀x (CartoonCharacter(x) ∧ Funny(x) → Popular(x))", "∀x (Ugly(x) → ¬Popular(x))", "∀x (CartoonCharacter(x) ∧ LovedByChildren(x) → Funny(x))", "∀x (CartoonCharacter(x) ∧ FromSimpsons(x) → LovedByChildren(x))", "∀x (CartoonCharacter(x) ∧ Yellow(x) → FromSimpsons(x))", "∀x (Ben(x) → (FromSimpsons(x) ∨ Funny(x)))"], "conclusion-FOL": "∃x (Child(x) ∧ LovedBy(Ben, x))"}
{"premises-FOL": ["∀x (CartoonCharacter(x) ∧ Funny(x) → Popular(x))", "∀x (Ugly(x) → ¬Popular(x))", "∀x (CartoonCharacter(x) ∧ LovedByChildren(x) → Funny(x))", "∀x (CartoonCharacter(x) ∧ FromSimpsons(x) → LovedByChildren(x))", "∀x (CartoonCharacter(x) ∧ Yellow(x) → FromSimpsons(x))", "∀x (Ben(x) → (FromSimpsons(x) ∨ Funny(x)))"], "conclusion-FOL": "Ugly(Ben) ⊕ Yellow(Ben)"}
{"premises-FOL": ["∀x (CartoonCharacter(x) ∧ Funny(x) → Popular(x))", "∀x (Ugly(x) → ¬Popular(x))", "∀x (CartoonCharacter(x) ∧ LovedByChildren(x) → Funny(x))", "∀x (CartoonCharacter(x) ∧ FromSimpsons(x) → LovedByChildren(x))", "∀x (CartoonCharacter(x) ∧ Yellow(x) → FromSimpsons(x))", "∀x (Ben(x) → (FromSimpsons(x) ∨ Funny(x)))"], "conclusion-FOL": "∀x (Ben(x) → (Yellow(x) ∧ Ugly(x) ∨ (¬Yellow(x) ∧ ¬Ugly(x))))"}
{"premises-FOL": ["∀x∀y (DomesticAnimal(x) ∧ BreedingBack(y) → (DeliberateSelectiveBreeding(y) ∧ DomesticAnimal(x)))", "∀x (Cattle(x) ∧ BredBackIn1920s(x) ∧ ResemblesAurochs(x))", "∀x (Cattle(x) ∧ Heck(x) → Animal(x))", "∀x (Auroch(x) → Animal(x))", "∃x (Animal(x) ∧ BredBack(x) ∧ ResemblesExtinctAnimal(x))"], "conclusion-FOL": "∃x (HeckCattle(x) ∧ ArtificiallySelected(x))"}
{"premises-FOL": ["∀x∀y (DomesticAnimal(x) ∧ BreedingBack(y) → (DeliberateSelectiveBreeding(y) ∧ DomesticAnimal(x)))", "∀x (Cattle(x) ∧ BredBackIn1920s(x) ∧ ResemblesAurochs(x))", "∀x (Cattle(x) ∧ Heck(x) → Animal(x))", "∀x (Auroch(x) → Animal(x))", "∃x (Animal(x) ∧ BredBack(x) ∧ ResemblesExtinctAnimal(x))"], "conclusion-FOL": "∀x (Auroch(x) → Extinct(x))"}
{"premises-FOL": ["∀x (Student(x) → Human(x))", "∀x (Studies(x) → Student(x))", "∀x (Person(x) → (Studies(x) ⊕ Teaches(x)))", "∀x (YoungPerson(x) → ¬Teaches(x))", "¬(Teaches(jerry) ∨ Manager(jerry))", "∃x (Rose(x) ∧ (Young(x) ∨ Student(x)))"], "conclusion-FOL": "Y(Jerry) ↔ Young(Jerry)"}
{"premises-FOL": ["∀x (Student(x) → Human(x))", "∀x (Studies(x) → Student(x))", "∀x (Person(x) → (Studies(x) ⊕ Teaches(x)))", "∀x (YoungPerson(x) → ¬Teaches(x))", "¬(Teaches(jerry) ∨ Manager(jerry))", "∃x (Rose(x) ∧ (Young(x) ∨ Student(x)))"], "conclusion-FOL": "¬(Young(jerry))"}
{"premises-FOL": ["∀x (Student(x) → Human(x))", "∀x (Studies(x) → Student(x))", "∀x (Person(x) → (Studies(x) ⊕ Teaches(x)))", "∀x (YoungPerson(x) → ¬Teaches(x))", "¬(Teaches(jerry) ∨ Manager(jerry))", "∃x (Rose(x) ∧ (Young(x) ∨ Student(x)))"], "conclusion-FOL": "∀x (Rose(x) → (Human(x) ∨ Manager(x)))"}
{"premises-FOL": ["∀x (Student(x) → Human(x))", "∀x (Studies(x) → Student(x))", "∀x (Person(x) → (Studies(x) ⊕ Teaches(x)))", "∀x (YoungPerson(x) → ¬Teaches(x))", "¬(Teaches(jerry) ∨ Manager(jerry))", "∃x (Rose(x) ∧ (Young(x) ∨ Student(x)))"], "conclusion-FOL": "(Human(Rose) ∨ Manager(Jerry))"}
{"premises-FOL": ["∀x (Student(x) → Human(x))", "∀x (Studies(x) → Student(x))", "∀x (Person(x) → (Studies(x) ⊕ Teaches(x)))", "∀x (YoungPerson(x) → ¬Teaches(x))", "¬(Teaches(jerry) ∨ Manager(jerry))", "∃x (Rose(x) ∧ (Young(x) ∨ Student(x)))"], "conclusion-FOL": "¬(Student(Rose) ∧ Human(Jerry))"}
{"premises-FOL": ["∀x (PublishingHouse(x) ∧ TranslatesForeignLiterature(x) ∧ English(x) → NewVesselPress(x))", "∀x (PublishedBook(x) ∧ FromNewVesselPress(x) → InEnglish(x))", "Book(neapolitan_chronicles) ∧ PublishedBy(neapolitan_chronicles, new_vessel_press)", "TranslatedFrom(NeapolitanChronicles, Italian)", "PalaceOfFlies(book) ∧ NewVesselPress(publisher) ∧ Published(book, publisher)"], "conclusion-FOL": "Book(neapolitanChronicles)"}
{"premises-FOL": ["∀x (PublishingHouse(x) ∧ TranslatesForeignLiterature(x) ∧ English(x) → NewVesselPress(x))", "∀x (PublishedBook(x) ∧ FromNewVesselPress(x) → InEnglish(x))", "Book(neapolitan_chronicles) ∧ PublishedBy(neapolitan_chronicles, new_vessel_press)", "TranslatedFrom(NeapolitanChronicles, Italian)", "PalaceOfFlies(book) ∧ NewVesselPress(publisher) ∧ Published(book, publisher)"], "conclusion-FOL": "PublishedBy(harrypotter, newvesselpress)"}
{"premises-FOL": ["∀x (PublishingHouse(x) ∧ TranslatesForeignLiterature(x) ∧ English(x) → NewVesselPress(x))", "∀x (PublishedBook(x) ∧ FromNewVesselPress(x) → InEnglish(x))", "Book(neapolitan_chronicles) ∧ PublishedBy(neapolitan_chronicles, new_vessel_press)", "TranslatedFrom(NeapolitanChronicles, Italian)", "PalaceOfFlies(book) ∧ NewVesselPress(publisher) ∧ Published(book, publisher)"], "conclusion-FOL": "TranslatedFromItalian(PalaceOfFlies) → 1"}
{"premises-FOL": ["∀x (OwnsLargeDesktopMonitor(x) → (WorksRegularlyAtHome(x) ∧ WorksOftenAtHome(x)))", "∀x (Person(x) ∧ FullyStockedHomeOffice(x) ∧ ImpressiveHomeOffice(x) → OwnsLargeDesktopMonitor(x))", "∀x (Person(x) ∧ WorksRegularlyAndOftenAtHome(x) → SpendsFreeTimeTidyingAndOrganizing(x))", "∀x (Person(x) ∧ WorksRegularlyAndOftenAtHome(x) → VisitsOfficeSupplyStoreRegularly(x))", "∀x (SpendsFreeTimeTidyingAndOrganizingHome(x) → (¬GoesToBedLate(x) ∧ ¬WakesUpEveryDayAfterNoon(x)))", "∀x (Remy(x) → ((BedsLate(x) ∧ WakesUpAfterNoon(x) ∧ SpendsFreeTimeTidyingAndOrganizing(x)) ∨ (¬BedsLate(x) ∧ WakesUpEveryDayAfterNoon(x) ∧ ¬SpendsFreeTimeTidyingAndOrganizing(x))))"], "conclusion-FOL": "∃x (Visits(Remy, OfficeSupplyStore) ∧ Regularly(x))"}
{"premises-FOL": ["∀x (OwnsLargeDesktopMonitor(x) → (WorksRegularlyAtHome(x) ∧ WorksOftenAtHome(x)))", "∀x (Person(x) ∧ FullyStockedHomeOffice(x) ∧ ImpressiveHomeOffice(x) → OwnsLargeDesktopMonitor(x))", "∀x (Person(x) ∧ WorksRegularlyAndOftenAtHome(x) → SpendsFreeTimeTidyingAndOrganizing(x))", "∀x (Person(x) ∧ WorksRegularlyAndOftenAtHome(x) → VisitsOfficeSupplyStoreRegularly(x))", "∀x (SpendsFreeTimeTidyingAndOrganizingHome(x) → (¬GoesToBedLate(x) ∧ ¬WakesUpEveryDayAfterNoon(x)))", "∀x (Remy(x) → ((BedsLate(x) ∧ WakesUpAfterNoon(x) ∧ SpendsFreeTimeTidyingAndOrganizing(x)) ∨ (¬BedsLate(x) ∧ WakesUpEveryDayAfterNoon(x) ∧ ¬SpendsFreeTimeTidyingAndOrganizing(x))))"], "conclusion-FOL": "∀x (Remy(x) → (HasFullyStockedHomeOffice(x) ∧ ImpressiveHomeOffice(x) ∧ VisitsOfficeSupplyStore(x)))"}
{"premises-FOL": ["∀x (OwnsLargeDesktopMonitor(x) → (WorksRegularlyAtHome(x) ∧ WorksOftenAtHome(x)))", "∀x (Person(x) ∧ FullyStockedHomeOffice(x) ∧ ImpressiveHomeOffice(x) → OwnsLargeDesktopMonitor(x))", "∀x (Person(x) ∧ WorksRegularlyAndOftenAtHome(x) → SpendsFreeTimeTidyingAndOrganizing(x))", "∀x (Person(x) ∧ WorksRegularlyAndOftenAtHome(x) → VisitsOfficeSupplyStoreRegularly(x))", "∀x (SpendsFreeTimeTidyingAndOrganizingHome(x) → (¬GoesToBedLate(x) ∧ ¬WakesUpEveryDayAfterNoon(x)))", "∀x (Remy(x) → ((BedsLate(x) ∧ WakesUpAfterNoon(x) ∧ SpendsFreeTimeTidyingAndOrganizing(x)) ∨ (¬BedsLate(x) ∧ WakesUpEveryDayAfterNoon(x) ∧ ¬SpendsFreeTimeTidyingAndOrganizing(x))))"], "conclusion-FOL": "∀x (Remy(x) ∧ (GoesToBedLate(x) ∧ WakesUpAfterNoon(x)) ∨ VisitsOfficeSupplyStore(x) → (¬(SpendsFreeTimeTidying(x) ∧ OrganizingSpaces(x)) ∧ ¬(FullyStockedHomeOffice(x))))"}
{"premises-FOL": ["∀x (Human(x) → Mortal(x))", "∀x (Greek(x) → Human(x))"], "conclusion-FOL": "∃x (Greek(x) ∧ Mortal(x))"}
{"premises-FOL": ["¬∃x (Student(x) ∧ WorksInLibrary(x) ∧ FromComputerScienceDepartment(x))", "∀x (Student(x) ∧ PartTimeJobOfferedByUniversity(x) → WorksInLibrary(x))", "∀x (Student(x) ∧ TakesDatabaseCourse(x) → FromComputerScienceDepartment(x))", "∀x (Student(x) ∧ InstructedBy(x, David) → TakingDatabaseCourse(x))", "∀x (Student(x) ∧ WorksInLab(x) → InstructedBy(x, David))", "∀x (Student(x) ∧ WorksInLab(x))", "¬(PartTimeJobOfferedByUniversity(jack) ∨ WorksInLab(jack))"], "conclusion-FOL": "∃x (Person(x) ∧ PartTimeJob(x) ∧ University(y) ∧ OffersJob(y, x))"}
{"premises-FOL": ["¬∃x (Student(x) ∧ WorksInLibrary(x) ∧ FromComputerScienceDepartment(x))", "∀x (Student(x) ∧ PartTimeJobOfferedByUniversity(x) → WorksInLibrary(x))", "∀x (Student(x) ∧ TakesDatabaseCourse(x) → FromComputerScienceDepartment(x))", "∀x (Student(x) ∧ InstructedBy(x, David) → TakingDatabaseCourse(x))", "∀x (Student(x) ∧ WorksInLab(x) → InstructedBy(x, David))", "∀x (Student(x) ∧ WorksInLab(x))", "¬(PartTimeJobOfferedByUniversity(jack) ∨ WorksInLab(jack))"], "conclusion-FOL": "¬∃x (PartTimeJob(x) ∧ University(y) ∧ James(z) ∧ JobOfferedBy(x, y, z))"}
{"premises-FOL": ["¬∃x (Student(x) ∧ WorksInLibrary(x) ∧ FromComputerScienceDepartment(x))", "∀x (Student(x) ∧ PartTimeJobOfferedByUniversity(x) → WorksInLibrary(x))", "∀x (Student(x) ∧ TakesDatabaseCourse(x) → FromComputerScienceDepartment(x))", "∀x (Student(x) ∧ InstructedBy(x, David) → TakingDatabaseCourse(x))", "∀x (Student(x) ∧ WorksInLab(x) → InstructedBy(x, David))", "∀x (Student(x) ∧ WorksInLab(x))", "¬(PartTimeJobOfferedByUniversity(jack) ∨ WorksInLab(jack))"], "conclusion-FOL": "∀x (Student(x) ∧ James(x) → (DatabaseCourse(x) ⊕ PartTimeJob(x)))"}
{"premises-FOL": ["¬∃x (Student(x) ∧ WorksInLibrary(x) ∧ FromComputerScienceDepartment(x))", "∀x (Student(x) ∧ PartTimeJobOfferedByUniversity(x) → WorksInLibrary(x))", "∀x (Student(x) ∧ TakesDatabaseCourse(x) → FromComputerScienceDepartment(x))", "∀x (Student(x) ∧ InstructedBy(x, David) → TakingDatabaseCourse(x))", "∀x (Student(x) ∧ WorksInLab(x) → InstructedBy(x, David))", "∀x (Student(x) ∧ WorksInLab(x))", "¬(PartTimeJobOfferedByUniversity(jack) ∨ WorksInLab(jack))"], "conclusion-FOL": "∀x ∀y (Jack(x) ∧ DatabaseCourse(y) → Takes(x, y))"}
{"premises-FOL": ["∀x (LikesMusic(x) → WantsToCompose(x))", "∀x (Program(x) ∧ Access(x, George) → CanCompose(x))", "∀x (Compose(x) ∧ CanCompose(x) ∧ WantsToCompose(x) → WillCompose(x))"], "conclusion-FOL": "∀x (LikesMusic(x) ∧ HasAccessToProgram(x) → Composes(x))"}
{"premises-FOL": ["∀x (LikesMusic(x) → WantsToCompose(x))", "∀x (Program(x) ∧ Access(x, George) → CanCompose(x))", "∀x (Compose(x) ∧ CanCompose(x) ∧ WantsToCompose(x) → WillCompose(x))"], "conclusion-FOL": "∀x (George(x) ∧ ¬Compose(x) → ¬Compose(x))"}
{"premises-FOL": ["∀x (Hawk(x) → ¬Land(x))", "∃x (Bird(x) ∧ Hawk(x))"], "conclusion-FOL": "∀x (Bird(x) → Lands(x))"}
{"premises-FOL": ["∃x (Monday(x) ∧ 8PM(x) ∧ RosesGivenOutOnTV(x))", "∀x (Rose(x) ∧ GivenOutOnTV(x) → OnBachelor(x))", "∀x (OnBachelor(x) → PortraysRealPeople(x))", "∀x (Show(x) ∧ PortraysRealPeople(x) → RealityTVShow(x))", "¬(RealityTVShow(BreakingBad))"], "conclusion-FOL": "Monday(8) → BreakingBad(8)"}
{"premises-FOL": ["∃x (Monday(x) ∧ 8PM(x) ∧ RosesGivenOutOnTV(x))", "∀x (Rose(x) ∧ GivenOutOnTV(x) → OnBachelor(x))", "∀x (OnBachelor(x) → PortraysRealPeople(x))", "∀x (Show(x) ∧ PortraysRealPeople(x) → RealityTVShow(x))", "¬(RealityTVShow(BreakingBad))"], "conclusion-FOL": "∀x∀y (BreakingBad(x) ∧ Rose(y) → (GivenOutOnMondayAt8PM(x, y)))"}
{"premises-FOL": ["∃x (Monday(x) ∧ 8PM(x) ∧ RosesGivenOutOnTV(x))", "∀x (Rose(x) ∧ GivenOutOnTV(x) → OnBachelor(x))", "∀x (OnBachelor(x) → PortraysRealPeople(x))", "∀x (Show(x) ∧ PortraysRealPeople(x) → RealityTVShow(x))", "¬(RealityTVShow(BreakingBad))"], "conclusion-FOL": "∀x (RosesGivenOutDuringBreakingBad(x) → OnMondayAt8PM(x))"}
{"premises-FOL": ["HeinrichScmidt(n) ∧ NaziGermanPolitician(n)", "∀x (HeinrichSchmidt(x) → (MemberOfPrussianStateParliament(x) ∧ MemberOfNaziReichstag(x)))"], "conclusion-FOL": "Either(German, HeinrichSchmidt) ⊕ Either(Russian, HeinrichSchmidt)"}
{"premises-FOL": ["HeinrichScmidt(n) ∧ NaziGermanPolitician(n)", "∀x (HeinrichSchmidt(x) → (MemberOfPrussianStateParliament(x) ∧ MemberOfNaziReichstag(x)))"], "conclusion-FOL": "∃x (NaziGermanPolitician(x) ∧ PartOfPrussianStateParliament(x) ∧ PartOfNaziReichstag(x))"}
{"premises-FOL": ["HeinrichScmidt(n) ∧ NaziGermanPolitician(n)", "∀x (HeinrichSchmidt(x) → (MemberOfPrussianStateParliament(x) ∧ MemberOfNaziReichstag(x)))"], "conclusion-FOL": "¬∃x (Politician(x) ∧ PartOfNaziReichstag(x))"}
{"premises-FOL": ["∀x (DeadlyDisease(x) → LowSurvivalRate(x))", "∀x (Cancer(x) ∧ Severe(x) → DeadlyDisease(x))", "∀x (BileDuctCancer(x) → SevereCancer(x))", "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))", "¬(∃x (Person(x) ∧ Flu(x) ∧ Mild(x) ∧ LowSurvivalRate(x)))", "∀x (ColorectalCancer(x) ∧ BileDuctCancer(x) ∧ LowSurvivalRate(x) → ¬BileDuctCancer(x))"], "conclusion-FOL": "∀x (ColorectalCancer(x) → SevereCancer(x))"}
{"premises-FOL": ["∀x (DeadlyDisease(x) → LowSurvivalRate(x))", "∀x (Cancer(x) ∧ Severe(x) → DeadlyDisease(x))", "∀x (BileDuctCancer(x) → SevereCancer(x))", "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))", "¬(∃x (Person(x) ∧ Flu(x) ∧ Mild(x) ∧ LowSurvivalRate(x)))", "∀x (ColorectalCancer(x) ∧ BileDuctCancer(x) ∧ LowSurvivalRate(x) → ¬BileDuctCancer(x))"], "conclusion-FOL": "∀x (ColorectalCancer(x) ∧ (BileDuctCancer(x) ∨ Cholangiocarcinoma(x)) → (BileDuctCancer(x) ∧ MildFlu(x)))"}
{"premises-FOL": ["∀x (DeadlyDisease(x) → LowSurvivalRate(x))", "∀x (Cancer(x) ∧ Severe(x) → DeadlyDisease(x))", "∀x (BileDuctCancer(x) → SevereCancer(x))", "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))", "¬(∃x (Person(x) ∧ Flu(x) ∧ Mild(x) ∧ LowSurvivalRate(x)))", "∀x (ColorectalCancer(x) ∧ BileDuctCancer(x) ∧ LowSurvivalRate(x) → ¬BileDuctCancer(x))"], "conclusion-FOL": "∀x (ColorectalCancer(x) ∧ ¬(MildFlu(x) ∧ Cholangiocarcinoma(x)) → (BileDuctCancer(x) ∨ Cholangiocarcinoma(x)))"}
{"premises-FOL": ["∀x (Person(x) ∧ EatsSaladsRegularly(x) → VeryConsciousAboutHealthAndEatingHabits(x))", "∀x (Person(x) ∧ GrewUpInHealthConsciousChildhoodHome(x) → EatsSaladsRegularly(x))", "∀x (Person(x) ∧ FulfillsNutritionalDailyIntakes(x) → GrewUpInHealthConsciousChildhoodHomes(x))", "∀x (GoodRelationshipWithParents(x) → FulfillsNutritionalDailyIntakes(x))", "∀x (GoodRelationshipWithParents(x) → ¬RegularEaterOfSalads(x))", "∀x (VisitsGymAtLeastOnceDay(x) → FulfillsDailyNutritionalIntakes(x))", "∀x (GrewUpInHealthConsciousChildhoodHome(x) ∧ GoodRelationshipWithParents(x) → (True(x) ∨ ¬(GrewUpInHealthConsciousChildhoodHome(x) ∧ GoodRelationshipWithParents(x))))"], "conclusion-FOL": "∀x (Taylor(x) → EatsSaladsRegularly(x))"}
{"premises-FOL": ["∀x (Person(x) ∧ EatsSaladsRegularly(x) → VeryConsciousAboutHealthAndEatingHabits(x))", "∀x (Person(x) ∧ GrewUpInHealthConsciousChildhoodHome(x) → EatsSaladsRegularly(x))", "∀x (Person(x) ∧ FulfillsNutritionalDailyIntakes(x) → GrewUpInHealthConsciousChildhoodHomes(x))", "∀x (GoodRelationshipWithParents(x) → FulfillsNutritionalDailyIntakes(x))", "∀x (GoodRelationshipWithParents(x) → ¬RegularEaterOfSalads(x))", "∀x (VisitsGymAtLeastOnceDay(x) → FulfillsDailyNutritionalIntakes(x))", "∀x (GrewUpInHealthConsciousChildhoodHome(x) ∧ GoodRelationshipWithParents(x) → (True(x) ∨ ¬(GrewUpInHealthConsciousChildhoodHome(x) ∧ GoodRelationshipWithParents(x))))"], "conclusion-FOL": "∃x (Taylor(x) ∧ VisitsGym(x, y) ∧ Day(y))"}
{"premises-FOL": ["∀x (Person(x) ∧ EatsSaladsRegularly(x) → VeryConsciousAboutHealthAndEatingHabits(x))", "∀x (Person(x) ∧ GrewUpInHealthConsciousChildhoodHome(x) → EatsSaladsRegularly(x))", "∀x (Person(x) ∧ FulfillsNutritionalDailyIntakes(x) → GrewUpInHealthConsciousChildhoodHomes(x))", "∀x (GoodRelationshipWithParents(x) → FulfillsNutritionalDailyIntakes(x))", "∀x (GoodRelationshipWithParents(x) → ¬RegularEaterOfSalads(x))", "∀x (VisitsGymAtLeastOnceDay(x) → FulfillsDailyNutritionalIntakes(x))", "∀x (GrewUpInHealthConsciousChildhoodHome(x) ∧ GoodRelationshipWithParents(x) → (True(x) ∨ ¬(GrewUpInHealthConsciousChildhoodHome(x) ∧ GoodRelationshipWithParents(x))))"], "conclusion-FOL": "¬(HealthConsciousChildhoodHome(taylor) ∨ GymVisit(taylor, 1))"}
{"premises-FOL": ["∀x (OlympicGames(x) → SportingEvent(x))", "LastOlympicGames(Tokyo)", "∀x (UnitedStates(x) ∧ WonMostMedals(x, Tokyo) → BestPerformance(x, Tokyo))"], "conclusion-FOL": "∀x (WorldChampionships(x) → SportingEvent(x))"}
{"premises-FOL": ["∀x (OlympicGames(x) → SportingEvent(x))", "LastOlympicGames(Tokyo)", "∀x (UnitedStates(x) ∧ WonMostMedals(x, Tokyo) → BestPerformance(x, Tokyo))"], "conclusion-FOL": "¬(OlympicGames(last) ∧ InTokyo(last))"}
{"premises-FOL": ["∀x (OlympicGames(x) → SportingEvent(x))", "LastOlympicGames(Tokyo)", "∀x (UnitedStates(x) ∧ WonMostMedals(x, Tokyo) → BestPerformance(x, Tokyo))"], "conclusion-FOL": "MostMedals(UnitedStates, LastOlympicGames)"}
{"premises-FOL": ["∀x (Horse(x) → HasHooves(x))", "∀x (Human(x) → ¬HasHooves(x))"], "conclusion-FOL": "∃x (Human(x) ∧ Horse(x))"}
{"premises-FOL": ["∀x ∀y (Susan(x) ∧ LGAAirport(y) → FliesTo(x, y))", "∀x∀y (Airport(x) ∧ Airport(y) → (Departure(x, y) ∧ Arrival(y, x) → ¬SameAirport(x, y)))", "∀x ∀y (John(x) ∧ LGAAirport(y) → FliesFrom(x, y))"], "conclusion-FOL": "∀x ∀y (Susan(x) ∧ LGAAirport(y) → FliesFrom(x, y))"}
{"premises-FOL": ["∀x ∀y (Susan(x) ∧ LGAAirport(y) → FliesTo(x, y))", "∀x∀y (Airport(x) ∧ Airport(y) → (Departure(x, y) ∧ Arrival(y, x) → ¬SameAirport(x, y)))", "∀x ∀y (John(x) ∧ LGAAirport(y) → FliesFrom(x, y))"], "conclusion-FOL": "∀x ∀y (John(x) ∧ LGAAirport(y) → FliesTo(x, y))"}
{"premises-FOL": ["¬(∃x (NiceToAnimals(x) ∧ MeanToAnimals(x)))", "∃x (Grumpy(x) ∧ MeanToAnimals(x))", "∀x (AnimalLover(x) → NiceToAnimals(x))", "∀x (OwnsPet(x) → LovesAnimals(x))", "∃x (PetOwner(x) ∧ Tom(x))"], "conclusion-FOL": "GrumpyPerson(tom)"}
{"premises-FOL": ["¬(∃x (NiceToAnimals(x) ∧ MeanToAnimals(x)))", "∃x (Grumpy(x) ∧ MeanToAnimals(x))", "∀x (AnimalLover(x) → NiceToAnimals(x))", "∀x (OwnsPet(x) → LovesAnimals(x))", "∃x (PetOwner(x) ∧ Tom(x))"], "conclusion-FOL": "¬(GrumpyPerson(tom) ∧ MeanToAnimals(tom))"}
{"premises-FOL": ["¬(∃x (NiceToAnimals(x) ∧ MeanToAnimals(x)))", "∃x (Grumpy(x) ∧ MeanToAnimals(x))", "∀x (AnimalLover(x) → NiceToAnimals(x))", "∀x (OwnsPet(x) → LovesAnimals(x))", "∃x (PetOwner(x) ∧ Tom(x))"], "conclusion-FOL": "∀x (Person(x) ∧ ¬Grumpy(x) ∧ ¬MeanToAnimals(x) → (¬Grumpy(x) ∧ ¬AnimalLover(x)))"}
{"premises-FOL": ["∀x (Podcast(x) → ¬Novel(x))", "∀x (BornInAmericanCity(x) → American(x))", "∀x (Book(x) ∧ Novel(x) ∧ WrittenByPerson(x) → NovelWriter(x))", "W(DaniShapiro) ∧ A(American) ∧ Writer(Shapiro)", "FamilyHistory(DaniShapiro)", "FamilyHistory(novel) ∧ WrittenIn(2003)", "∀x (DaniShapiro(x) ∧ Podcast(y) ∧ FamilySecrets(y) → Created(x, y))", "City(boston) ∧ American(boston)"], "conclusion-FOL": "∀x (DaniShapiro(x) → NovelWriter(x))"}
{"premises-FOL": ["∀x (Podcast(x) → ¬Novel(x))", "∀x (BornInAmericanCity(x) → American(x))", "∀x (Book(x) ∧ Novel(x) ∧ WrittenByPerson(x) → NovelWriter(x))", "W(DaniShapiro) ∧ A(American) ∧ Writer(Shapiro)", "FamilyHistory(DaniShapiro)", "FamilyHistory(novel) ∧ WrittenIn(2003)", "∀x (DaniShapiro(x) ∧ Podcast(y) ∧ FamilySecrets(y) → Created(x, y))", "City(boston) ∧ American(boston)"], "conclusion-FOL": "FamilySecrets(novel)"}
{"premises-FOL": ["∀x (Podcast(x) → ¬Novel(x))", "∀x (BornInAmericanCity(x) → American(x))", "∀x (Book(x) ∧ Novel(x) ∧ WrittenByPerson(x) → NovelWriter(x))", "W(DaniShapiro) ∧ A(American) ∧ Writer(Shapiro)", "FamilyHistory(DaniShapiro)", "FamilyHistory(novel) ∧ WrittenIn(2003)", "∀x (DaniShapiro(x) ∧ Podcast(y) ∧ FamilySecrets(y) → Created(x, y))", "City(boston) ∧ American(boston)"], "conclusion-FOL": "BornIn(DaniShapiro, Boston)"}
{"premises-FOL": ["∃x (BasketballPlayer(x) ∧ ¬American(x))", "∀x (BasketballPlayer(x) → Tall(x))", "∀x (Tall(x) → WearsLargeShoes(x))", "∀x (WearsLargeShoes(x) → WearsLargeSizedClothes(x))", "¬(WearsLargeSizeClothes(yuri))"], "conclusion-FOL": "Person(yuri) ∧ American(yuri)"}
{"premises-FOL": ["∃x (BasketballPlayer(x) ∧ ¬American(x))", "∀x (BasketballPlayer(x) → Tall(x))", "∀x (Tall(x) → WearsLargeShoes(x))", "∀x (WearsLargeShoes(x) → WearsLargeSizedClothes(x))", "¬(WearsLargeSizeClothes(yuri))"], "conclusion-FOL": "¬(BasketballPlayer(yuri) ∧ American(yuri))"}
{"premises-FOL": ["∃x (BasketballPlayer(x) ∧ ¬American(x))", "∀x (BasketballPlayer(x) → Tall(x))", "∀x (Tall(x) → WearsLargeShoes(x))", "∀x (WearsLargeShoes(x) → WearsLargeSizedClothes(x))", "¬(WearsLargeSizeClothes(yuri))"], "conclusion-FOL": "BasketballPlayer(yuri)"}
{"premises-FOL": ["∃x (BasketballPlayer(x) ∧ ¬American(x))", "∀x (BasketballPlayer(x) → Tall(x))", "∀x (Tall(x) → WearsLargeShoes(x))", "∀x (WearsLargeShoes(x) → WearsLargeSizedClothes(x))", "¬(WearsLargeSizeClothes(yuri))"], "conclusion-FOL": "∀x (Yuri(x) ∧ ¬LargeShoes(x) → AmericanBasketballPlayer(x))"}
{"premises-FOL": ["∃x (BasketballPlayer(x) ∧ ¬American(x))", "∀x (BasketballPlayer(x) → Tall(x))", "∀x (Tall(x) → WearsLargeShoes(x))", "∀x (WearsLargeShoes(x) → WearsLargeSizedClothes(x))", "¬(WearsLargeSizeClothes(yuri))"], "conclusion-FOL": "∀x (Yuri(x) ∧ ¬AmericanBasketballPlayer(x) → BasketballPlayer(x))"}
{"premises-FOL": ["∀x (Event(x) → (Happy(x) ⊕ Sad(x)))", "∃x (Event(x) ∧ Happy(x))"], "conclusion-FOL": "∀x (Event(x) → Sad(x))"}
{"premises-FOL": ["Winner(Steinhauer, 1992)", "Participated(Steinhauer, 1992DuMaurierClassic)", "∃x (Leaderboard(x) ∧ SixWayTie(x) ∧ PersonFromBelgium(x))", "Leaderboard(Descampe, 1992DuMaurierClassic)", "∀x (LeaderboardOf(x, 1992DuMaurierClassic) → ParticipatedIn(x, 1992DuMaurierClassic))"], "conclusion-FOL": "¬(SteinhauerWinner(1992, duMaurierClassic))"}
{"premises-FOL": ["Winner(Steinhauer, 1992)", "Participated(Steinhauer, 1992DuMaurierClassic)", "∃x (Leaderboard(x) ∧ SixWayTie(x) ∧ PersonFromBelgium(x))", "Leaderboard(Descampe, 1992DuMaurierClassic)", "∀x (LeaderboardOf(x, 1992DuMaurierClassic) → ParticipatedIn(x, 1992DuMaurierClassic))"], "conclusion-FOL": "Leaderboard(Descampe, 1992, DuMaurierClassic)"}
{"premises-FOL": ["∀x (Animal(x) ∧ Barks(x) → ¬Likes(Jane, x))", "∀x (Dog(x) → Barks(x))", "∀x (Animal(x) ∧ Jumps(x) → JaneLikes(x))", "∀x (Animal(x) ∧ HasLegs(x) → Jumps(x))", "∀x (Terricolous(x) → HasLegs(x))", "∀x (KiKi(x) ∧ ¬(Jumps(x) ∨ HasLegs(x)) → (Terricolous(x) ∨ HasLegs(x)))"], "conclusion-FOL": "∀x (KiKi(x) → Terricolous(x))"}
{"premises-FOL": ["∀x (Animal(x) ∧ Barks(x) → ¬Likes(Jane, x))", "∀x (Dog(x) → Barks(x))", "∀x (Animal(x) ∧ Jumps(x) → JaneLikes(x))", "∀x (Animal(x) ∧ HasLegs(x) → Jumps(x))", "∀x (Terricolous(x) → HasLegs(x))", "∀x (KiKi(x) ∧ ¬(Jumps(x) ∨ HasLegs(x)) → (Terricolous(x) ∨ HasLegs(x)))"], "conclusion-FOL": "∀x (KiKi(x) → (Barks(x) ∧ Dog(x)))"}
{"premises-FOL": ["∀x (Animal(x) ∧ Barks(x) → ¬Likes(Jane, x))", "∀x (Dog(x) → Barks(x))", "∀x (Animal(x) ∧ Jumps(x) → JaneLikes(x))", "∀x (Animal(x) ∧ HasLegs(x) → Jumps(x))", "∀x (Terricolous(x) → HasLegs(x))", "∀x (KiKi(x) ∧ ¬(Jumps(x) ∨ HasLegs(x)) → (Terricolous(x) ∨ HasLegs(x)))"], "conclusion-FOL": "∀x (KiKi(x) → (¬Barks(x) ∧ ¬Dog(x)))"}
{"premises-FOL": ["BornIn(AiltonSilva, 1995) ∧ CommonlyKnownAs(AiltonSilva, Ailton)", "∀x ∀y (Ailton(x) ∧ FootballPlayer(x) ∧ Braga(y) ∧ LoanedTo(x, y) → FootballPlayer(x))", "BrazilianFootballer(AiltonSilva) ∧ PlaysFor(AiltonSilva, Nautico)", "∀x ∀y (Nautico(x) ∧ Braga(y) → FootballClubAlongWith(x, y))", "∀x (FootballClub(x) → (Fluminense(x) ↔ (Club(x) ∧ BasedIn(x, Brazil) ∧ Name(x, \"Fluminense\") ∧ YearFounded(x, 1902))))"], "conclusion-FOL": "¬∃x (Player(x) ∧ Nautico(x) ∧ Brazilian(x))"}
{"premises-FOL": ["BornIn(AiltonSilva, 1995) ∧ CommonlyKnownAs(AiltonSilva, Ailton)", "∀x ∀y (Ailton(x) ∧ FootballPlayer(x) ∧ Braga(y) ∧ LoanedTo(x, y) → FootballPlayer(x))", "BrazilianFootballer(AiltonSilva) ∧ PlaysFor(AiltonSilva, Nautico)", "∀x ∀y (Nautico(x) ∧ Braga(y) → FootballClubAlongWith(x, y))", "∀x (FootballClub(x) → (Fluminense(x) ↔ (Club(x) ∧ BasedIn(x, Brazil) ∧ Name(x, \"Fluminense\") ∧ YearFounded(x, 1902))))"], "conclusion-FOL": "∀x (AiltonSilva(x) → ¬PlayForFootballClub(x))"}
{"premises-FOL": ["BornIn(AiltonSilva, 1995) ∧ CommonlyKnownAs(AiltonSilva, Ailton)", "∀x ∀y (Ailton(x) ∧ FootballPlayer(x) ∧ Braga(y) ∧ LoanedTo(x, y) → FootballPlayer(x))", "BrazilianFootballer(AiltonSilva) ∧ PlaysFor(AiltonSilva, Nautico)", "∀x ∀y (Nautico(x) ∧ Braga(y) → FootballClubAlongWith(x, y))", "∀x (FootballClub(x) → (Fluminense(x) ↔ (Club(x) ∧ BasedIn(x, Brazil) ∧ Name(x, \"Fluminense\") ∧ YearFounded(x, 1902))))"], "conclusion-FOL": "¬(LoanedTo(Ailton, FootballClub))"}
{"premises-FOL": ["BornIn(AiltonSilva, 1995) ∧ CommonlyKnownAs(AiltonSilva, Ailton)", "∀x ∀y (Ailton(x) ∧ FootballPlayer(x) ∧ Braga(y) ∧ LoanedTo(x, y) → FootballPlayer(x))", "BrazilianFootballer(AiltonSilva) ∧ PlaysFor(AiltonSilva, Nautico)", "∀x ∀y (Nautico(x) ∧ Braga(y) → FootballClubAlongWith(x, y))", "∀x (FootballClub(x) → (Fluminense(x) ↔ (Club(x) ∧ BasedIn(x, Brazil) ∧ Name(x, \"Fluminense\") ∧ YearFounded(x, 1902))))"], "conclusion-FOL": "∃x (Player(x) ∧ PlayedFor(x, Fluminense))"}
{"premises-FOL": ["BornIn(AiltonSilva, 1995) ∧ CommonlyKnownAs(AiltonSilva, Ailton)", "∀x ∀y (Ailton(x) ∧ FootballPlayer(x) ∧ Braga(y) ∧ LoanedTo(x, y) → FootballPlayer(x))", "BrazilianFootballer(AiltonSilva) ∧ PlaysFor(AiltonSilva, Nautico)", "∀x ∀y (Nautico(x) ∧ Braga(y) → FootballClubAlongWith(x, y))", "∀x (FootballClub(x) → (Fluminense(x) ↔ (Club(x) ∧ BasedIn(x, Brazil) ∧ Name(x, \"Fluminense\") ∧ YearFounded(x, 1902))))"], "conclusion-FOL": "∀x ∀y (AiltonSilva(x) ∧ FootballClub(y) → LoanedTo(x, y))"}
