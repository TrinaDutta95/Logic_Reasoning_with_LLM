[
    {
        "premises": [
            "People in this club who perform in school talent shows often attend and are very engaged with school events.",
            "People in this club either perform in school talent shows often or are inactive and disinterested community members.",
            "People in this club who chaperone high school dances are not students who attend the school.",
            "All people in this club who are inactive and disinterested members of their community chaperone high school dances.",
            "All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. ",
            "Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school."
        ],
        "premises-FOL": [
            "all x. (InThisClub(x) & PerformOftenIn(x, SchoolTalentShow) -> Attend(x, SchoolEvent) & VeryEngagedWith(x, SchoolEvent))",
            "all x. (InThisClub(x) -> PerformOftenIn(x, SchoolTalentShow) \u2295 (InActive(x) & Disinterested(x) & MemberOf(x, Community)))",
            "all x. (InThisClub(x) & Chaperone(x, HighSchoolDance) -> -(Studen(x) & AttendSchool(x)))",
            "all x. (InThisClub(x) & (InActive(x) & Disinterested(x) & MemberOf(x, Community)) -> Chaperone(x, HighSchoolDances))",
            "all x. (InThisClub(x) & (((YoungChildren(x) & -Teenager(x)) | (-YoungChildren(x) & Teenager(x)))) & WishToFurther(x, AcademicCareer)) -> Studen(x) & AttendSchool(x))",
            "InThisClub(((Bonnie) & -((Attend(x, SchoolEvent) & VeryEngagedWith(Bonnie, SchoolEvent)) & -(Studen(Bonne) & AttendSchool(Bonnie))) | (-(Bonnie) & -((Attend(x, SchoolEvent) & VeryEngagedWith(Bonnie, SchoolEvent)) & (Studen(Bonne) & AttendSchool(Bonnie)))))"
        ],
        "conclusion": "Bonnie performs in school talent shows often.",
        "conclusion-FOL": "InThisClub(Bonnie) & (Perform(Bonnie, SchoolTalentShow))",
        "label": "ERROR"
    },
    {
        "premises": [
            "People in this club who perform in school talent shows often attend and are very engaged with school events.",
            "People in this club either perform in school talent shows often or are inactive and disinterested community members.",
            "People in this club who chaperone high school dances are not students who attend the school.",
            "All people in this club who are inactive and disinterested members of their community chaperone high school dances.",
            "All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. ",
            "Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school."
        ],
        "premises-FOL": [
            "all x. (InThisClub(x) & PerformOftenIn(x, SchoolTalentShow) -> Attend(x, SchoolEvent) & VeryEngagedWith(x, SchoolEvent))",
            "all x. (InThisClub(x) -> PerformOftenIn(x, SchoolTalentShow) \u2295 (InActive(x) & Disinterested(x) & MemberOf(x, Community)))",
            "all x. (InThisClub(x) & Chaperone(x, HighSchoolDance) -> -(Studen(x) & AttendSchool(x)))",
            "all x. (InThisClub(x) & (InActive(x) & Disinterested(x) & MemberOf(x, Community)) -> Chaperone(x, HighSchoolDances))",
            "all x. (InThisClub(x) & (((YoungChildren(x) & -Teenager(x)) | (-YoungChildren(x) & Teenager(x)))) & WishToFurther(x, AcademicCareer)) -> Studen(x) & AttendSchool(x))",
            "InThisClub(((Bonnie) & -((Attend(x, SchoolEvent) & VeryEngagedWith(Bonnie, SchoolEvent)) & -(Studen(Bonne) & AttendSchool(Bonnie))) | (-(Bonnie) & -((Attend(x, SchoolEvent) & VeryEngagedWith(Bonnie, SchoolEvent)) & (Studen(Bonne) & AttendSchool(Bonnie)))))"
        ],
        "conclusion": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
        "conclusion-FOL": "-((((((YoungChildren(Bonnie) & -Teenager(Bonnie)) | (-YoungChildren(Bonnie) & Teenager(Bonnie)))) & WishToFurther(Bonnie, AcademicCareer)) \u2295 Chaperone(Bonnie, HighSchoolDance)) -> (Studen(x) & AttendSchool(x)) & -(((YoungChildren(Bonnie) & -Teenager(Bonnie))) | (-((((YoungChildren(Bonnie) & -Teenager(Bonnie)) | (-YoungChildren(Bonnie) & Teenager(Bonnie)))) & WishToFurther(Bonnie, AcademicCareer)) \u2295 Chaperone(Bonnie, HighSchoolDance)) -> (Studen(x) & AttendSchool(x)) & (((YoungChildren(Bonnie) & -Teenager(Bonnie)))) | (-YoungChildren(Bonnie) & Teenager(Bonnie)))) & WishToFurther(Bonnie, AcademicCareer))",
        "label": "ERROR"
    },
    {
        "premises": [
            "People in this club who perform in school talent shows often attend and are very engaged with school events.",
            "People in this club either perform in school talent shows often or are inactive and disinterested community members.",
            "People in this club who chaperone high school dances are not students who attend the school.",
            "All people in this club who are inactive and disinterested members of their community chaperone high school dances.",
            "All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. ",
            "Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school."
        ],
        "premises-FOL": [
            "all x. (InThisClub(x) & PerformOftenIn(x, SchoolTalentShow) -> Attend(x, SchoolEvent) & VeryEngagedWith(x, SchoolEvent))",
            "all x. (InThisClub(x) -> PerformOftenIn(x, SchoolTalentShow) \u2295 (InActive(x) & Disinterested(x) & MemberOf(x, Community)))",
            "all x. (InThisClub(x) & Chaperone(x, HighSchoolDance) -> -(Studen(x) & AttendSchool(x)))",
            "all x. (InThisClub(x) & (InActive(x) & Disinterested(x) & MemberOf(x, Community)) -> Chaperone(x, HighSchoolDances))",
            "all x. (InThisClub(x) & (((YoungChildren(x) & -Teenager(x)) | (-YoungChildren(x) & Teenager(x)))) & WishToFurther(x, AcademicCareer)) -> Studen(x) & AttendSchool(x))",
            "InThisClub(((Bonnie) & -((Attend(x, SchoolEvent) & VeryEngagedWith(Bonnie, SchoolEvent)) & -(Studen(Bonne) & AttendSchool(Bonnie))) | (-(Bonnie) & -((Attend(x, SchoolEvent) & VeryEngagedWith(Bonnie, SchoolEvent)) & (Studen(Bonne) & AttendSchool(Bonnie)))))"
        ],
        "conclusion": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
        "conclusion-FOL": "(((Chaperone(Bonnie, HighSchoolDance) & -Perform(Bonnie, SchoolTalentShow)) | (-Chaperone(Bonnie, HighSchoolDance) & Perform(Bonnie, SchoolTalentShow)))) -> (((YoungChildren(Bonnie) & -Teenager(Bonnie)) | (-YoungChildren(Bonnie) & Teenager(Bonnie)))) & WishToFurther(Bonnie, AcademicCareer)) & (InActive(Bonnie) & Disinterested(Bonnie) & MemberOf(Bonnie, Community))",
        "label": "ERROR"
    },
    {
        "premises": [
            "All employees who schedule a meeting with their customers will go to the company building today. ",
            "Everyone who has lunch in the company building schedules meetings with their customers. ",
            "Employees have lunch either in the company building or at home.",
            "If an employee has lunch at home, they are working remotely from home.",
            "All employees who are in other countries work remotely from home. ",
            "No managers work remotely from home. ",
            "James will appear in the company today if and only if he is a manager."
        ],
        "premises-FOL": [
            "all x. ((Employee(x) & Schedule(x, Meeting, Customers)) -> AppearIn(x, Company))",
            "all x. ((Employee(x) & HasLunch(x, Company)) -> Schedule(x, Meeting, Customers))",
            "all x. (Employee(x) -> (((HasLunch(x, Company) & -HasLunch(x, Home)) | (-HasLunch(x, Company) & HasLunch(x, Home)))))",
            "all x. ((Employee(x) & HasLunch(x, Home)) -> Work(x, Home))",
            "all x. ((Employee(x) & (-In(x, Homecountry))) -> Work(x, Home))",
            "all x. (Manager(x) -> -Work(x, Home))",
            "-(((Manager(James) & -AppearIn(James, Company)) | (-Manager(James) & AppearIn(James, Company))))"
        ],
        "conclusion": "James has lunch in the company.",
        "conclusion-FOL": "HasLunch(James, Company)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "All employees who schedule a meeting with their customers will go to the company building today. ",
            "Everyone who has lunch in the company building schedules meetings with their customers. ",
            "Employees have lunch either in the company building or at home.",
            "If an employee has lunch at home, they are working remotely from home.",
            "All employees who are in other countries work remotely from home. ",
            "No managers work remotely from home. ",
            "James will appear in the company today if and only if he is a manager."
        ],
        "premises-FOL": [
            "all x. ((Employee(x) & Schedule(x, Meeting, Customers)) -> AppearIn(x, Company))",
            "all x. ((Employee(x) & HasLunch(x, Company)) -> Schedule(x, Meeting, Customers))",
            "all x. (Employee(x) -> (((HasLunch(x, Company) & -HasLunch(x, Home)) | (-HasLunch(x, Company) & HasLunch(x, Home)))))",
            "all x. ((Employee(x) & HasLunch(x, Home)) -> Work(x, Home))",
            "all x. ((Employee(x) & (-In(x, Homecountry))) -> Work(x, Home))",
            "all x. (Manager(x) -> -Work(x, Home))",
            "-(((Manager(James) & -AppearIn(James, Company)) | (-Manager(James) & AppearIn(James, Company))))"
        ],
        "conclusion": "James does not have lunch in the company.",
        "conclusion-FOL": "-HasLunch(James, Company)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "All employees who schedule a meeting with their customers will go to the company building today. ",
            "Everyone who has lunch in the company building schedules meetings with their customers. ",
            "Employees have lunch either in the company building or at home.",
            "If an employee has lunch at home, they are working remotely from home.",
            "All employees who are in other countries work remotely from home. ",
            "No managers work remotely from home. ",
            "James will appear in the company today if and only if he is a manager."
        ],
        "premises-FOL": [
            "all x. ((Employee(x) & Schedule(x, Meeting, Customers)) -> AppearIn(x, Company))",
            "all x. ((Employee(x) & HasLunch(x, Company)) -> Schedule(x, Meeting, Customers))",
            "all x. (Employee(x) -> (((HasLunch(x, Company) & -HasLunch(x, Home)) | (-HasLunch(x, Company) & HasLunch(x, Home)))))",
            "all x. ((Employee(x) & HasLunch(x, Home)) -> Work(x, Home))",
            "all x. ((Employee(x) & (-In(x, Homecountry))) -> Work(x, Home))",
            "all x. (Manager(x) -> -Work(x, Home))",
            "-(((Manager(James) & -AppearIn(James, Company)) | (-Manager(James) & AppearIn(James, Company))))"
        ],
        "conclusion": "If James is either a manager or in other countries,  then James does not either has lunch at home or work remotely from home. If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries. [contrapositive is more natural]",
        "conclusion-FOL": "Manager(James) -> -Work(James, Home)",
        "label": "True"
    },
    {
        "premises": [
            "When the Monkeypox virus occurs in a being, it may get Monkeypox. ",
            "Monkeypox virus can occur in certain animals.",
            "Humans are mammals.",
            "Mammals are animals.",
            "Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. ",
            "People feel tired when they get the flu."
        ],
        "premises-FOL": [
            "exists x. (OccurIn(MonkeypoxVirus, x) & Get(x, MonkeypoxVirus))",
            "exists x. (Animal(x) & OccurIn(MonkeypoxVirus, x))",
            "all x. (Human(x) -> Mammal(x))",
            "all x. (Mammal(x) -> Animal(x))",
            "exists x. (SymptonOf(x, MonkeypoxVirus) & (Fever(x) | Headache(x) | MusclePain(x) | Tired(x)))",
            "all x. (Human(x) & Get(x, Flu) -> Feel(x, Tired))"
        ],
        "conclusion": "There is an animal.",
        "conclusion-FOL": "exists x. (Animal(x))",
        "label": "ERROR"
    },
    {
        "premises": [
            "When the Monkeypox virus occurs in a being, it may get Monkeypox. ",
            "Monkeypox virus can occur in certain animals.",
            "Humans are mammals.",
            "Mammals are animals.",
            "Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. ",
            "People feel tired when they get the flu."
        ],
        "premises-FOL": [
            "exists x. (OccurIn(MonkeypoxVirus, x) & Get(x, MonkeypoxVirus))",
            "exists x. (Animal(x) & OccurIn(MonkeypoxVirus, x))",
            "all x. (Human(x) -> Mammal(x))",
            "all x. (Mammal(x) -> Animal(x))",
            "exists x. (SymptonOf(x, MonkeypoxVirus) & (Fever(x) | Headache(x) | MusclePain(x) | Tired(x)))",
            "all x. (Human(x) & Get(x, Flu) -> Feel(x, Tired))"
        ],
        "conclusion": "No one gets the flu.",
        "conclusion-FOL": "all x. (Human(x) -> -Get(x, Flu))",
        "label": "ERROR"
    },
    {
        "premises": [
            "When the Monkeypox virus occurs in a being, it may get Monkeypox. ",
            "Monkeypox virus can occur in certain animals.",
            "Humans are mammals.",
            "Mammals are animals.",
            "Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. ",
            "People feel tired when they get the flu."
        ],
        "premises-FOL": [
            "exists x. (OccurIn(MonkeypoxVirus, x) & Get(x, MonkeypoxVirus))",
            "exists x. (Animal(x) & OccurIn(MonkeypoxVirus, x))",
            "all x. (Human(x) -> Mammal(x))",
            "all x. (Mammal(x) -> Animal(x))",
            "exists x. (SymptonOf(x, MonkeypoxVirus) & (Fever(x) | Headache(x) | MusclePain(x) | Tired(x)))",
            "all x. (Human(x) & Get(x, Flu) -> Feel(x, Tired))"
        ],
        "conclusion": "Symptoms of Monkeypox include coughing.",
        "conclusion-FOL": "exists x. (SymptonOf(x, MonkeypoxVirus) & Coughing(x))",
        "label": "ERROR"
    },
    {
        "premises": [
            "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
            "Tom is not an Eastern wild turkey.",
            "Tom is not an Osceola wild turkey.",
            "Tom is not a Gould's wild turkey.",
            "Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.",
            "Tom is a wild turkey."
        ],
        "premises-FOL": [
            "all x. (WildTurkey(x) -> (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RiograndeWildTurkey(x) | OcellatedWildTurkey(x)))",
            "-(EasternWildTurkey(Tom))",
            "-(OsceolaWildTurkey(Tom))",
            "-(GouldsWildTurkey(Tom))",
            "-(MerriamsWildTurkey(Tom) | RiograndeWildTurkey(Tom))",
            "WildTurkey(Tom)"
        ],
        "conclusion": "Tom is an Ocellated wild turkey.",
        "conclusion-FOL": "OcellatedWildTurkey(Tom)",
        "label": "True"
    },
    {
        "premises": [
            "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
            "Tom is not an Eastern wild turkey.",
            "Tom is not an Osceola wild turkey.",
            "Tom is not a Gould's wild turkey.",
            "Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.",
            "Tom is a wild turkey."
        ],
        "premises-FOL": [
            "all x. (WildTurkey(x) -> (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RiograndeWildTurkey(x) | OcellatedWildTurkey(x)))",
            "-(EasternWildTurkey(Tom))",
            "-(OsceolaWildTurkey(Tom))",
            "-(GouldsWildTurkey(Tom))",
            "-(MerriamsWildTurkey(Tom) | RiograndeWildTurkey(Tom))",
            "WildTurkey(Tom)"
        ],
        "conclusion": "Tom is an Eastern wild turkey.",
        "conclusion-FOL": "EasternWildTurkey(Tom)",
        "label": "False"
    },
    {
        "premises": [
            "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
            "Tom is not an Eastern wild turkey.",
            "Tom is not an Osceola wild turkey.",
            "Tom is not a Gould's wild turkey.",
            "Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.",
            "Tom is a wild turkey."
        ],
        "premises-FOL": [
            "all x. (WildTurkey(x) -> (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RiograndeWildTurkey(x) | OcellatedWildTurkey(x)))",
            "-(EasternWildTurkey(Tom))",
            "-(OsceolaWildTurkey(Tom))",
            "-(GouldsWildTurkey(Tom))",
            "-(MerriamsWildTurkey(Tom) | RiograndeWildTurkey(Tom))",
            "WildTurkey(Tom)"
        ],
        "conclusion": "Joey is a wild turkey.",
        "conclusion-FOL": "WildTurkey(Joey)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "A Japanese game company created the game the Legend of Zelda.",
            "All games on the Top 10 list are made by Japanese game companies.",
            "If a game sells more than one million copies, then it will be included in the Top 10 list.",
            "The Legend of Zelda sold more than one million copies."
        ],
        "premises-FOL": [
            "Game(TheLegendofZelda) & exists x. (Japanese(x) & VideoGameCompany(x) & Created(x, TheLegendofZelda))",
            "all x. all y. ((Game(x) & InTopOneZero(x) & Created(y,x)) -> Japanese(y))",
            "all x. ((Game(x) & exists y.(GreaterThan(y, OneMillion) & CopiesSold(x, y))) -> TopOneZero(x)))",
            "exists y.(GreaterThan(y, OneMillion) & CopiesSold(TheLegendofZelda,y))"
        ],
        "conclusion": "The Legend of Zelda is on the Top 10 list.",
        "conclusion-FOL": "TopOneZero(Thelegendofzelda)",
        "label": "ERROR"
    },
    {
        "premises": [
            "A Japanese game company created the game the Legend of Zelda.",
            "All games on the Top 10 list are made by Japanese game companies.",
            "If a game sells more than one million copies, then it will be included in the Top 10 list.",
            "The Legend of Zelda sold more than one million copies."
        ],
        "premises-FOL": [
            "Game(TheLegendofZelda) & exists x. (Japanese(x) & VideoGameCompany(x) & Created(x, TheLegendofZelda))",
            "all x. all y. ((Game(x) & InTopOneZero(x) & Created(y,x)) -> Japanese(y))",
            "all x. ((Game(x) & exists y.(GreaterThan(y, OneMillion) & CopiesSold(x, y))) -> TopOneZero(x)))",
            "exists y.(GreaterThan(y, OneMillion) & CopiesSold(TheLegendofZelda,y))"
        ],
        "conclusion": "FIFA 22 is made by a Japanese video game company.",
        "conclusion-FOL": "exists x.(Created(x, FifaTwoTwo) & Japanese(x) & VideoGameCompany(x))",
        "label": "ERROR"
    },
    {
        "premises": [
            "A Japanese game company created the game the Legend of Zelda.",
            "All games on the Top 10 list are made by Japanese game companies.",
            "If a game sells more than one million copies, then it will be included in the Top 10 list.",
            "The Legend of Zelda sold more than one million copies."
        ],
        "premises-FOL": [
            "Game(TheLegendofZelda) & exists x. (Japanese(x) & VideoGameCompany(x) & Created(x, TheLegendofZelda))",
            "all x. all y. ((Game(x) & InTopOneZero(x) & Created(y,x)) -> Japanese(y))",
            "all x. ((Game(x) & exists y.(GreaterThan(y, OneMillion) & CopiesSold(x, y))) -> TopOneZero(x)))",
            "exists y.(GreaterThan(y, OneMillion) & CopiesSold(TheLegendofZelda,y))"
        ],
        "conclusion": "The Legend of Zelda is not on the Top 10 list.",
        "conclusion-FOL": "-TopOneZero(Thelegendofzelda)",
        "label": "ERROR"
    },
    {
        "premises": [
            "All squares are four-sided.",
            "All four-sided things are shapes. "
        ],
        "premises-FOL": [
            "all x. (Square(x) -> FourSided(x))",
            "all x. (FourSided(x) -> Shape(x))"
        ],
        "conclusion": "All squares are shapes.",
        "conclusion-FOL": "all x. (Square(x) -> Shape(x))",
        "label": "True"
    },
    {
        "premises": [
            "All rabbits that can be spotted near the campus are cute. ",
            "Some turtles can be spotted near the campus. ",
            "The only animals that can be spotted near the campus are rabbits and squirrels.",
            "If something is skittish, then it is not calm.",
            "All the squirrels that can be spotted near the campus are skittish.",
            "Rockie can be spotted near the campus, and it is calm."
        ],
        "premises-FOL": [
            "all x. (Rabbit(x) & CanBeSpottedNear(x, Campus) -> Cute(x))",
            "exists x. (Turtle(x) & CanBeSpottedNear(x, Campus))",
            "all x. (CanBeSpottedNear(x, Campus) -> (((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x)))))",
            "all x. (Skittish(x) -> -Calm(x))",
            "all x. (Squirrel(x) & CanBeSpottedNear(x, Campus) -> Skittish(x))",
            "CanBeSpottedNear(Rockie, Campus) & Calm(Rockie) "
        ],
        "conclusion": "Rockie is a turtle.",
        "conclusion-FOL": "Turtle(Rockie)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "All rabbits that can be spotted near the campus are cute. ",
            "Some turtles can be spotted near the campus. ",
            "The only animals that can be spotted near the campus are rabbits and squirrels.",
            "If something is skittish, then it is not calm.",
            "All the squirrels that can be spotted near the campus are skittish.",
            "Rockie can be spotted near the campus, and it is calm."
        ],
        "premises-FOL": [
            "all x. (Rabbit(x) & CanBeSpottedNear(x, Campus) -> Cute(x))",
            "exists x. (Turtle(x) & CanBeSpottedNear(x, Campus))",
            "all x. (CanBeSpottedNear(x, Campus) -> (((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x)))))",
            "all x. (Skittish(x) -> -Calm(x))",
            "all x. (Squirrel(x) & CanBeSpottedNear(x, Campus) -> Skittish(x))",
            "CanBeSpottedNear(Rockie, Campus) & Calm(Rockie) "
        ],
        "conclusion": "Rockie is not a turtle.",
        "conclusion-FOL": "-Turtle(Rockie)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "All rabbits that can be spotted near the campus are cute. ",
            "Some turtles can be spotted near the campus. ",
            "The only animals that can be spotted near the campus are rabbits and squirrels.",
            "If something is skittish, then it is not calm.",
            "All the squirrels that can be spotted near the campus are skittish.",
            "Rockie can be spotted near the campus, and it is calm."
        ],
        "premises-FOL": [
            "all x. (Rabbit(x) & CanBeSpottedNear(x, Campus) -> Cute(x))",
            "exists x. (Turtle(x) & CanBeSpottedNear(x, Campus))",
            "all x. (CanBeSpottedNear(x, Campus) -> (((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x)))))",
            "all x. (Skittish(x) -> -Calm(x))",
            "all x. (Squirrel(x) & CanBeSpottedNear(x, Campus) -> Skittish(x))",
            "CanBeSpottedNear(Rockie, Campus) & Calm(Rockie) "
        ],
        "conclusion": "Rockie is a turtle or cute.",
        "conclusion-FOL": "Turtle(Rockie) | Cute(Rockie)",
        "label": "True"
    },
    {
        "premises": [
            "All rabbits that can be spotted near the campus are cute. ",
            "Some turtles can be spotted near the campus. ",
            "The only animals that can be spotted near the campus are rabbits and squirrels.",
            "If something is skittish, then it is not calm.",
            "All the squirrels that can be spotted near the campus are skittish.",
            "Rockie can be spotted near the campus, and it is calm."
        ],
        "premises-FOL": [
            "all x. (Rabbit(x) & CanBeSpottedNear(x, Campus) -> Cute(x))",
            "exists x. (Turtle(x) & CanBeSpottedNear(x, Campus))",
            "all x. (CanBeSpottedNear(x, Campus) -> (((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x)))))",
            "all x. (Skittish(x) -> -Calm(x))",
            "all x. (Squirrel(x) & CanBeSpottedNear(x, Campus) -> Skittish(x))",
            "CanBeSpottedNear(Rockie, Campus) & Calm(Rockie) "
        ],
        "conclusion": "If Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish.",
        "conclusion-FOL": "-(Turtle(Rockie) & Squirrel(Rockie)) -> ((Cute(Rockie) & -Skittish(Rockie)) | (-Cute(Rockie) & Skittish(Rockie)))",
        "label": "True"
    },
    {
        "premises": [
            "All rabbits that can be spotted near the campus are cute. ",
            "Some turtles can be spotted near the campus. ",
            "The only animals that can be spotted near the campus are rabbits and squirrels.",
            "If something is skittish, then it is not calm.",
            "All the squirrels that can be spotted near the campus are skittish.",
            "Rockie can be spotted near the campus, and it is calm."
        ],
        "premises-FOL": [
            "all x. (Rabbit(x) & CanBeSpottedNear(x, Campus) -> Cute(x))",
            "exists x. (Turtle(x) & CanBeSpottedNear(x, Campus))",
            "all x. (CanBeSpottedNear(x, Campus) -> (((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x)))))",
            "all x. (Skittish(x) -> -Calm(x))",
            "all x. (Squirrel(x) & CanBeSpottedNear(x, Campus) -> Skittish(x))",
            "CanBeSpottedNear(Rockie, Campus) & Calm(Rockie) "
        ],
        "conclusion": "If Rockie is cute and calm, then Rockie is a skittish turtle.",
        "conclusion-FOL": "Cute(Rockie) & Calm(Rockie) -> Turtle(Rockie) & Skittish(Rockie)",
        "label": "False"
    },
    {
        "premises": [
            "\"Stranger Things\" is a popular Netflix show.",
            "If a Netflix show is popular, Karen will binge-watch it.",
            "If and only if Karen binge-watches a Netflix show, she will download it.",
            "Karen does not download \"Black Mirror.\"",
            "\"Black Mirror\" is a Netflix show.",
            "If Karen binge-watches a Netflix show, she will share it with Lisa."
        ],
        "premises-FOL": [
            "NetflixShow(StrangerThings) & Popular(StrangerThings)",
            "all x. ((NetflixShow(x) & Popular(x)) -> BingeWatch(Karen, x))",
            "all x. ((NetflixShow(x) & BingeWatch(Karen, x)) <-> Download(Karen, x))",
            "-Download(Karen, BlackMirror)",
            "NetflixShow(BlackMirror)",
            "all x. ((NetflixShow(x) & BingeWatch(Karen, x)) -> ShareWith(Karen, x, Lisa))"
        ],
        "conclusion": "Karen will share \"Stranger Things\" with Lisa.",
        "conclusion-FOL": "ShareWith(Karen, StrangerThings, Lisa)",
        "label": "True"
    },
    {
        "premises": [
            "\"Stranger Things\" is a popular Netflix show.",
            "If a Netflix show is popular, Karen will binge-watch it.",
            "If and only if Karen binge-watches a Netflix show, she will download it.",
            "Karen does not download \"Black Mirror.\"",
            "\"Black Mirror\" is a Netflix show.",
            "If Karen binge-watches a Netflix show, she will share it with Lisa."
        ],
        "premises-FOL": [
            "NetflixShow(StrangerThings) & Popular(StrangerThings)",
            "all x. ((NetflixShow(x) & Popular(x)) -> BingeWatch(Karen, x))",
            "all x. ((NetflixShow(x) & BingeWatch(Karen, x)) <-> Download(Karen, x))",
            "-Download(Karen, BlackMirror)",
            "NetflixShow(BlackMirror)",
            "all x. ((NetflixShow(x) & BingeWatch(Karen, x)) -> ShareWith(Karen, x, Lisa))"
        ],
        "conclusion": "\"Black Mirror\" is popular.",
        "conclusion-FOL": "Popular(BlackMirror)",
        "label": "False"
    },
    {
        "premises": [
            "\"Stranger Things\" is a popular Netflix show.",
            "If a Netflix show is popular, Karen will binge-watch it.",
            "If and only if Karen binge-watches a Netflix show, she will download it.",
            "Karen does not download \"Black Mirror.\"",
            "\"Black Mirror\" is a Netflix show.",
            "If Karen binge-watches a Netflix show, she will share it with Lisa."
        ],
        "premises-FOL": [
            "NetflixShow(StrangerThings) & Popular(StrangerThings)",
            "all x. ((NetflixShow(x) & Popular(x)) -> BingeWatch(Karen, x))",
            "all x. ((NetflixShow(x) & BingeWatch(Karen, x)) <-> Download(Karen, x))",
            "-Download(Karen, BlackMirror)",
            "NetflixShow(BlackMirror)",
            "all x. ((NetflixShow(x) & BingeWatch(Karen, x)) -> ShareWith(Karen, x, Lisa))"
        ],
        "conclusion": "Karen will share \"Black Mirror\" with Lisa.",
        "conclusion-FOL": "ShareWith(Karen, BlackMirror, Lisa)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "Beijing is the capital of the People's Republic of China. ",
            "Beijing is the capital city of the world's most populous nation.",
            "Beijing is located in Northern China.",
            "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
            "Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.",
            "Many of Beijing's 91 universities consistently rank among the best universities in the world."
        ],
        "premises-FOL": [
            "CapitalOf(Beijing, PeoplesRepublicOfChina)",
            "exists x. (CapitalOf(Beijing, x) -> WorldsMostPopulousNation(x))",
            "LocatedIn(Beijing, NorthernChina)",
            "Hosted(Beijing, TwoZeroZeroEightSummerOlympics) & Hosted(Beijing, TwoZeroZeroEightSummerParalympicGames)",
            "Hosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympicGames)  & Hosted(Beijing, WinterParalympicGames)",
            "exists x. (University(x) & InBeijing(x) & ConsistentlyRankAmongTheBestIn(x, TheWorld))"
        ],
        "conclusion": "Beijing hosted both the 2008 Summer Olympics and the Winter Olympics.",
        "conclusion-FOL": "Hosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics)",
        "label": "True"
    },
    {
        "premises": [
            "Beijing is the capital of the People's Republic of China. ",
            "Beijing is the capital city of the world's most populous nation.",
            "Beijing is located in Northern China.",
            "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
            "Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.",
            "Many of Beijing's 91 universities consistently rank among the best universities in the world."
        ],
        "premises-FOL": [
            "CapitalOf(Beijing, PeoplesRepublicOfChina)",
            "exists x. (CapitalOf(Beijing, x) -> WorldsMostPopulousNation(x))",
            "LocatedIn(Beijing, NorthernChina)",
            "Hosted(Beijing, TwoZeroZeroEightSummerOlympics) & Hosted(Beijing, TwoZeroZeroEightSummerParalympicGames)",
            "Hosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympicGames)  & Hosted(Beijing, WinterParalympicGames)",
            "exists x. (University(x) & InBeijing(x) & ConsistentlyRankAmongTheBestIn(x, TheWorld))"
        ],
        "conclusion": "Beijing is located in southern China.",
        "conclusion-FOL": "LocatedIn(Beijing, SouthernChina)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "Beijing is the capital of the People's Republic of China. ",
            "Beijing is the capital city of the world's most populous nation.",
            "Beijing is located in Northern China.",
            "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
            "Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.",
            "Many of Beijing's 91 universities consistently rank among the best universities in the world."
        ],
        "premises-FOL": [
            "CapitalOf(Beijing, PeoplesRepublicOfChina)",
            "exists x. (CapitalOf(Beijing, x) -> WorldsMostPopulousNation(x))",
            "LocatedIn(Beijing, NorthernChina)",
            "Hosted(Beijing, TwoZeroZeroEightSummerOlympics) & Hosted(Beijing, TwoZeroZeroEightSummerParalympicGames)",
            "Hosted(Beijing, SummerOlympics) & Hosted(Beijing, WinterOlympics) & Hosted(Beijing, SummerParalympicGames)  & Hosted(Beijing, WinterParalympicGames)",
            "exists x. (University(x) & InBeijing(x) & ConsistentlyRankAmongTheBestIn(x, TheWorld))"
        ],
        "conclusion": "Beijing is the second largest Chinese city.",
        "conclusion-FOL": "SecondLargestChineseCity(Beijing)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "All aliens are extraterrestrials.",
            "If someone is from Mars, then they are an alien.",
            "No extraterrestrials are human.",
            "All highly intelligent beings from Earth are humans.",
            "Marvin is a highly intelligent being.",
            "Marvin is either from Earth and from Mars, or he is from neither.",
            "If Marvin is not from Earth, then Marvin is an extraterrestrial."
        ],
        "premises-FOL": [
            "all x. (Alien(x) -> Extraterrestrial(x))",
            "all x. (From(x, Mars) -> Alien(x))",
            "all x. (Extraterrestrial(x) -> -Human(x))",
            "all x. (HighlyIntelligentBeing(x) & From(x, Earth) -> Human(x))",
            "HighlyIntelligentBeing(Marvin)",
            "-(((From(Marvin, Earth) & -From(Marvin, Mars)) | (-From(Marvin, Earth) & From(Marvin, Mars))))",
            "-From(Marvin, Earth) -> Extraterrestrial(Marvin)"
        ],
        "conclusion": "Marvin is an alien.",
        "conclusion-FOL": "Alien(Marvin)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "All aliens are extraterrestrials.",
            "If someone is from Mars, then they are an alien.",
            "No extraterrestrials are human.",
            "All highly intelligent beings from Earth are humans.",
            "Marvin is a highly intelligent being.",
            "Marvin is either from Earth and from Mars, or he is from neither.",
            "If Marvin is not from Earth, then Marvin is an extraterrestrial."
        ],
        "premises-FOL": [
            "all x. (Alien(x) -> Extraterrestrial(x))",
            "all x. (From(x, Mars) -> Alien(x))",
            "all x. (Extraterrestrial(x) -> -Human(x))",
            "all x. (HighlyIntelligentBeing(x) & From(x, Earth) -> Human(x))",
            "HighlyIntelligentBeing(Marvin)",
            "-(((From(Marvin, Earth) & -From(Marvin, Mars)) | (-From(Marvin, Earth) & From(Marvin, Mars))))",
            "-From(Marvin, Earth) -> Extraterrestrial(Marvin)"
        ],
        "conclusion": "Marvin is neither a human nor from Mars.",
        "conclusion-FOL": "-Human(Marvin) & -From(Marvin, Mars)",
        "label": "True"
    },
    {
        "premises": [
            "All aliens are extraterrestrials.",
            "If someone is from Mars, then they are an alien.",
            "No extraterrestrials are human.",
            "All highly intelligent beings from Earth are humans.",
            "Marvin is a highly intelligent being.",
            "Marvin is either from Earth and from Mars, or he is from neither.",
            "If Marvin is not from Earth, then Marvin is an extraterrestrial."
        ],
        "premises-FOL": [
            "all x. (Alien(x) -> Extraterrestrial(x))",
            "all x. (From(x, Mars) -> Alien(x))",
            "all x. (Extraterrestrial(x) -> -Human(x))",
            "all x. (HighlyIntelligentBeing(x) & From(x, Earth) -> Human(x))",
            "HighlyIntelligentBeing(Marvin)",
            "-(((From(Marvin, Earth) & -From(Marvin, Mars)) | (-From(Marvin, Earth) & From(Marvin, Mars))))",
            "-From(Marvin, Earth) -> Extraterrestrial(Marvin)"
        ],
        "conclusion": "If Marvin is not from Mars, then Marvin is a human.",
        "conclusion-FOL": "-From(Marvin, Mars) -> Human(Marvin)",
        "label": "False"
    },
    {
        "premises": [
            "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.",
            "Every Grand Slam champion at the mixer is a professional tennis player.",
            "All Oscar-nominated actors at the mixer are celebrities.",
            "All professional tennis players at the mixer are athletes.",
            "If a person at the mixer is a celebrity, then they are well paid.",
            "If a person at the mixer is an athlete, then they are famous.",
            "All well-paid people at the mixer live in tax havens.",
            "Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid."
        ],
        "premises-FOL": [
            "all x. (At(x, Mixer) -> (GrandSlam(x) & Champion(x)) | (OscarNominated(x) & Actor(x)))",
            "all x. (At(x, Mixer) & (GrandSlam(x) & Champion(x) -> Professional(x) & TennisPlayer(x))",
            "all x. (At(x, Mixer) & (OscarNominated(x) & Actor(x) -> Celebrity(x))",
            "all x. (At(x, Mixer) & Professional(x) & TennisPlayer(x) -> Athlete(x))",
            "all x. (At(x, Mixer) & Celebrity(x) -> WellPaid(x))",
            "all x. (At(x, Mixer) & Athlete(x) -> Famous(x))",
            "all x. (At(x, Mixer) & WellPaid(x) -> LiveIn(x, TaxHaven))",
            "At(Djokovic, Mixer) & (Famous(Djokovic) & Athlete(Djokovic) -> WellPaid(Djokovic))"
        ],
        "conclusion": "Djokovic is a Grand Slam champion.",
        "conclusion-FOL": "GrandSlam(Djokovic) & Champion(Djokovic)",
        "label": "ERROR"
    },
    {
        "premises": [
            "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.",
            "Every Grand Slam champion at the mixer is a professional tennis player.",
            "All Oscar-nominated actors at the mixer are celebrities.",
            "All professional tennis players at the mixer are athletes.",
            "If a person at the mixer is a celebrity, then they are well paid.",
            "If a person at the mixer is an athlete, then they are famous.",
            "All well-paid people at the mixer live in tax havens.",
            "Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid."
        ],
        "premises-FOL": [
            "all x. (At(x, Mixer) -> (GrandSlam(x) & Champion(x)) | (OscarNominated(x) & Actor(x)))",
            "all x. (At(x, Mixer) & (GrandSlam(x) & Champion(x) -> Professional(x) & TennisPlayer(x))",
            "all x. (At(x, Mixer) & (OscarNominated(x) & Actor(x) -> Celebrity(x))",
            "all x. (At(x, Mixer) & Professional(x) & TennisPlayer(x) -> Athlete(x))",
            "all x. (At(x, Mixer) & Celebrity(x) -> WellPaid(x))",
            "all x. (At(x, Mixer) & Athlete(x) -> Famous(x))",
            "all x. (At(x, Mixer) & WellPaid(x) -> LiveIn(x, TaxHaven))",
            "At(Djokovic, Mixer) & (Famous(Djokovic) & Athlete(Djokovic) -> WellPaid(Djokovic))"
        ],
        "conclusion": "Djokovic lives in a tax haven.",
        "conclusion-FOL": "LiveIn(Djokovic, TaxHaven)",
        "label": "ERROR"
    },
    {
        "premises": [
            "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.",
            "Every Grand Slam champion at the mixer is a professional tennis player.",
            "All Oscar-nominated actors at the mixer are celebrities.",
            "All professional tennis players at the mixer are athletes.",
            "If a person at the mixer is a celebrity, then they are well paid.",
            "If a person at the mixer is an athlete, then they are famous.",
            "All well-paid people at the mixer live in tax havens.",
            "Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid."
        ],
        "premises-FOL": [
            "all x. (At(x, Mixer) -> (GrandSlam(x) & Champion(x)) | (OscarNominated(x) & Actor(x)))",
            "all x. (At(x, Mixer) & (GrandSlam(x) & Champion(x) -> Professional(x) & TennisPlayer(x))",
            "all x. (At(x, Mixer) & (OscarNominated(x) & Actor(x) -> Celebrity(x))",
            "all x. (At(x, Mixer) & Professional(x) & TennisPlayer(x) -> Athlete(x))",
            "all x. (At(x, Mixer) & Celebrity(x) -> WellPaid(x))",
            "all x. (At(x, Mixer) & Athlete(x) -> Famous(x))",
            "all x. (At(x, Mixer) & WellPaid(x) -> LiveIn(x, TaxHaven))",
            "At(Djokovic, Mixer) & (Famous(Djokovic) & Athlete(Djokovic) -> WellPaid(Djokovic))"
        ],
        "conclusion": "Djokovic does not live in a tax haven.",
        "conclusion-FOL": "-LiveIn(Djokovic, TaxHaven)",
        "label": "ERROR"
    },
    {
        "premises": [
            "Diamond Mine is a professional wrestling stable formed in WWE.",
            "Roderick Strong leads Diamond Mine.",
            "Diamond Mine includes the Creed Brothers and Ivy Nile.",
            "Imperium has a feud with Diamond Mine."
        ],
        "premises-FOL": [
            "ProfessionalWrestlingStable(DiamondMine) & In(DiamondMine, wWE)",
            "Leads(RoderickStrong, DiamondMine)",
            "Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)",
            "Feuds(Imperium, DiamondMine)"
        ],
        "conclusion": "Roderick Strong leads a professional wrestling stable.",
        "conclusion-FOL": "exists x. (Leads(Roderickstrong, x) & ProfessionalWrestlingStable(x))",
        "label": "ERROR"
    },
    {
        "premises": [
            "Diamond Mine is a professional wrestling stable formed in WWE.",
            "Roderick Strong leads Diamond Mine.",
            "Diamond Mine includes the Creed Brothers and Ivy Nile.",
            "Imperium has a feud with Diamond Mine."
        ],
        "premises-FOL": [
            "ProfessionalWrestlingStable(DiamondMine) & In(DiamondMine, wWE)",
            "Leads(RoderickStrong, DiamondMine)",
            "Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)",
            "Feuds(Imperium, DiamondMine)"
        ],
        "conclusion": "Roderick Strong leads the Creed Brothers.",
        "conclusion-FOL": "Leads(Roderickstrong, Creedbrothers)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "Diamond Mine is a professional wrestling stable formed in WWE.",
            "Roderick Strong leads Diamond Mine.",
            "Diamond Mine includes the Creed Brothers and Ivy Nile.",
            "Imperium has a feud with Diamond Mine."
        ],
        "premises-FOL": [
            "ProfessionalWrestlingStable(DiamondMine) & In(DiamondMine, wWE)",
            "Leads(RoderickStrong, DiamondMine)",
            "Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)",
            "Feuds(Imperium, DiamondMine)"
        ],
        "conclusion": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
        "conclusion-FOL": "all x. ((ProfessionalWrestlingStable(x) & Includes(x, Ivynile)) -> -Feuds(Imperium, x))",
        "label": "ERROR"
    },
    {
        "premises": [
            "Symphony No. 9 is a music piece.",
            "Composers write music pieces.",
            "Beethoven wrote Symphony No. 9.",
            "Vienna Music Society premiered Symphony No. 9.",
            "Vienna Music Society is an orchestra.",
            "Beethoven leads the Vienna Music Society.",
            "Orchestras are led by conductors."
        ],
        "premises-FOL": [
            "MusicPiece(SymphonyNine)",
            "all x. (MusicPiece(x) -> exists y. (Composer(y) & Write(y, x)))",
            "Writtenby(SymphonyNine, Beethoven)",
            "Premiered(ViennaMusicSociety, SymphonyNine)",
            "Orchestra(ViennaMusicSociety)",
            "Lead(Beethoven, ViennaMusicSociety)",
            "all x. (Orchestra(x) -> (exists y. Conductor(y) & Lead(y, x)))"
        ],
        "conclusion": "Beethoven is a composer.",
        "conclusion-FOL": "Composer(Beethoven)",
        "label": "ERROR"
    },
    {
        "premises": [
            "Symphony No. 9 is a music piece.",
            "Composers write music pieces.",
            "Beethoven wrote Symphony No. 9.",
            "Vienna Music Society premiered Symphony No. 9.",
            "Vienna Music Society is an orchestra.",
            "Beethoven leads the Vienna Music Society.",
            "Orchestras are led by conductors."
        ],
        "premises-FOL": [
            "MusicPiece(SymphonyNine)",
            "all x. (MusicPiece(x) -> exists y. (Composer(y) & Write(y, x)))",
            "Writtenby(SymphonyNine, Beethoven)",
            "Premiered(ViennaMusicSociety, SymphonyNine)",
            "Orchestra(ViennaMusicSociety)",
            "Lead(Beethoven, ViennaMusicSociety)",
            "all x. (Orchestra(x) -> (exists y. Conductor(y) & Lead(y, x)))"
        ],
        "conclusion": "Some orchestras premiered music pieces.",
        "conclusion-FOL": "exists x. exists y. (Orchestra(x) & MusicPiece(y) & Premiered(x, y))",
        "label": "True"
    },
    {
        "premises": [
            "Symphony No. 9 is a music piece.",
            "Composers write music pieces.",
            "Beethoven wrote Symphony No. 9.",
            "Vienna Music Society premiered Symphony No. 9.",
            "Vienna Music Society is an orchestra.",
            "Beethoven leads the Vienna Music Society.",
            "Orchestras are led by conductors."
        ],
        "premises-FOL": [
            "MusicPiece(SymphonyNine)",
            "all x. (MusicPiece(x) -> exists y. (Composer(y) & Write(y, x)))",
            "Writtenby(SymphonyNine, Beethoven)",
            "Premiered(ViennaMusicSociety, SymphonyNine)",
            "Orchestra(ViennaMusicSociety)",
            "Lead(Beethoven, ViennaMusicSociety)",
            "all x. (Orchestra(x) -> (exists y. Conductor(y) & Lead(y, x)))"
        ],
        "conclusion": "Beethoven is not a conductor.",
        "conclusion-FOL": "-Conductor(Beethoven)",
        "label": "ERROR"
    },
    {
        "premises": [
            "All of Zaha Hadid's design styles that Max adores have interesting geometries.",
            "No brutalist buildings that Max adores have interesting geometries.",
            "Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. ",
            "All of Kelly Wearstler's design styles that Max adores are evocative.",
            "All of Kelly Wearstler's design styles that Max adores are dreamy.",
            "If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative."
        ],
        "premises-FOL": [
            "all x. (Adore(Max, x) & ZahaHadid(x) & DesignStyle(x) -> InterestingGeometry(x))",
            "all x. (Adore(Max, x) & BrutalistBuilding(x) -> -InterestingGeometry(x))",
            "all x. (((Adore(Max, x) -> ((ZahaHadid(x) & DesignStyle(x)) & -(KellyWearstler(x) & DesignStyle(x))) | (-(Adore(Max, x) -> ((ZahaHadid(x) & DesignStyle(x)) & (KellyWearstler(x) & DesignStyle(x)))))",
            "all x. (Adore(Max, x) & KellyWearstler(x) & DesignStyle(x) -> Evocative(x))",
            "all x. (Adore(Max, x) & KellyWearstler(x) & DesignStyle(x) -> Dreamy(x))",
            "exists x. (Adore(Max, x) & Design(x) & ByMax(x) & InterestingGeometry(x) -> BrutalistBuilding(x) & Evocative(x))"
        ],
        "conclusion": "A design by Max is a brutalist building.",
        "conclusion-FOL": "exists x. (Design(x) & ByMax(x) & BrutalistBuilding(x))",
        "label": "ERROR"
    },
    {
        "premises": [
            "All of Zaha Hadid's design styles that Max adores have interesting geometries.",
            "No brutalist buildings that Max adores have interesting geometries.",
            "Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. ",
            "All of Kelly Wearstler's design styles that Max adores are evocative.",
            "All of Kelly Wearstler's design styles that Max adores are dreamy.",
            "If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative."
        ],
        "premises-FOL": [
            "all x. (Adore(Max, x) & ZahaHadid(x) & DesignStyle(x) -> InterestingGeometry(x))",
            "all x. (Adore(Max, x) & BrutalistBuilding(x) -> -InterestingGeometry(x))",
            "all x. (((Adore(Max, x) -> ((ZahaHadid(x) & DesignStyle(x)) & -(KellyWearstler(x) & DesignStyle(x))) | (-(Adore(Max, x) -> ((ZahaHadid(x) & DesignStyle(x)) & (KellyWearstler(x) & DesignStyle(x)))))",
            "all x. (Adore(Max, x) & KellyWearstler(x) & DesignStyle(x) -> Evocative(x))",
            "all x. (Adore(Max, x) & KellyWearstler(x) & DesignStyle(x) -> Dreamy(x))",
            "exists x. (Adore(Max, x) & Design(x) & ByMax(x) & InterestingGeometry(x) -> BrutalistBuilding(x) & Evocative(x))"
        ],
        "conclusion": "A design by Max is evocative and dreamy.",
        "conclusion-FOL": "exists x. (Design(x) & ByMax(x) & Evocative(x) & Dreamy(x))",
        "label": "ERROR"
    },
    {
        "premises": [
            "All of Zaha Hadid's design styles that Max adores have interesting geometries.",
            "No brutalist buildings that Max adores have interesting geometries.",
            "Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. ",
            "All of Kelly Wearstler's design styles that Max adores are evocative.",
            "All of Kelly Wearstler's design styles that Max adores are dreamy.",
            "If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative."
        ],
        "premises-FOL": [
            "all x. (Adore(Max, x) & ZahaHadid(x) & DesignStyle(x) -> InterestingGeometry(x))",
            "all x. (Adore(Max, x) & BrutalistBuilding(x) -> -InterestingGeometry(x))",
            "all x. (((Adore(Max, x) -> ((ZahaHadid(x) & DesignStyle(x)) & -(KellyWearstler(x) & DesignStyle(x))) | (-(Adore(Max, x) -> ((ZahaHadid(x) & DesignStyle(x)) & (KellyWearstler(x) & DesignStyle(x)))))",
            "all x. (Adore(Max, x) & KellyWearstler(x) & DesignStyle(x) -> Evocative(x))",
            "all x. (Adore(Max, x) & KellyWearstler(x) & DesignStyle(x) -> Dreamy(x))",
            "exists x. (Adore(Max, x) & Design(x) & ByMax(x) & InterestingGeometry(x) -> BrutalistBuilding(x) & Evocative(x))"
        ],
        "conclusion": "A design by Max is either evocative or dreamy.",
        "conclusion-FOL": "exists x. (Design(x) & ByMax(x) & (((Evocative(x) & -Dreamy(x)) | (-Evocative(x) & Dreamy(x)))))",
        "label": "ERROR"
    },
    {
        "premises": [
            "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. ",
            "Everyone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.",
            "All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.",
            "All tennis players at Roland Garros 2022 are either female or male.",
            "All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.",
            "If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
            "Coco Gauff is at Roland Garros 2022."
        ],
        "premises-FOL": [
            "all x. (RankedHighlyBy(x, WomensTennisAssociation) -> MostActivePlayerIn(x, MajorTennis))",
            "all x. (LostTo(x, \u015bwiatek) &  At(x, RolandGarrosTwoZeroTwoTwo) -> RankedHighlyBy(x, WomensTennisAssociation))",
            "all x. (FemaleTennisPlayer(x) & At(x, RolandGarrosTwoZeroTwoTwo) -> LostTo(x, \u015bwiatek) &  At(x, RolandGarrosTwoZeroTwoTwo))",
            "all x. (((TennisPlayer(x) & At(x, RolandGarrosTwoZeroTwoTwo) -> (Female(x) & TennisPlayer(x)) & -(Male(x) & TennisPlayer(x))) | (-(TennisPlayer(x) & At(x, RolandGarrosTwoZeroTwoTwo) -> (Female(x) & TennisPlayer(x)) & (Male(x) & TennisPlayer(x))))) ",
            "all x. (Male(x) & TennisPlayer(x) & At(x, RolandGarrosTwoZeroTwoTwo) -> LostTo(x, \u015bwiatek) & At(x, RolandGarrosTwoZeroTwoTwo))",
            "RankedHighlyBy(CocoGauff, WomensTennisAssociation) | (LostTo(CocoGauff, \u015bwiatek) & LostAt(CocoGauff, RolandGarrosTwoZeroTwoTwo)) -> -(Male(CocoGauff) & TennisPlayer(CocoGauff) & AtRolandGarrosTwoZeroTwoTwo(CocoGauff))",
            "TennisPlayer(CocoGauff) & At(CocoGauff, RolandGarrosTwoZeroTwoTwo)"
        ],
        "conclusion": "Coco Gauff is among the most active Grand-Slam players.",
        "conclusion-FOL": "MostActivePlayerIn(CocoGauff, MajorTennis)",
        "label": "ERROR"
    },
    {
        "premises": [
            "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. ",
            "Everyone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.",
            "All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.",
            "All tennis players at Roland Garros 2022 are either female or male.",
            "All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.",
            "If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
            "Coco Gauff is at Roland Garros 2022."
        ],
        "premises-FOL": [
            "all x. (RankedHighlyBy(x, WomensTennisAssociation) -> MostActivePlayerIn(x, MajorTennis))",
            "all x. (LostTo(x, \u015bwiatek) &  At(x, RolandGarrosTwoZeroTwoTwo) -> RankedHighlyBy(x, WomensTennisAssociation))",
            "all x. (FemaleTennisPlayer(x) & At(x, RolandGarrosTwoZeroTwoTwo) -> LostTo(x, \u015bwiatek) &  At(x, RolandGarrosTwoZeroTwoTwo))",
            "all x. (((TennisPlayer(x) & At(x, RolandGarrosTwoZeroTwoTwo) -> (Female(x) & TennisPlayer(x)) & -(Male(x) & TennisPlayer(x))) | (-(TennisPlayer(x) & At(x, RolandGarrosTwoZeroTwoTwo) -> (Female(x) & TennisPlayer(x)) & (Male(x) & TennisPlayer(x))))) ",
            "all x. (Male(x) & TennisPlayer(x) & At(x, RolandGarrosTwoZeroTwoTwo) -> LostTo(x, \u015bwiatek) & At(x, RolandGarrosTwoZeroTwoTwo))",
            "RankedHighlyBy(CocoGauff, WomensTennisAssociation) | (LostTo(CocoGauff, \u015bwiatek) & LostAt(CocoGauff, RolandGarrosTwoZeroTwoTwo)) -> -(Male(CocoGauff) & TennisPlayer(CocoGauff) & AtRolandGarrosTwoZeroTwoTwo(CocoGauff))",
            "TennisPlayer(CocoGauff) & At(CocoGauff, RolandGarrosTwoZeroTwoTwo)"
        ],
        "conclusion": "Coco Gauff has lost to Rafael Nadal.",
        "conclusion-FOL": "LostTo(CocoGauff, \u015bwiatek) & At(CocoGauff, RolandGarrosTwoZeroTwoTwo)",
        "label": "ERROR"
    },
    {
        "premises": [
            "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. ",
            "Everyone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.",
            "All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.",
            "All tennis players at Roland Garros 2022 are either female or male.",
            "All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.",
            "If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
            "Coco Gauff is at Roland Garros 2022."
        ],
        "premises-FOL": [
            "all x. (RankedHighlyBy(x, WomensTennisAssociation) -> MostActivePlayerIn(x, MajorTennis))",
            "all x. (LostTo(x, \u015bwiatek) &  At(x, RolandGarrosTwoZeroTwoTwo) -> RankedHighlyBy(x, WomensTennisAssociation))",
            "all x. (FemaleTennisPlayer(x) & At(x, RolandGarrosTwoZeroTwoTwo) -> LostTo(x, \u015bwiatek) &  At(x, RolandGarrosTwoZeroTwoTwo))",
            "all x. (((TennisPlayer(x) & At(x, RolandGarrosTwoZeroTwoTwo) -> (Female(x) & TennisPlayer(x)) & -(Male(x) & TennisPlayer(x))) | (-(TennisPlayer(x) & At(x, RolandGarrosTwoZeroTwoTwo) -> (Female(x) & TennisPlayer(x)) & (Male(x) & TennisPlayer(x))))) ",
            "all x. (Male(x) & TennisPlayer(x) & At(x, RolandGarrosTwoZeroTwoTwo) -> LostTo(x, \u015bwiatek) & At(x, RolandGarrosTwoZeroTwoTwo))",
            "RankedHighlyBy(CocoGauff, WomensTennisAssociation) | (LostTo(CocoGauff, \u015bwiatek) & LostAt(CocoGauff, RolandGarrosTwoZeroTwoTwo)) -> -(Male(CocoGauff) & TennisPlayer(CocoGauff) & AtRolandGarrosTwoZeroTwoTwo(CocoGauff))",
            "TennisPlayer(CocoGauff) & At(CocoGauff, RolandGarrosTwoZeroTwoTwo)"
        ],
        "conclusion": "Coco Gauff is not both a player who lost to Iga \u015awi\u0105tek at Roland Garros 2022 and one of the most active players in major tennis.",
        "conclusion-FOL": "-(LostTo(CocoGauff, \u015bwiatek) & At(CocoGauff, RolandGarrosTwoZeroTwoTwo)) | -MostActivePlayerIn(CocoGauff, MajorTennis)",
        "label": "ERROR"
    },
    {
        "premises": [
            "All cats are mammals.",
            "Some pets are not mammals."
        ],
        "premises-FOL": [
            "all x. (Cat(x) -> Mammal(x))",
            "exists x. (Pet(x) & -Mammal(x))"
        ],
        "conclusion": "No pets are cats.",
        "conclusion-FOL": "all x. (Pet(x) -> -Cat(x))",
        "label": "Uncertain"
    },
    {
        "premises": [
            "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
            "All students who want to have a long vacation have summer as their favorite season.",
            "Emma's favorite season is summer.",
            "Mia's favorite season is not the same as Emma's. ",
            "James wants to have a long vacation."
        ],
        "premises-FOL": [
            "Season(Spring) | Season(Summer) | Season(Fall) | Season(Winter) & (Season(Spring) -> -Season(Summer) & -Season(Fall) & -Season(Winter)) & (Season(Summer) -> -Season(Spring) & -Season(Fall) & -Season(Winter)) & (Season(Fall) -> -Season(Spring) & -Season(Summer) & -Season(Winter)) & (Season(Winter) -> -Season(Spring) & -Season(Summer) & -Season(Fall))",
            "all x. (Want(x, Longvacation) -> Favorite(x, Summer))",
            "Favorite(Emma, Summer)",
            "all x. all y. (Season(x) & Season(y) & Favorite(Mia, x) & Favorite(Emma, y) -> -(x=y))",
            "Want(James, LongVacation)"
        ],
        "conclusion": "James's favorite season is summer.",
        "conclusion-FOL": "Favorite(James, Summer)",
        "label": "ERROR"
    },
    {
        "premises": [
            "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
            "All students who want to have a long vacation have summer as their favorite season.",
            "Emma's favorite season is summer.",
            "Mia's favorite season is not the same as Emma's. ",
            "James wants to have a long vacation."
        ],
        "premises-FOL": [
            "Season(Spring) | Season(Summer) | Season(Fall) | Season(Winter) & (Season(Spring) -> -Season(Summer) & -Season(Fall) & -Season(Winter)) & (Season(Summer) -> -Season(Spring) & -Season(Fall) & -Season(Winter)) & (Season(Fall) -> -Season(Spring) & -Season(Summer) & -Season(Winter)) & (Season(Winter) -> -Season(Spring) & -Season(Summer) & -Season(Fall))",
            "all x. (Want(x, Longvacation) -> Favorite(x, Summer))",
            "Favorite(Emma, Summer)",
            "all x. all y. (Season(x) & Season(y) & Favorite(Mia, x) & Favorite(Emma, y) -> -(x=y))",
            "Want(James, LongVacation)"
        ],
        "conclusion": "Mia's favorite season is spring.",
        "conclusion-FOL": "Favorite(Mia, Spring)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "No digital media are analog.",
            "Every printed text is analog media.",
            "All streaming services are digital media.",
            "If an object is a hardcover book, then it is printed text.",
            "If 1984 is a streaming service, then 1984 is a hardcover book."
        ],
        "premises-FOL": [
            "all x. (DigitalMedia(x) -> -AnalogMedia(x))",
            "all x. (PrintedText(x) -> AnalogMedia(x))",
            "all x. (StreamingService(x) -> DigitalMedia(x))",
            "all x. (HardcoverBook(x) -> PrintedText(x))",
            "StreamingService(OneNineEightFour) -> HardcoverBook(OneNineEightFour)"
        ],
        "conclusion": "1984 is printed text.",
        "conclusion-FOL": "PrintedText(yOneNineEightFour)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "No digital media are analog.",
            "Every printed text is analog media.",
            "All streaming services are digital media.",
            "If an object is a hardcover book, then it is printed text.",
            "If 1984 is a streaming service, then 1984 is a hardcover book."
        ],
        "premises-FOL": [
            "all x. (DigitalMedia(x) -> -AnalogMedia(x))",
            "all x. (PrintedText(x) -> AnalogMedia(x))",
            "all x. (StreamingService(x) -> DigitalMedia(x))",
            "all x. (HardcoverBook(x) -> PrintedText(x))",
            "StreamingService(OneNineEightFour) -> HardcoverBook(OneNineEightFour)"
        ],
        "conclusion": "1984 is a streaming service.",
        "conclusion-FOL": "StreamingService(yOneNineEightFour)",
        "label": "ERROR"
    },
    {
        "premises": [
            "No digital media are analog.",
            "Every printed text is analog media.",
            "All streaming services are digital media.",
            "If an object is a hardcover book, then it is printed text.",
            "If 1984 is a streaming service, then 1984 is a hardcover book."
        ],
        "premises-FOL": [
            "all x. (DigitalMedia(x) -> -AnalogMedia(x))",
            "all x. (PrintedText(x) -> AnalogMedia(x))",
            "all x. (StreamingService(x) -> DigitalMedia(x))",
            "all x. (HardcoverBook(x) -> PrintedText(x))",
            "StreamingService(OneNineEightFour) -> HardcoverBook(OneNineEightFour)"
        ],
        "conclusion": "1984 is not a streaming service.",
        "conclusion-FOL": "-StreamingService(yOneNineEightFour)",
        "label": "ERROR"
    },
    {
        "premises": [
            "All Romance languages are Indo-European languages.",
            "Romance languages are a language family.",
            "All languages within a language family are related to each other.",
            "French and Spanish are both Romance languages.",
            "German is related to Spanish.",
            "Basque is not related to any other language."
        ],
        "premises-FOL": [
            "all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))",
            "all x. (RomanceLanguage(x) -> MemberOf(x, LanguageFamily))",
            "all x. all y. all z. ((MemberOf(x, z) & MemberOf(y, z)) -> (Related(x, y) & Related(y, x)))",
            "RomanceLanguage(French) & RomanceLanguage(Spanish)",
            "Related(German, Spanish)",
            "all x. (Language(x) -> -Related(Basque, x))"
        ],
        "conclusion": "Basque is a Romance language.",
        "conclusion-FOL": "RomanceLanguage(Basque)",
        "label": "ERROR"
    },
    {
        "premises": [
            "All Romance languages are Indo-European languages.",
            "Romance languages are a language family.",
            "All languages within a language family are related to each other.",
            "French and Spanish are both Romance languages.",
            "German is related to Spanish.",
            "Basque is not related to any other language."
        ],
        "premises-FOL": [
            "all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))",
            "all x. (RomanceLanguage(x) -> MemberOf(x, LanguageFamily))",
            "all x. all y. all z. ((MemberOf(x, z) & MemberOf(y, z)) -> (Related(x, y) & Related(y, x)))",
            "RomanceLanguage(French) & RomanceLanguage(Spanish)",
            "Related(German, Spanish)",
            "all x. (Language(x) -> -Related(Basque, x))"
        ],
        "conclusion": "German is a Romance language.",
        "conclusion-FOL": "RomanceLanguage(German)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "All Romance languages are Indo-European languages.",
            "Romance languages are a language family.",
            "All languages within a language family are related to each other.",
            "French and Spanish are both Romance languages.",
            "German is related to Spanish.",
            "Basque is not related to any other language."
        ],
        "premises-FOL": [
            "all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))",
            "all x. (RomanceLanguage(x) -> MemberOf(x, LanguageFamily))",
            "all x. all y. all z. ((MemberOf(x, z) & MemberOf(y, z)) -> (Related(x, y) & Related(y, x)))",
            "RomanceLanguage(French) & RomanceLanguage(Spanish)",
            "Related(German, Spanish)",
            "all x. (Language(x) -> -Related(Basque, x))"
        ],
        "conclusion": "French is an Indo-European language.",
        "conclusion-FOL": "IndoEuropeanLanguage(French)",
        "label": "True"
    },
    {
        "premises": [
            "Robert Lewandowski is a striker.",
            "Strikers are soccer players.",
            "Robert Lewandowski left Bayern Munchen.",
            "If a player leaves a team they no longer play for that team."
        ],
        "premises-FOL": [
            "Striker(RobertLewandowski)",
            "all x. (Striker(x) -> SoccerPlayer(x))",
            "Left(RobertLewandowski, BayernMunchen)",
            "all x. all y. (Left(x, y) -> -PlaysFor(x, y))"
        ],
        "conclusion": "Robert Lewandowski is a soccer player.",
        "conclusion-FOL": "SoccerPlayer(RobertLewandowski)",
        "label": "True"
    },
    {
        "premises": [
            "Robert Lewandowski is a striker.",
            "Strikers are soccer players.",
            "Robert Lewandowski left Bayern Munchen.",
            "If a player leaves a team they no longer play for that team."
        ],
        "premises-FOL": [
            "Striker(RobertLewandowski)",
            "all x. (Striker(x) -> SoccerPlayer(x))",
            "Left(RobertLewandowski, BayernMunchen)",
            "all x. all y. (Left(x, y) -> -PlaysFor(x, y))"
        ],
        "conclusion": "Robert Lewandowski plays for Bayern Munchen.",
        "conclusion-FOL": "PlaysFor(RobertLewandowski, BayernMunchen)",
        "label": "False"
    },
    {
        "premises": [
            "Robert Lewandowski is a striker.",
            "Strikers are soccer players.",
            "Robert Lewandowski left Bayern Munchen.",
            "If a player leaves a team they no longer play for that team."
        ],
        "premises-FOL": [
            "Striker(RobertLewandowski)",
            "all x. (Striker(x) -> SoccerPlayer(x))",
            "Left(RobertLewandowski, BayernMunchen)",
            "all x. all y. (Left(x, y) -> -PlaysFor(x, y))"
        ],
        "conclusion": "Robert Lewandowski is a star.",
        "conclusion-FOL": "SoccerStar(RobertLewandowski)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "Billings is a city in the state of Montana in U.S.",
            "The state of Montana includes the cities of Butte, Helena, and Missoula.",
            "White Sulphur Springs and Butte are cities in the same state in U.S.",
            "The city of St Pierre is not in the state of Montana.",
            "Any city in Butte is not in St Pierre.",
            "A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City."
        ],
        "premises-FOL": [
            "City(Billings) & In(Billings, Montana)",
            "City(Butte) & In(Butte, Montana) & City(Helena) & In(Helena, Montana) & City(Missoula) & In(Missoula, Montana)",
            "exists x. (City(Whitesulphursprings) & In(Whitesulphursprings, x) & City(Butte) & In(Butte, x))",
            "City(Pierre) & -(In(Pierre, Montana))",
            "all x. ((City(x) & City(Butte) & In(x, Butte)) -> -(In(x, Pierre)))",
            "all x. exists y. ((City(x) & (In(x, y) & -(x=Bristol) & -(x=Texarkana) & -(x=Texhoma) & -(x=UnionCity)) -> -exists z. (-(z=y) & In(x, z)))"
        ],
        "conclusion": "Butte and St Pierre are in the same state.",
        "conclusion-FOL": "exists x. (In(Butte, x) & In(StPierre, x))",
        "label": "ERROR"
    },
    {
        "premises": [
            "Billings is a city in the state of Montana in U.S.",
            "The state of Montana includes the cities of Butte, Helena, and Missoula.",
            "White Sulphur Springs and Butte are cities in the same state in U.S.",
            "The city of St Pierre is not in the state of Montana.",
            "Any city in Butte is not in St Pierre.",
            "A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City."
        ],
        "premises-FOL": [
            "City(Billings) & In(Billings, Montana)",
            "City(Butte) & In(Butte, Montana) & City(Helena) & In(Helena, Montana) & City(Missoula) & In(Missoula, Montana)",
            "exists x. (City(Whitesulphursprings) & In(Whitesulphursprings, x) & City(Butte) & In(Butte, x))",
            "City(Pierre) & -(In(Pierre, Montana))",
            "all x. ((City(x) & City(Butte) & In(x, Butte)) -> -(In(x, Pierre)))",
            "all x. exists y. ((City(x) & (In(x, y) & -(x=Bristol) & -(x=Texarkana) & -(x=Texhoma) & -(x=UnionCity)) -> -exists z. (-(z=y) & In(x, z)))"
        ],
        "conclusion": "St Pierre and Bismarck are in the same state.",
        "conclusion-FOL": "exists x. (City(Pierre) & In(Pierre, x) & City(Bismarck) & In(Bismarck, x))",
        "label": "ERROR"
    },
    {
        "premises": [
            "Billings is a city in the state of Montana in U.S.",
            "The state of Montana includes the cities of Butte, Helena, and Missoula.",
            "White Sulphur Springs and Butte are cities in the same state in U.S.",
            "The city of St Pierre is not in the state of Montana.",
            "Any city in Butte is not in St Pierre.",
            "A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City."
        ],
        "premises-FOL": [
            "City(Billings) & In(Billings, Montana)",
            "City(Butte) & In(Butte, Montana) & City(Helena) & In(Helena, Montana) & City(Missoula) & In(Missoula, Montana)",
            "exists x. (City(Whitesulphursprings) & In(Whitesulphursprings, x) & City(Butte) & In(Butte, x))",
            "City(Pierre) & -(In(Pierre, Montana))",
            "all x. ((City(x) & City(Butte) & In(x, Butte)) -> -(In(x, Pierre)))",
            "all x. exists y. ((City(x) & (In(x, y) & -(x=Bristol) & -(x=Texarkana) & -(x=Texhoma) & -(x=UnionCity)) -> -exists z. (-(z=y) & In(x, z)))"
        ],
        "conclusion": "Montana is home to the city of Missoula.",
        "conclusion-FOL": "City(Missoula) & In(Missoula, Montana)",
        "label": "ERROR"
    },
    {
        "premises": [
            "International students in the US have either an F1 visa or a J1 visa.",
            "An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
            "Mike is an international student.",
            "Mike needs to apply for CPT if he wants to work in the US."
        ],
        "premises-FOL": [
            "all x. (InternationalStudent(x) & In(x, UnitedStates) -> ((FOneVisa(x) & -JOneVisa(x)) | (-FOneVisa(x) & JOneVisa(x))))",
            "all x. (InternationalStudent(x) & In(x, UnitedStates) & FOneVisa(x) & WantToWorkIn(x, UnitedStates) -> Apply(x, Cpt) | Apply(x, Opt))",
            "InternationalStudent(Mike)",
            "WantToWorkIn(x, UnitedStates) -> Apply(Mike, Cpt)"
        ],
        "conclusion": "Mike has an F1 visa.",
        "conclusion-FOL": "FOneVisa(Mike)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "International students in the US have either an F1 visa or a J1 visa.",
            "An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
            "Mike is an international student.",
            "Mike needs to apply for CPT if he wants to work in the US."
        ],
        "premises-FOL": [
            "all x. (InternationalStudent(x) & In(x, UnitedStates) -> ((FOneVisa(x) & -JOneVisa(x)) | (-FOneVisa(x) & JOneVisa(x))))",
            "all x. (InternationalStudent(x) & In(x, UnitedStates) & FOneVisa(x) & WantToWorkIn(x, UnitedStates) -> Apply(x, Cpt) | Apply(x, Opt))",
            "InternationalStudent(Mike)",
            "WantToWorkIn(x, UnitedStates) -> Apply(Mike, Cpt)"
        ],
        "conclusion": "Mike has a J1 visa.",
        "conclusion-FOL": "JOneVisa(Mike)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "All Brown Swiss cattle are cows.",
            "Some pets are Brown Swiss Cattle.",
            "All cows are domesticated animals.",
            "Alligators are not domesticated animals.",
            "Ted is an alligator."
        ],
        "premises-FOL": [
            "all x. (BrownSwissCattle(x) -> Cow(x))",
            "exists x. (Pet(x) & BrownSwissCattle(x))",
            "all x. (Cow(x) -> DomesticatedAnimal(x))",
            "all x. (Aligator(x) -> -DomesticatedAnimal(x))",
            "Aligator(Ted)"
        ],
        "conclusion": "Ted is a pet.",
        "conclusion-FOL": "Pet(Ted)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "All Brown Swiss cattle are cows.",
            "Some pets are Brown Swiss Cattle.",
            "All cows are domesticated animals.",
            "Alligators are not domesticated animals.",
            "Ted is an alligator."
        ],
        "premises-FOL": [
            "all x. (BrownSwissCattle(x) -> Cow(x))",
            "exists x. (Pet(x) & BrownSwissCattle(x))",
            "all x. (Cow(x) -> DomesticatedAnimal(x))",
            "all x. (Aligator(x) -> -DomesticatedAnimal(x))",
            "Aligator(Ted)"
        ],
        "conclusion": "Ted is a pet and Brown Swiss cattle",
        "conclusion-FOL": "Pet(Ted) & BrownSwissCattle(Ted)",
        "label": "False"
    },
    {
        "premises": [
            "All Brown Swiss cattle are cows.",
            "Some pets are Brown Swiss Cattle.",
            "All cows are domesticated animals.",
            "Alligators are not domesticated animals.",
            "Ted is an alligator."
        ],
        "premises-FOL": [
            "all x. (BrownSwissCattle(x) -> Cow(x))",
            "exists x. (Pet(x) & BrownSwissCattle(x))",
            "all x. (Cow(x) -> DomesticatedAnimal(x))",
            "all x. (Aligator(x) -> -DomesticatedAnimal(x))",
            "Aligator(Ted)"
        ],
        "conclusion": "If Ted is a Brown Swiss cattle, then Ted is not a pet.",
        "conclusion-FOL": "BrownSwissCattle(Ted) -> -Pet(Ted)",
        "label": "True"
    },
    {
        "premises": [
            "Yale University is a private Ivy League research university.",
            "Yale University moved to New Haven in 1716.",
            "Yale university's endowment was valued at $42.3 billion.",
            "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
        ],
        "premises-FOL": [
            "PrivateIvyLeagueResearchUniversity(YaleUniversity)",
            "MovedTo(YaleUniversity, NewHaven) & MovedIn(YaleUniversity, YearOneSevenOneSix)",
            "ValuedAt(YaleUniversitysEndowment, FourTwopointThreebillion)",
            "all x. (((ResidentialCollege(x) -> At(x, Yale) & (((BenjaminFranklinCollege(x) & -BerkleyCollege(x)) | (-BenjaminFranklinCollege(x) & BerkleyCollege(x))) & -((BranfordCollege(x) & -DavenportCollege(x))) | (-(ResidentialCollege(x) -> At(x, Yale) & (((BenjaminFranklinCollege(x) & -BerkleyCollege(x)) | (-BenjaminFranklinCollege(x) & BerkleyCollege(x))) & ((BranfordCollege(x) & -DavenportCollege(x)))) | (((-BranfordCollege(x) & DavenportCollege(x))) & -((EzraStilesCollege(x) & -GraceHopperCollege(x))) | (-(-BranfordCollege(x) & DavenportCollege(x))) & ((EzraStilesCollege(x) & -GraceHopperCollege(x)))) | (((-EzraStilesCollege(x) & GraceHopperCollege(x))) & -((JonathanEdwardsCollege(x) & -MorseCollege(x))) | (-(-EzraStilesCollege(x) & GraceHopperCollege(x))) & ((JonathanEdwardsCollege(x) & -MorseCollege(x)))) | (((-JonathanEdwardsCollege(x) & MorseCollege(x))) & -((PauliMurrayCollege(x) & -PiersonCollege(x))) | (-(-JonathanEdwardsCollege(x) & MorseCollege(x))) & ((PauliMurrayCollege(x) & -PiersonCollege(x)))) | (((-PauliMurrayCollege(x) & PiersonCollege(x))) & -((SaybrookCollege(x) & -SillimanCollege(x))) | (-(-PauliMurrayCollege(x) & PiersonCollege(x))) & ((SaybrookCollege(x) & -SillimanCollege(x)))) | (((-SaybrookCollege(x) & SillimanCollege(x))) & -((TimothyDwightCollege(x) & -TrumbullCollege(x))) | (-(-SaybrookCollege(x) & SillimanCollege(x))) & ((TimothyDwightCollege(x) & -TrumbullCollege(x)))) | (-TimothyDwightCollege(x) & TrumbullCollege(x)))))"
        ],
        "conclusion": "A private Ivy League research university moved to New Haven.",
        "conclusion-FOL": "exists x. (PrivateIvyLeagueResearchUniversity(x) & MovedTo(x, NewHaven))",
        "label": "ERROR"
    },
    {
        "premises": [
            "Yale University is a private Ivy League research university.",
            "Yale University moved to New Haven in 1716.",
            "Yale university's endowment was valued at $42.3 billion.",
            "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
        ],
        "premises-FOL": [
            "PrivateIvyLeagueResearchUniversity(YaleUniversity)",
            "MovedTo(YaleUniversity, NewHaven) & MovedIn(YaleUniversity, YearOneSevenOneSix)",
            "ValuedAt(YaleUniversitysEndowment, FourTwopointThreebillion)",
            "all x. (((ResidentialCollege(x) -> At(x, Yale) & (((BenjaminFranklinCollege(x) & -BerkleyCollege(x)) | (-BenjaminFranklinCollege(x) & BerkleyCollege(x))) & -((BranfordCollege(x) & -DavenportCollege(x))) | (-(ResidentialCollege(x) -> At(x, Yale) & (((BenjaminFranklinCollege(x) & -BerkleyCollege(x)) | (-BenjaminFranklinCollege(x) & BerkleyCollege(x))) & ((BranfordCollege(x) & -DavenportCollege(x)))) | (((-BranfordCollege(x) & DavenportCollege(x))) & -((EzraStilesCollege(x) & -GraceHopperCollege(x))) | (-(-BranfordCollege(x) & DavenportCollege(x))) & ((EzraStilesCollege(x) & -GraceHopperCollege(x)))) | (((-EzraStilesCollege(x) & GraceHopperCollege(x))) & -((JonathanEdwardsCollege(x) & -MorseCollege(x))) | (-(-EzraStilesCollege(x) & GraceHopperCollege(x))) & ((JonathanEdwardsCollege(x) & -MorseCollege(x)))) | (((-JonathanEdwardsCollege(x) & MorseCollege(x))) & -((PauliMurrayCollege(x) & -PiersonCollege(x))) | (-(-JonathanEdwardsCollege(x) & MorseCollege(x))) & ((PauliMurrayCollege(x) & -PiersonCollege(x)))) | (((-PauliMurrayCollege(x) & PiersonCollege(x))) & -((SaybrookCollege(x) & -SillimanCollege(x))) | (-(-PauliMurrayCollege(x) & PiersonCollege(x))) & ((SaybrookCollege(x) & -SillimanCollege(x)))) | (((-SaybrookCollege(x) & SillimanCollege(x))) & -((TimothyDwightCollege(x) & -TrumbullCollege(x))) | (-(-SaybrookCollege(x) & SillimanCollege(x))) & ((TimothyDwightCollege(x) & -TrumbullCollege(x)))) | (-TimothyDwightCollege(x) & TrumbullCollege(x)))))"
        ],
        "conclusion": "Yale University has the largest university endowment of any educational institution.",
        "conclusion-FOL": "LargestUniversityEndowmentOf(Yale, AnyEducationalInstitution)",
        "label": "ERROR"
    },
    {
        "premises": [
            "Yale University is a private Ivy League research university.",
            "Yale University moved to New Haven in 1716.",
            "Yale university's endowment was valued at $42.3 billion.",
            "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
        ],
        "premises-FOL": [
            "PrivateIvyLeagueResearchUniversity(YaleUniversity)",
            "MovedTo(YaleUniversity, NewHaven) & MovedIn(YaleUniversity, YearOneSevenOneSix)",
            "ValuedAt(YaleUniversitysEndowment, FourTwopointThreebillion)",
            "all x. (((ResidentialCollege(x) -> At(x, Yale) & (((BenjaminFranklinCollege(x) & -BerkleyCollege(x)) | (-BenjaminFranklinCollege(x) & BerkleyCollege(x))) & -((BranfordCollege(x) & -DavenportCollege(x))) | (-(ResidentialCollege(x) -> At(x, Yale) & (((BenjaminFranklinCollege(x) & -BerkleyCollege(x)) | (-BenjaminFranklinCollege(x) & BerkleyCollege(x))) & ((BranfordCollege(x) & -DavenportCollege(x)))) | (((-BranfordCollege(x) & DavenportCollege(x))) & -((EzraStilesCollege(x) & -GraceHopperCollege(x))) | (-(-BranfordCollege(x) & DavenportCollege(x))) & ((EzraStilesCollege(x) & -GraceHopperCollege(x)))) | (((-EzraStilesCollege(x) & GraceHopperCollege(x))) & -((JonathanEdwardsCollege(x) & -MorseCollege(x))) | (-(-EzraStilesCollege(x) & GraceHopperCollege(x))) & ((JonathanEdwardsCollege(x) & -MorseCollege(x)))) | (((-JonathanEdwardsCollege(x) & MorseCollege(x))) & -((PauliMurrayCollege(x) & -PiersonCollege(x))) | (-(-JonathanEdwardsCollege(x) & MorseCollege(x))) & ((PauliMurrayCollege(x) & -PiersonCollege(x)))) | (((-PauliMurrayCollege(x) & PiersonCollege(x))) & -((SaybrookCollege(x) & -SillimanCollege(x))) | (-(-PauliMurrayCollege(x) & PiersonCollege(x))) & ((SaybrookCollege(x) & -SillimanCollege(x)))) | (((-SaybrookCollege(x) & SillimanCollege(x))) & -((TimothyDwightCollege(x) & -TrumbullCollege(x))) | (-(-SaybrookCollege(x) & SillimanCollege(x))) & ((TimothyDwightCollege(x) & -TrumbullCollege(x)))) | (-TimothyDwightCollege(x) & TrumbullCollege(x)))))"
        ],
        "conclusion": "Pierson College is a residential college at Yale.",
        "conclusion-FOL": "ResidentialCollege(PiersonCollege) & At(PiersonCollege, Yale)",
        "label": "ERROR"
    },
    {
        "premises": [
            "Badults is a British Sitcom series starring members of Pappy's.",
            "Badults was piloted in July 2013 on BBC Three.",
            "The Working title \"The Secret Dude Society\" was used for Badults.",
            "Andrew Collins was the script editor for Badults."
        ],
        "premises-FOL": [
            "exists x. (BritishSitcom(Badults) & Series(Badults) & MemberOf(x, Pappys) & Starring(Badults, x))",
            "PilotedIn(Badults, JulyTwoZeroOneThree) & PilotedOn(Badults, bBCThree)",
            "WorkingTitle(TheSecretDudeSociety, Badults) & UsedFor(TheSecretDudeSociety, Badults)",
            "ScriptEditorFor(AndrewCollins, Badults)"
        ],
        "conclusion": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
        "conclusion-FOL": "exists x. (ScriptEditorFor(AndrewCollins, x) & Series(x) & WorkingTitle(TheSecretDudeSociety, x))",
        "label": "True"
    },
    {
        "premises": [
            "Badults is a British Sitcom series starring members of Pappy's.",
            "Badults was piloted in July 2013 on BBC Three.",
            "The Working title \"The Secret Dude Society\" was used for Badults.",
            "Andrew Collins was the script editor for Badults."
        ],
        "premises-FOL": [
            "exists x. (BritishSitcom(Badults) & Series(Badults) & MemberOf(x, Pappys) & Starring(Badults, x))",
            "PilotedIn(Badults, JulyTwoZeroOneThree) & PilotedOn(Badults, bBCThree)",
            "WorkingTitle(TheSecretDudeSociety, Badults) & UsedFor(TheSecretDudeSociety, Badults)",
            "ScriptEditorFor(AndrewCollins, Badults)"
        ],
        "conclusion": "No members of Pappy's have starred in a show piloting on BBC Two or BBC Three.",
        "conclusion-FOL": "all x. all y. (MemberOf(x, Pappys) & Starring(y, x) -> -(PilotedOn(y, bBCTwo) | PilotedOn(y, bBCThree)))",
        "label": "False"
    },
    {
        "premises": [
            "All growth stocks are bought to earn profits from rapid price appreciation.",
            "If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.",
            "Some stocks are growth stocks.",
            "All mature stocks are suitable for a retirement fund.",
            "KO is a mature stock."
        ],
        "premises-FOL": [
            "all x. (GrowthStock(x) -> BoughtToEarnProfitFrom(x, RapidPriceAppreciation))",
            "all x. (BoughtToEarnProfitFrom(x, EarnProfit, RapidPriceAppreciation) -> -SuitableFor(x, RetirementFund)) ",
            "exists x. (Stock(x) & GrowthStock(x))",
            "all x. (MatureStock(x) -> SuitableFor(x, RetirementFund))",
            "MatureStock(kO)"
        ],
        "conclusion": "KO is a stock.",
        "conclusion-FOL": "Stock(kO)",
        "label": "ERROR"
    },
    {
        "premises": [
            "All growth stocks are bought to earn profits from rapid price appreciation.",
            "If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.",
            "Some stocks are growth stocks.",
            "All mature stocks are suitable for a retirement fund.",
            "KO is a mature stock."
        ],
        "premises-FOL": [
            "all x. (GrowthStock(x) -> BoughtToEarnProfitFrom(x, RapidPriceAppreciation))",
            "all x. (BoughtToEarnProfitFrom(x, EarnProfit, RapidPriceAppreciation) -> -SuitableFor(x, RetirementFund)) ",
            "exists x. (Stock(x) & GrowthStock(x))",
            "all x. (MatureStock(x) -> SuitableFor(x, RetirementFund))",
            "MatureStock(kO)"
        ],
        "conclusion": "KO is a stock and a growth stock.",
        "conclusion-FOL": "-GrowthStock(kO)",
        "label": "ERROR"
    },
    {
        "premises": [
            "All growth stocks are bought to earn profits from rapid price appreciation.",
            "If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.",
            "Some stocks are growth stocks.",
            "All mature stocks are suitable for a retirement fund.",
            "KO is a mature stock."
        ],
        "premises-FOL": [
            "all x. (GrowthStock(x) -> BoughtToEarnProfitFrom(x, RapidPriceAppreciation))",
            "all x. (BoughtToEarnProfitFrom(x, EarnProfit, RapidPriceAppreciation) -> -SuitableFor(x, RetirementFund)) ",
            "exists x. (Stock(x) & GrowthStock(x))",
            "all x. (MatureStock(x) -> SuitableFor(x, RetirementFund))",
            "MatureStock(kO)"
        ],
        "conclusion": "If KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile.",
        "conclusion-FOL": "GrowthStock(kO) | BoughtToEarnProfitFrom(kO, EarnProfit, RapidPriceAppreciation) -> -Stock(kO) & -BoughtToEarnProfitFrom(kO, RapidPriceAppreciation)",
        "label": "ERROR"
    },
    {
        "premises": [
            "All vehicle registration plates in Istanbul begin with the number 34.",
            "Plates that do not begin with the number 34 are not from Istanbul. ",
            "Joe's vehicle registration plate is from Istanbul. ",
            "Tom's license plate begins with the number 35. ",
            "If a license plate begins with the number 35, then it does not begin with the number 34."
        ],
        "premises-FOL": [
            "all x. (VehicleRegistrationPlateIn(x, Istanbul) -> BeginWith(x, NumThreeFour))",
            "all x. (-BeginWith(x, NumThreeFour) -> -FromIstanbul(x))",
            "exists x. (Owns(Joe, x) & VehicleRegistrationPlateIn(x, Istanbul))",
            "exists x. (Owns(Tom, x) & BeginWith(x, NumThreeFive))",
            "all x. (BeginWith(x, NumThreeFive) -> -BeginWith(x, NumThreeFour))"
        ],
        "conclusion": "Joe's license plate begins with the number 34.",
        "conclusion-FOL": "exists x. (Owns(Joe, x) & BeginWith(x, NumThreeFour))",
        "label": "True"
    },
    {
        "premises": [
            "All vehicle registration plates in Istanbul begin with the number 34.",
            "Plates that do not begin with the number 34 are not from Istanbul. ",
            "Joe's vehicle registration plate is from Istanbul. ",
            "Tom's license plate begins with the number 35. ",
            "If a license plate begins with the number 35, then it does not begin with the number 34."
        ],
        "premises-FOL": [
            "all x. (VehicleRegistrationPlateIn(x, Istanbul) -> BeginWith(x, NumThreeFour))",
            "all x. (-BeginWith(x, NumThreeFour) -> -FromIstanbul(x))",
            "exists x. (Owns(Joe, x) & VehicleRegistrationPlateIn(x, Istanbul))",
            "exists x. (Owns(Tom, x) & BeginWith(x, NumThreeFive))",
            "all x. (BeginWith(x, NumThreeFive) -> -BeginWith(x, NumThreeFour))"
        ],
        "conclusion": "Tom's license plate is from Istanbul.",
        "conclusion-FOL": "exists x. (Owns(Tom, x) & VehicleRegistrationPlateIn(x, Istanbul))",
        "label": "ERROR"
    },
    {
        "premises": [
            "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
            "If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.",
            "People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
            "Hannah is at Mary's school.",
            "Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition."
        ],
        "premises-FOL": [
            "all x. (At(x, MarysSchool) & WorkIn(x, StudentJob, Campus) -> NeedToEarnMoneyToHelpPayFor(x, CollegeTuition))",
            "all x. (At(x, MarysSchool) & OrderFrequently(x, Takeout) -> WorkIn(x, StudentJob, Campus))",
            "all x. (At(x, MarysSchool) & (OrderFrequently(x, Takeout) | Enjoy(x, DiningHallMeal)))",
            "all x. (At(x, MarysSchool) & Enjoy(x, DiningHallMeal) -> -PickyEater(x))",
            "all x. (At(x, MarysSchool) & Enjoy(x, DiningHallMeal) -> Spend(x, aLotOfTime, Eating) & Spend(x, aLotOfTime, CatchingUpWithFriends, DiningHall))",
            "At(Hannah, MarysSchool)",
            "(WorkIn(Hannah, StudentJob, Campus) & NeedToEarnMoneyToHelpPayFor(Hannah, CollegeTuition) -> -(PickyEater(Hannah) | NeedToEarnMoneyToHelpPayFor(Hannah, CollegeTuition))"
        ],
        "conclusion": "Hannah needs to earn money to help pay for her college tuition.",
        "conclusion-FOL": "NeedToEarnMoneyToHelpPayFor(Hannah, CollegeTuition)",
        "label": "ERROR"
    },
    {
        "premises": [
            "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
            "If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.",
            "People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
            "Hannah is at Mary's school.",
            "Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition."
        ],
        "premises-FOL": [
            "all x. (At(x, MarysSchool) & WorkIn(x, StudentJob, Campus) -> NeedToEarnMoneyToHelpPayFor(x, CollegeTuition))",
            "all x. (At(x, MarysSchool) & OrderFrequently(x, Takeout) -> WorkIn(x, StudentJob, Campus))",
            "all x. (At(x, MarysSchool) & (OrderFrequently(x, Takeout) | Enjoy(x, DiningHallMeal)))",
            "all x. (At(x, MarysSchool) & Enjoy(x, DiningHallMeal) -> -PickyEater(x))",
            "all x. (At(x, MarysSchool) & Enjoy(x, DiningHallMeal) -> Spend(x, aLotOfTime, Eating) & Spend(x, aLotOfTime, CatchingUpWithFriends, DiningHall))",
            "At(Hannah, MarysSchool)",
            "(WorkIn(Hannah, StudentJob, Campus) & NeedToEarnMoneyToHelpPayFor(Hannah, CollegeTuition) -> -(PickyEater(Hannah) | NeedToEarnMoneyToHelpPayFor(Hannah, CollegeTuition))"
        ],
        "conclusion": "Hannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
        "conclusion-FOL": "-(PickyEater(Hannah) & Spend(Hannah, aLotOfTime, Eating) & Spend(Hannah, aLotOfTime, CatchingUpWithFriends, DiningHall))",
        "label": "ERROR"
    },
    {
        "premises": [
            "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
            "If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.",
            "People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
            "Hannah is at Mary's school.",
            "Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition."
        ],
        "premises-FOL": [
            "all x. (At(x, MarysSchool) & WorkIn(x, StudentJob, Campus) -> NeedToEarnMoneyToHelpPayFor(x, CollegeTuition))",
            "all x. (At(x, MarysSchool) & OrderFrequently(x, Takeout) -> WorkIn(x, StudentJob, Campus))",
            "all x. (At(x, MarysSchool) & (OrderFrequently(x, Takeout) | Enjoy(x, DiningHallMeal)))",
            "all x. (At(x, MarysSchool) & Enjoy(x, DiningHallMeal) -> -PickyEater(x))",
            "all x. (At(x, MarysSchool) & Enjoy(x, DiningHallMeal) -> Spend(x, aLotOfTime, Eating) & Spend(x, aLotOfTime, CatchingUpWithFriends, DiningHall))",
            "At(Hannah, MarysSchool)",
            "(WorkIn(Hannah, StudentJob, Campus) & NeedToEarnMoneyToHelpPayFor(Hannah, CollegeTuition) -> -(PickyEater(Hannah) | NeedToEarnMoneyToHelpPayFor(Hannah, CollegeTuition))"
        ],
        "conclusion": "Hannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
        "conclusion-FOL": "PickyEater(Hannah) \u2295 (Spend(Hannah, aLotOfTime, Eating) & Spend(Hannah, aLotOfTime, CatchingUpWithFriends, DiningHall))",
        "label": "ERROR"
    },
    {
        "premises": [
            "No baked sweets are spicy.",
            "All cupcakes are baked sweets.",
            "All mala hotpots are spicy.",
            "All products from Baked by Melissa are cupcakes.",
            "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
        ],
        "premises-FOL": [
            "all x. (BakedSweet(x) -> -Spicy(x))",
            "all x. (Cupcake(x) -> BakedSweet(x))",
            "all x. (MalaHotpot(x) -> Spicy(x))",
            "all x. (Product(x) & From(x, BakedByMelissa) -> Cupcake(x))",
            "Spicy(DriedThaiChili) | MalaHotpot(DriedThaiChili)| -BakedSweet(DriedThaiChili)"
        ],
        "conclusion": "Dried Thai chilies are products of Baked by Melissa.",
        "conclusion-FOL": "Product(DriedThaiChili) & From(DriedThaiChili, BakedByMelissa)",
        "label": "False"
    },
    {
        "premises": [
            "No baked sweets are spicy.",
            "All cupcakes are baked sweets.",
            "All mala hotpots are spicy.",
            "All products from Baked by Melissa are cupcakes.",
            "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
        ],
        "premises-FOL": [
            "all x. (BakedSweet(x) -> -Spicy(x))",
            "all x. (Cupcake(x) -> BakedSweet(x))",
            "all x. (MalaHotpot(x) -> Spicy(x))",
            "all x. (Product(x) & From(x, BakedByMelissa) -> Cupcake(x))",
            "Spicy(DriedThaiChili) | MalaHotpot(DriedThaiChili)| -BakedSweet(DriedThaiChili)"
        ],
        "conclusion": "Dried Thai chilies are not products of Baked by Melissa.",
        "conclusion-FOL": "-(Product(DriedThaiChili) & From(DriedThaiChili, BakedByMelissa))",
        "label": "True"
    },
    {
        "premises": [
            "No baked sweets are spicy.",
            "All cupcakes are baked sweets.",
            "All mala hotpots are spicy.",
            "All products from Baked by Melissa are cupcakes.",
            "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
        ],
        "premises-FOL": [
            "all x. (BakedSweet(x) -> -Spicy(x))",
            "all x. (Cupcake(x) -> BakedSweet(x))",
            "all x. (MalaHotpot(x) -> Spicy(x))",
            "all x. (Product(x) & From(x, BakedByMelissa) -> Cupcake(x))",
            "Spicy(DriedThaiChili) | MalaHotpot(DriedThaiChili)| -BakedSweet(DriedThaiChili)"
        ],
        "conclusion": "Dried Thai chilies are a mala hotpot.",
        "conclusion-FOL": "MalaHotpot(DriedThaiChili)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "No baked sweets are spicy.",
            "All cupcakes are baked sweets.",
            "All mala hotpots are spicy.",
            "All products from Baked by Melissa are cupcakes.",
            "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
        ],
        "premises-FOL": [
            "all x. (BakedSweet(x) -> -Spicy(x))",
            "all x. (Cupcake(x) -> BakedSweet(x))",
            "all x. (MalaHotpot(x) -> Spicy(x))",
            "all x. (Product(x) & From(x, BakedByMelissa) -> Cupcake(x))",
            "Spicy(DriedThaiChili) | MalaHotpot(DriedThaiChili)| -BakedSweet(DriedThaiChili)"
        ],
        "conclusion": "Dried Thai chilies are neither products of Baked by Melissa nor baked sweets.",
        "conclusion-FOL": "-(Product(DriedThaiChili) & From(DriedThaiChili, BakedByMelissa)) & -BakedSweet(DriedThaiChili)",
        "label": "True"
    },
    {
        "premises": [
            "No baked sweets are spicy.",
            "All cupcakes are baked sweets.",
            "All mala hotpots are spicy.",
            "All products from Baked by Melissa are cupcakes.",
            "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
        ],
        "premises-FOL": [
            "all x. (BakedSweet(x) -> -Spicy(x))",
            "all x. (Cupcake(x) -> BakedSweet(x))",
            "all x. (MalaHotpot(x) -> Spicy(x))",
            "all x. (Product(x) & From(x, BakedByMelissa) -> Cupcake(x))",
            "Spicy(DriedThaiChili) | MalaHotpot(DriedThaiChili)| -BakedSweet(DriedThaiChili)"
        ],
        "conclusion": "Dried Thai chilies are cupcakes and products of Baked by Melissa.",
        "conclusion-FOL": "Cupcake(DriedThaiChili) & Product(DriedThaiChili) & From(DriedThaiChili, BakedByMelissa)",
        "label": "False"
    },
    {
        "premises": [
            "If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.",
            "All restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.",
            "Some restaurants that do not provide take-out service receive many negative reviews.",
            "All restaurants that are popular among local residents have ratings greater than four.",
            "The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents."
        ],
        "premises-FOL": [
            "all x. exists y. (ListedIn(x, YelpRecommendation) -> NegativeReview(y) & -Receive(x, y))",
            "all x. all y. (HaveRating(x, y) & GreaterThan(y, Four) -> ListedIn(x, YelpRecommendation))",
            "exists x. exists y. (-Provide(x, TakeOutService) -> NegativeReview(y) & Receive(x, y))",
            "all x. all y. (PopularAmong(x, LocalResidents) -> HaveRating(x, y) & GreaterThan(y, Four))",
            "all x. (HaveRating(HamdenPlazaSubway, x) & ((GreaterThan(x, Four) & -PopularAmong(HamdenPlazaSubway, LocalResidents)) | (-GreaterThan(x, Four) & PopularAmong(HamdenPlazaSubway, LocalResidents))))"
        ],
        "conclusion": "If the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service.",
        "conclusion-FOL": "exists x. ((TakeOutService(HamdenPlazaSubway) & NegativeReview(x) & Receive(HamdenPlazaSubway, x) -> PopularAmong(HamdenPlazaSubway, LocalResidents) & -Provide(HamdenPlazaSubway, TakeOutService))",
        "label": "ERROR"
    },
    {
        "premises": [
            "If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.",
            "All restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.",
            "Some restaurants that do not provide take-out service receive many negative reviews.",
            "All restaurants that are popular among local residents have ratings greater than four.",
            "The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents."
        ],
        "premises-FOL": [
            "all x. exists y. (ListedIn(x, YelpRecommendation) -> NegativeReview(y) & -Receive(x, y))",
            "all x. all y. (HaveRating(x, y) & GreaterThan(y, Four) -> ListedIn(x, YelpRecommendation))",
            "exists x. exists y. (-Provide(x, TakeOutService) -> NegativeReview(y) & Receive(x, y))",
            "all x. all y. (PopularAmong(x, LocalResidents) -> HaveRating(x, y) & GreaterThan(y, Four))",
            "all x. (HaveRating(HamdenPlazaSubway, x) & ((GreaterThan(x, Four) & -PopularAmong(HamdenPlazaSubway, LocalResidents)) | (-GreaterThan(x, Four) & PopularAmong(HamdenPlazaSubway, LocalResidents))))"
        ],
        "conclusion": "The Hamden Plaza Subway store provides take-out service or does not receive many negative reviews.",
        "conclusion-FOL": "exists x. (Provide(HamdenPlazaSubway, TakeOutService) | (NegativeReview(x) & -Receive(HamdenPlazaSubway, x)))",
        "label": "True"
    },
    {
        "premises": [
            "If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.",
            "All restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.",
            "Some restaurants that do not provide take-out service receive many negative reviews.",
            "All restaurants that are popular among local residents have ratings greater than four.",
            "The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents."
        ],
        "premises-FOL": [
            "all x. exists y. (ListedIn(x, YelpRecommendation) -> NegativeReview(y) & -Receive(x, y))",
            "all x. all y. (HaveRating(x, y) & GreaterThan(y, Four) -> ListedIn(x, YelpRecommendation))",
            "exists x. exists y. (-Provide(x, TakeOutService) -> NegativeReview(y) & Receive(x, y))",
            "all x. all y. (PopularAmong(x, LocalResidents) -> HaveRating(x, y) & GreaterThan(y, Four))",
            "all x. (HaveRating(HamdenPlazaSubway, x) & ((GreaterThan(x, Four) & -PopularAmong(HamdenPlazaSubway, LocalResidents)) | (-GreaterThan(x, Four) & PopularAmong(HamdenPlazaSubway, LocalResidents))))"
        ],
        "conclusion": "The Hamden Plaza store does not provide take-out service.",
        "conclusion-FOL": "-Provide(HamdenPlazaSubway, TakeOutService)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "In superhero movies, the good guys always win.",
            "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
            "Good guys fight bad guys and vice versa.",
            "Sir Digby fights his nemesis.",
            "If a superhero movie is named after a character, that character is a good guy.",
            "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
            "If somebody wins a fight, the person they are fighting does not win.",
            "If a superhero movie is named after a character, that character is in the movie."
        ],
        "premises-FOL": [
            "all x. all y. (SuperheroMovie(x) & In(y, x) & GoodGuy(y) -> Wins(y))",
            "SuperheroMovie(TheSurprisingAdventuresofSirDigbyChickenCaesar)",
            "all x. all y. (GoodGuy(x) & Fight(x, y) <-> BadGuy(y) & Fight(y, x))",
            "Fight(SirDigby, SirDigbysNemesis)",
            "all x. all y. (SuperheroMovie(x) & NamedAfter(x, y) -> GoodGuy(y))",
            "NamedAfter(TheSurprisingAdventuresofSirDigbyChickenCaesar, SirDigby)",
            "all x. all y. (Fights(x, y) & Win(x) -> -Wins(y))",
            "all x. all y. (SuperheroMovie(x) & NamedAfter(x, y) -> In(y, x))"
        ],
        "conclusion": "Sir Digby\u2019s nemesis does not win.",
        "conclusion-FOL": "-Win(SirDigbysNemesis)",
        "label": "ERROR"
    },
    {
        "premises": [
            "Books contain tons of knowledge.",
            "When a person reads a book, that person gains knowledge. ",
            "If a person gains knowledge, they become smarter.",
            "Harry read the book \u201cWalden\u201d by Henry Thoreau."
        ],
        "premises-FOL": [
            "all x. (Book(x) -> Contains(x, Knowledge))",
            "all x. all y. (ReadBook(x, y) -> Gains(x, Knowledge))",
            "all x. (Gains(x, Knowledge) -> Smarter(x))",
            "ReadBook(Harry, Walden) & Book(Walden)"
        ],
        "conclusion": "Walden contains knowledge.",
        "conclusion-FOL": "Gains(Harry, Knowledge)",
        "label": "True"
    },
    {
        "premises": [
            "Books contain tons of knowledge.",
            "When a person reads a book, that person gains knowledge. ",
            "If a person gains knowledge, they become smarter.",
            "Harry read the book \u201cWalden\u201d by Henry Thoreau."
        ],
        "premises-FOL": [
            "all x. (Book(x) -> Contains(x, Knowledge))",
            "all x. all y. (ReadBook(x, y) -> Gains(x, Knowledge))",
            "all x. (Gains(x, Knowledge) -> Smarter(x))",
            "ReadBook(Harry, Walden) & Book(Walden)"
        ],
        "conclusion": "Harry is smarter than before.",
        "conclusion-FOL": "Smarter(Harry)",
        "label": "True"
    },
    {
        "premises": [
            "Books contain tons of knowledge.",
            "When a person reads a book, that person gains knowledge. ",
            "If a person gains knowledge, they become smarter.",
            "Harry read the book \u201cWalden\u201d by Henry Thoreau."
        ],
        "premises-FOL": [
            "all x. (Book(x) -> Contains(x, Knowledge))",
            "all x. all y. (ReadBook(x, y) -> Gains(x, Knowledge))",
            "all x. (Gains(x, Knowledge) -> Smarter(x))",
            "ReadBook(Harry, Walden) & Book(Walden)"
        ],
        "conclusion": "A smarter person has gained knowledge.",
        "conclusion-FOL": "all x. (Smarter(x) -> GainKnowledge(x))",
        "label": "Uncertain"
    },
    {
        "premises": [
            "A natural language processing task can be categorized as either a language generation task or a language understanding task.",
            "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
            "Machine translation is a natural language processing task.",
            "The output of machine translation is a text sequence."
        ],
        "premises-FOL": [
            "all x. (NaturalLanguageProcessingTask(x) -> ((LanguageGenerationTask(x) & -LanguageUnderstandingTask(x)) | (-LanguageGenerationTask(x) & LanguageUnderstandingTask(x))))",
            "all x. (NaturalLanguageProcessingTasks(x) & OutputSequence(x, Text) -> LanguageGenerationTask(x))",
            "NaturalLanguageProcessingTask(MachineTranslation)",
            "OutputSequence(MachineTranslation, Text)"
        ],
        "conclusion": "Machine translation is a language generation task.",
        "conclusion-FOL": "LanguageGenerationTask(MachineTranslation)",
        "label": "ERROR"
    },
    {
        "premises": [
            "A natural language processing task can be categorized as either a language generation task or a language understanding task.",
            "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
            "Machine translation is a natural language processing task.",
            "The output of machine translation is a text sequence."
        ],
        "premises-FOL": [
            "all x. (NaturalLanguageProcessingTask(x) -> ((LanguageGenerationTask(x) & -LanguageUnderstandingTask(x)) | (-LanguageGenerationTask(x) & LanguageUnderstandingTask(x))))",
            "all x. (NaturalLanguageProcessingTasks(x) & OutputSequence(x, Text) -> LanguageGenerationTask(x))",
            "NaturalLanguageProcessingTask(MachineTranslation)",
            "OutputSequence(MachineTranslation, Text)"
        ],
        "conclusion": "Machine translation is a language understanding task.",
        "conclusion-FOL": "LanguageUnderstandingTask(MachineTranslation)",
        "label": "ERROR"
    },
    {
        "premises": [
            "Pets are allowed in some managed buildings.",
            "A deposit is required to rent an apartment in a managed building.",
            "The security deposit can be either equal to the monthly rent at a managed building or more.",
            "Fluffy is Tom's cat.",
            "Cats are pets.",
            "The Olive Garden is a managed building.",
            "The monthly rent at the Olive Garden is $2000.",
            "$2000 is more than $1500.",
            "Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
            "If a managed building allows pets, then people are allowed to move in with a pet. "
        ],
        "premises-FOL": [
            "exists x. (ManagedBuilding(x) & AllowPet(x))",
            "all x. all y. (ManagedBuilding(x) & RentApartmentIn(y, x) -> DepositRequired(y))",
            "all x. all y. all z. (SecurityDeposit(x) & ManagedBuilding(z) & MonthlyRentAt(y, z) -> (((MoreThan(x, y) & -Equal(x, y)) | (-MoreThan(x, y) & Equal(x, y))))",
            "Cat(Fluffy) & BelongTo(Fluffy, Tom)",
            "all x. (Cat(x) -> Pet(x))",
            "ManagedBuilding(OliveGarden)",
            "MonthlyRentAt(uSDTwoZeroZeroZero, OliveGarden)",
            "MoreThan(uSDTwoZeroZeroZero, uSDOneFiveZeroZero)",
            "all x. all y. (ManagedBuilding(x) & AllowedToMoveInWith(Tom, x, Fluffy) & SecurityDeposit(y) & -MoreThan(y, uSDOneFiveZeroZero) -> RentApartmentIn(Tom, x))",
            "all x. all y. all z. (ManagedBuilding(x) & AllowPet(x) & Pet(z) -> AllowedToMoveInWith(y, x, z))"
        ],
        "conclusion": "Tom will rent an apartment in The Olive Garden.",
        "conclusion-FOL": "RentApartmentIn(Tom, OliveGarden)",
        "label": "ERROR"
    },
    {
        "premises": [
            "Pets are allowed in some managed buildings.",
            "A deposit is required to rent an apartment in a managed building.",
            "The security deposit can be either equal to the monthly rent at a managed building or more.",
            "Fluffy is Tom's cat.",
            "Cats are pets.",
            "The Olive Garden is a managed building.",
            "The monthly rent at the Olive Garden is $2000.",
            "$2000 is more than $1500.",
            "Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
            "If a managed building allows pets, then people are allowed to move in with a pet. "
        ],
        "premises-FOL": [
            "exists x. (ManagedBuilding(x) & AllowPet(x))",
            "all x. all y. (ManagedBuilding(x) & RentApartmentIn(y, x) -> DepositRequired(y))",
            "all x. all y. all z. (SecurityDeposit(x) & ManagedBuilding(z) & MonthlyRentAt(y, z) -> (((MoreThan(x, y) & -Equal(x, y)) | (-MoreThan(x, y) & Equal(x, y))))",
            "Cat(Fluffy) & BelongTo(Fluffy, Tom)",
            "all x. (Cat(x) -> Pet(x))",
            "ManagedBuilding(OliveGarden)",
            "MonthlyRentAt(uSDTwoZeroZeroZero, OliveGarden)",
            "MoreThan(uSDTwoZeroZeroZero, uSDOneFiveZeroZero)",
            "all x. all y. (ManagedBuilding(x) & AllowedToMoveInWith(Tom, x, Fluffy) & SecurityDeposit(y) & -MoreThan(y, uSDOneFiveZeroZero) -> RentApartmentIn(Tom, x))",
            "all x. all y. all z. (ManagedBuilding(x) & AllowPet(x) & Pet(z) -> AllowedToMoveInWith(y, x, z))"
        ],
        "conclusion": "Tom is allowed to move into an apartment in The Olive Garden with Fluffy.",
        "conclusion-FOL": "AllowedToMoveInWith(Tom, OliveGarden, Fluffy)",
        "label": "ERROR"
    },
    {
        "premises": [
            "Pets are allowed in some managed buildings.",
            "A deposit is required to rent an apartment in a managed building.",
            "The security deposit can be either equal to the monthly rent at a managed building or more.",
            "Fluffy is Tom's cat.",
            "Cats are pets.",
            "The Olive Garden is a managed building.",
            "The monthly rent at the Olive Garden is $2000.",
            "$2000 is more than $1500.",
            "Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
            "If a managed building allows pets, then people are allowed to move in with a pet. "
        ],
        "premises-FOL": [
            "exists x. (ManagedBuilding(x) & AllowPet(x))",
            "all x. all y. (ManagedBuilding(x) & RentApartmentIn(y, x) -> DepositRequired(y))",
            "all x. all y. all z. (SecurityDeposit(x) & ManagedBuilding(z) & MonthlyRentAt(y, z) -> (((MoreThan(x, y) & -Equal(x, y)) | (-MoreThan(x, y) & Equal(x, y))))",
            "Cat(Fluffy) & BelongTo(Fluffy, Tom)",
            "all x. (Cat(x) -> Pet(x))",
            "ManagedBuilding(OliveGarden)",
            "MonthlyRentAt(uSDTwoZeroZeroZero, OliveGarden)",
            "MoreThan(uSDTwoZeroZeroZero, uSDOneFiveZeroZero)",
            "all x. all y. (ManagedBuilding(x) & AllowedToMoveInWith(Tom, x, Fluffy) & SecurityDeposit(y) & -MoreThan(y, uSDOneFiveZeroZero) -> RentApartmentIn(Tom, x))",
            "all x. all y. all z. (ManagedBuilding(x) & AllowPet(x) & Pet(z) -> AllowedToMoveInWith(y, x, z))"
        ],
        "conclusion": "The security deposit at the Olive Garden is either $2000 or more.",
        "conclusion-FOL": "all x. (SecurityDeposit(x, OliveGarden) -> ((MoreThan(x, uSDTwoZeroZeroZero) & -Equal(x, uSDTwoZeroZeroZero)) | (-MoreThan(x, uSDTwoZeroZeroZero) & Equal(x, uSDTwoZeroZeroZero))))",
        "label": "ERROR"
    },
    {
        "premises": [
            "All business organizations are legal entities.",
            "All companies are business organizations.",
            "All private companies are companies.",
            "All legal entities are created under law. ",
            "All legal entities have legal obligations.",
            "If the Harvard Weekly Book Club is created under law, then it is not a private company. "
        ],
        "premises-FOL": [
            "all x. (BusinessOrganization(x) -> LegalEntity(x))",
            "all x. (Company(x) -> BusinessOrganization(x))",
            "all x. (PrivateCompany(x) -> Company(x))",
            "all x. (LegalEntity(x) -> CreatedUnderLaw(x))",
            "all x. (LegalEntity(x) -> LegalObligation(x))",
            "CreatedUnderLaw(HarvardWeeklyBookClub) -> -PrivateCompany(HarvardWeeklyBookClub)"
        ],
        "conclusion": "The Harvard Weekly Book club has legal obligations.",
        "conclusion-FOL": "LegalObligation(HarvardWeeklyBookClub)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "All business organizations are legal entities.",
            "All companies are business organizations.",
            "All private companies are companies.",
            "All legal entities are created under law. ",
            "All legal entities have legal obligations.",
            "If the Harvard Weekly Book Club is created under law, then it is not a private company. "
        ],
        "premises-FOL": [
            "all x. (BusinessOrganization(x) -> LegalEntity(x))",
            "all x. (Company(x) -> BusinessOrganization(x))",
            "all x. (PrivateCompany(x) -> Company(x))",
            "all x. (LegalEntity(x) -> CreatedUnderLaw(x))",
            "all x. (LegalEntity(x) -> LegalObligation(x))",
            "CreatedUnderLaw(HarvardWeeklyBookClub) -> -PrivateCompany(HarvardWeeklyBookClub)"
        ],
        "conclusion": "The Harvard Weekly Book club has legal obligations and is a private company.",
        "conclusion-FOL": "LegalObligation(HarvardWeeklyBookClub) & PrivateCompany(HarvardWeeklyBookClub)",
        "label": "False"
    },
    {
        "premises": [
            "All business organizations are legal entities.",
            "All companies are business organizations.",
            "All private companies are companies.",
            "All legal entities are created under law. ",
            "All legal entities have legal obligations.",
            "If the Harvard Weekly Book Club is created under law, then it is not a private company. "
        ],
        "premises-FOL": [
            "all x. (BusinessOrganization(x) -> LegalEntity(x))",
            "all x. (Company(x) -> BusinessOrganization(x))",
            "all x. (PrivateCompany(x) -> Company(x))",
            "all x. (LegalEntity(x) -> CreatedUnderLaw(x))",
            "all x. (LegalEntity(x) -> LegalObligation(x))",
            "CreatedUnderLaw(HarvardWeeklyBookClub) -> -PrivateCompany(HarvardWeeklyBookClub)"
        ],
        "conclusion": "If the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law.",
        "conclusion-FOL": "PrivateCompany(HarvardWeeklyBookClub) -> ((LegalObligation(HarvardWeeklyBookClub) & -CreatedUnderLaw(HarvardWeeklyBookClub)) | (-LegalObligation(HarvardWeeklyBookClub) & CreatedUnderLaw(HarvardWeeklyBookClub)))",
        "label": "True"
    },
    {
        "premises": [
            "Animals are either invertebrates or vertebrates.",
            "All animals with backbones reproduce by male-and-female mating. ",
            "All vertebrate animals have a backbone.",
            "All bees do not reproduce by male-and-female mating.",
            "All queen bees are bees.",
            "Harry is a bee."
        ],
        "premises-FOL": [
            "all x. (Animal(x) -> ((Invertebrate(x) & -Vertebrate(x)) | (-Invertebrate(x) & Vertebrate(x))))",
            "all x. (Animal(x) & With(x, Backbone) -> ReproduceBy(x, Male-And-FemaleMating))",
            "all x. (Animal(x) & Vertebrate(x) -> With(x, Backbone))",
            "all x. (Bee(x) -> -ReproduceBy(x, Male-And-FemaleMating))",
            "all x. (QueenBee(x) -> Bee(x))",
            "Bee(Harry)"
        ],
        "conclusion": "Harry is a queen bee.",
        "conclusion-FOL": "QueenBee(Harry)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "Animals are either invertebrates or vertebrates.",
            "All animals with backbones reproduce by male-and-female mating. ",
            "All vertebrate animals have a backbone.",
            "All bees do not reproduce by male-and-female mating.",
            "All queen bees are bees.",
            "Harry is a bee."
        ],
        "premises-FOL": [
            "all x. (Animal(x) -> ((Invertebrate(x) & -Vertebrate(x)) | (-Invertebrate(x) & Vertebrate(x))))",
            "all x. (Animal(x) & With(x, Backbone) -> ReproduceBy(x, Male-And-FemaleMating))",
            "all x. (Animal(x) & Vertebrate(x) -> With(x, Backbone))",
            "all x. (Bee(x) -> -ReproduceBy(x, Male-And-FemaleMating))",
            "all x. (QueenBee(x) -> Bee(x))",
            "Bee(Harry)"
        ],
        "conclusion": "Harry is an invertebrate or a queen bee.",
        "conclusion-FOL": "Invertebrate(Harry) | QueenBee(Harry)",
        "label": "ERROR"
    },
    {
        "premises": [
            "Animals are either invertebrates or vertebrates.",
            "All animals with backbones reproduce by male-and-female mating. ",
            "All vertebrate animals have a backbone.",
            "All bees do not reproduce by male-and-female mating.",
            "All queen bees are bees.",
            "Harry is a bee."
        ],
        "premises-FOL": [
            "all x. (Animal(x) -> ((Invertebrate(x) & -Vertebrate(x)) | (-Invertebrate(x) & Vertebrate(x))))",
            "all x. (Animal(x) & With(x, Backbone) -> ReproduceBy(x, Male-And-FemaleMating))",
            "all x. (Animal(x) & Vertebrate(x) -> With(x, Backbone))",
            "all x. (Bee(x) -> -ReproduceBy(x, Male-And-FemaleMating))",
            "all x. (QueenBee(x) -> Bee(x))",
            "Bee(Harry)"
        ],
        "conclusion": "If Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee.",
        "conclusion-FOL": "-(((Invertebrate(Harry) & -With(Harry, Backbone)) | (-Invertebrate(Harry) & With(Harry, Backbone)))) -> -Invertebrate(Harry) & -QueenBee(Harry)",
        "label": "ERROR"
    },
    {
        "premises": [
            "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.",
            "If people have siblings who were born together, then they were born in a multiple birth.",
            "If people complain often about annoying siblings, then they have siblings who were born together.",
            "If people live at home, then they do not live with strangers.",
            "If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. ",
            "Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers"
        ],
        "premises-FOL": [
            "all x. (BornIn(x, MultipleBirth) -> SpendTimePlayingWith(x, Sibling))",
            "all x. (exists y. (Sibling(x, y) & BornTogether(y)) -> BornIn(x, MultipleBirth))",
            "all x. (ComplainAboutOften(x, AnnoyingSiblings) -> exists y. (Sibling(x, y) & BornTogether(y)))",
            "all x. (LiveAt(x, Home) -> -LiveWith(x, Strangers))",
            "all x. (SpendTimeplayingWith(x, Sibling) -> LiveAt(x, Home))",
            "-(((BornIn(Luke, MultipleBirth) & -LiveWith(Luke, Strangers)) | (-BornIn(Luke, MultipleBirth) & LiveWith(Luke, Strangers))))"
        ],
        "conclusion": "Luke spends a lot of time hanging out and playing with his siblings.",
        "conclusion-FOL": "SpendTime(Luke, PlayingWith, Siblings)",
        "label": "ERROR"
    },
    {
        "premises": [
            "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.",
            "If people have siblings who were born together, then they were born in a multiple birth.",
            "If people complain often about annoying siblings, then they have siblings who were born together.",
            "If people live at home, then they do not live with strangers.",
            "If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. ",
            "Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers"
        ],
        "premises-FOL": [
            "all x. (BornIn(x, MultipleBirth) -> SpendTimePlayingWith(x, Sibling))",
            "all x. (exists y. (Sibling(x, y) & BornTogether(y)) -> BornIn(x, MultipleBirth))",
            "all x. (ComplainAboutOften(x, AnnoyingSiblings) -> exists y. (Sibling(x, y) & BornTogether(y)))",
            "all x. (LiveAt(x, Home) -> -LiveWith(x, Strangers))",
            "all x. (SpendTimeplayingWith(x, Sibling) -> LiveAt(x, Home))",
            "-(((BornIn(Luke, MultipleBirth) & -LiveWith(Luke, Strangers)) | (-BornIn(Luke, MultipleBirth) & LiveWith(Luke, Strangers))))"
        ],
        "conclusion": "Luke complains often about annoying siblings.",
        "conclusion-FOL": "ComplainAboutOften(Luke, AnnoyingSiblings)",
        "label": "ERROR"
    },
    {
        "premises": [
            "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.",
            "If people have siblings who were born together, then they were born in a multiple birth.",
            "If people complain often about annoying siblings, then they have siblings who were born together.",
            "If people live at home, then they do not live with strangers.",
            "If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. ",
            "Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers"
        ],
        "premises-FOL": [
            "all x. (BornIn(x, MultipleBirth) -> SpendTimePlayingWith(x, Sibling))",
            "all x. (exists y. (Sibling(x, y) & BornTogether(y)) -> BornIn(x, MultipleBirth))",
            "all x. (ComplainAboutOften(x, AnnoyingSiblings) -> exists y. (Sibling(x, y) & BornTogether(y)))",
            "all x. (LiveAt(x, Home) -> -LiveWith(x, Strangers))",
            "all x. (SpendTimeplayingWith(x, Sibling) -> LiveAt(x, Home))",
            "-(((BornIn(Luke, MultipleBirth) & -LiveWith(Luke, Strangers)) | (-BornIn(Luke, MultipleBirth) & LiveWith(Luke, Strangers))))"
        ],
        "conclusion": "Luke is neither born in a multiple birth nor complains often about annoying siblings.",
        "conclusion-FOL": "-(BornIn(Luke, MultipleBirth) | ComplainAbout(Luke, Often, AnnoyingSiblings) )",
        "label": "ERROR"
    },
    {
        "premises": [
            "It costs $205 to take the GRE test, which is cheaper than $300.",
            "ETS provides financial aid to those GRE applicants who prove economic hardship.",
            "Those living in single-parent families or having few resources available to them can prove economic hardship.",
            "Tom lives in a single-parent family.",
            "Tom's dad has been out of work, and Tom has few resources available to them. ",
            "Tom is applying to take the GRE test."
        ],
        "premises-FOL": [
            "Cost(gRE, TwoZeroFive) & Cheaper(TwoZeroFive, ThreeZeroZero)",
            "all x. (ApplicantOf(x, Gre) & Prove(x, EconomicHardship) -> ProvideTo(Ets, FinancialAid, x))",
            "all x. (LivingIn(x, SingleParentFamily) | AvailableTo(FewResources, x) -> Prove(x, EconomicHardship))",
            "LivingIn(Tom, SingleParentFamily)",
            "OutOfWork(TomsDad) & AvailableTo(FewResources, Tom)",
            "ApplicantOf(Tom, Gre)"
        ],
        "conclusion": "ETS provides financial aid to Tom.",
        "conclusion-FOL": "ProvidesFinancialAidTo(eTS, Tom)",
        "label": "ERROR"
    },
    {
        "premises": [
            "It costs $205 to take the GRE test, which is cheaper than $300.",
            "ETS provides financial aid to those GRE applicants who prove economic hardship.",
            "Those living in single-parent families or having few resources available to them can prove economic hardship.",
            "Tom lives in a single-parent family.",
            "Tom's dad has been out of work, and Tom has few resources available to them. ",
            "Tom is applying to take the GRE test."
        ],
        "premises-FOL": [
            "Cost(gRE, TwoZeroFive) & Cheaper(TwoZeroFive, ThreeZeroZero)",
            "all x. (ApplicantOf(x, Gre) & Prove(x, EconomicHardship) -> ProvideTo(Ets, FinancialAid, x))",
            "all x. (LivingIn(x, SingleParentFamily) | AvailableTo(FewResources, x) -> Prove(x, EconomicHardship))",
            "LivingIn(Tom, SingleParentFamily)",
            "OutOfWork(TomsDad) & AvailableTo(FewResources, Tom)",
            "ApplicantOf(Tom, Gre)"
        ],
        "conclusion": "It costs below US $300 to take the GRE test.",
        "conclusion-FOL": "Cost(gRE, x) & Cheaper(x, ThreeZeroZero)",
        "label": "ERROR"
    },
    {
        "premises": [
            "It costs $205 to take the GRE test, which is cheaper than $300.",
            "ETS provides financial aid to those GRE applicants who prove economic hardship.",
            "Those living in single-parent families or having few resources available to them can prove economic hardship.",
            "Tom lives in a single-parent family.",
            "Tom's dad has been out of work, and Tom has few resources available to them. ",
            "Tom is applying to take the GRE test."
        ],
        "premises-FOL": [
            "Cost(gRE, TwoZeroFive) & Cheaper(TwoZeroFive, ThreeZeroZero)",
            "all x. (ApplicantOf(x, Gre) & Prove(x, EconomicHardship) -> ProvideTo(Ets, FinancialAid, x))",
            "all x. (LivingIn(x, SingleParentFamily) | AvailableTo(FewResources, x) -> Prove(x, EconomicHardship))",
            "LivingIn(Tom, SingleParentFamily)",
            "OutOfWork(TomsDad) & AvailableTo(FewResources, Tom)",
            "ApplicantOf(Tom, Gre)"
        ],
        "conclusion": "No one taking the GRE test has financial aid provided to them by something.",
        "conclusion-FOL": "-(exists x. exists y. (Applicant(x, gRE) & ProvidesFinancialAidTo(y, x)))",
        "label": "ERROR"
    },
    {
        "premises": [
            "If people spill a lot of food on their clothing, then they are not notably tidy.",
            "All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
            "If people are cleanly, then they are notably tidy.",
            "If people value order and spotlessness, then they are cleanly.",
            "All people whose families prioritize order and spotlessness themselves value order and spotlessness.",
            "Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly"
        ],
        "premises-FOL": [
            "all x. (Spill(x, aLotOfFood, Clothing) -> -NotablyTidy(x))",
            "all x. (ClumsyFoodie(x) & GoOutFrequentlyToFindToTry(x, NewFoodRestaurant) -> SpillOn(x, aLotOfFood, Clothing))",
            "all x. (Cleanly(x) -> NotablyTidy(x))",
            "all x. (Value(x, Order) & Value(x, Spotlessness) -> Cleanly(x))",
            "all x. ((exists y. (FamilyOf(y, x) & Prioritize(y, Order) & Prioritize(y, Spotlessness)) -> Value(x, Order) & Value(x, Spotlessness)) ",
            "-(((Spill(Peter, aLotOfFood, Clothing) & -Cleanly(Peter)) | (-Spill(Peter, aLotOfFood, Clothing) & Cleanly(Peter))))"
        ],
        "conclusion": "Peter is notably tidy.",
        "conclusion-FOL": "NotablyTidy(Peter)",
        "label": "ERROR"
    },
    {
        "premises": [
            "If people spill a lot of food on their clothing, then they are not notably tidy.",
            "All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
            "If people are cleanly, then they are notably tidy.",
            "If people value order and spotlessness, then they are cleanly.",
            "All people whose families prioritize order and spotlessness themselves value order and spotlessness.",
            "Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly"
        ],
        "premises-FOL": [
            "all x. (Spill(x, aLotOfFood, Clothing) -> -NotablyTidy(x))",
            "all x. (ClumsyFoodie(x) & GoOutFrequentlyToFindToTry(x, NewFoodRestaurant) -> SpillOn(x, aLotOfFood, Clothing))",
            "all x. (Cleanly(x) -> NotablyTidy(x))",
            "all x. (Value(x, Order) & Value(x, Spotlessness) -> Cleanly(x))",
            "all x. ((exists y. (FamilyOf(y, x) & Prioritize(y, Order) & Prioritize(y, Spotlessness)) -> Value(x, Order) & Value(x, Spotlessness)) ",
            "-(((Spill(Peter, aLotOfFood, Clothing) & -Cleanly(Peter)) | (-Spill(Peter, aLotOfFood, Clothing) & Cleanly(Peter))))"
        ],
        "conclusion": "Peter is either a  clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness.",
        "conclusion-FOL": "ClumsyFoodie(Peter) | (exists y. (FamilyOf(y, Peter) & Prioritize(y, Order) & Prioritize(y, Spotlessness)))",
        "label": "ERROR"
    },
    {
        "premises": [
            "If people spill a lot of food on their clothing, then they are not notably tidy.",
            "All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
            "If people are cleanly, then they are notably tidy.",
            "If people value order and spotlessness, then they are cleanly.",
            "All people whose families prioritize order and spotlessness themselves value order and spotlessness.",
            "Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly"
        ],
        "premises-FOL": [
            "all x. (Spill(x, aLotOfFood, Clothing) -> -NotablyTidy(x))",
            "all x. (ClumsyFoodie(x) & GoOutFrequentlyToFindToTry(x, NewFoodRestaurant) -> SpillOn(x, aLotOfFood, Clothing))",
            "all x. (Cleanly(x) -> NotablyTidy(x))",
            "all x. (Value(x, Order) & Value(x, Spotlessness) -> Cleanly(x))",
            "all x. ((exists y. (FamilyOf(y, x) & Prioritize(y, Order) & Prioritize(y, Spotlessness)) -> Value(x, Order) & Value(x, Spotlessness)) ",
            "-(((Spill(Peter, aLotOfFood, Clothing) & -Cleanly(Peter)) | (-Spill(Peter, aLotOfFood, Clothing) & Cleanly(Peter))))"
        ],
        "conclusion": "Peter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and issomeone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness.",
        "conclusion-FOL": "-(ClumsyFoodie(Peter) \u2295 (exists y. (FamilyOf(y, Peter) & Prioritize(y, Order) & Prioritize(y, Spotlessness))))",
        "label": "ERROR"
    },
    {
        "premises": [
            "All fir trees are evergreens.",
            "Some objects of worship are fir trees."
        ],
        "premises-FOL": [
            "all x. (FirTree(x) -> Evergreen(x))",
            "exists x. exists y. (ObjectOfWorship(x) & ObjectOfWorship(y) & FirTree(x) & FirTree(y) & -(x=y))"
        ],
        "conclusion": "Some evergreens are not objects of worship.",
        "conclusion-FOL": "exists x. exists y. (Evergreen(x) & Evergreen(y) & -ObjectOfWorship(x) & -ObjectOfWorship(y) & -(x=y))",
        "label": "Uncertain"
    },
    {
        "premises": [
            "The Picuris Mountains are a mountain range in New Mexico or Texas.",
            "Juan de Onate visited the Picuris Mountains.",
            "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
            "There are no mountain ranges in texas that have mines that have been donated."
        ],
        "premises-FOL": [
            "MountainRange(ThePicurisMountains) & (((In(ThePicurisMountains, NewMexico) & -In(ThePicurisMountains, Texas)) | (-In(ThePicurisMountains, NewMexico) & In(ThePicurisMountains, Texas))))",
            "Visited(JuanDeOnate, ThePicurisMountains)",
            "In(HardingPegmatiteMine, ThePicurisMountains) & Mine(HardingPegmatiteMine) & Donated(HardingPegmatiteMine)",
            "all x. all y. (Mine(x) & Donated(x) & In(x, y) & MountainRange(y) -> -In(y, Texas))"
        ],
        "conclusion": "Juan de Onate visited a mountain range in New Mexico.",
        "conclusion-FOL": "exists x. (Visited(JuanDeOnate, x) & MountainRange(x) & In(x, NewMexico))",
        "label": "True"
    },
    {
        "premises": [
            "The Picuris Mountains are a mountain range in New Mexico or Texas.",
            "Juan de Onate visited the Picuris Mountains.",
            "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
            "There are no mountain ranges in texas that have mines that have been donated."
        ],
        "premises-FOL": [
            "MountainRange(ThePicurisMountains) & (((In(ThePicurisMountains, NewMexico) & -In(ThePicurisMountains, Texas)) | (-In(ThePicurisMountains, NewMexico) & In(ThePicurisMountains, Texas))))",
            "Visited(JuanDeOnate, ThePicurisMountains)",
            "In(HardingPegmatiteMine, ThePicurisMountains) & Mine(HardingPegmatiteMine) & Donated(HardingPegmatiteMine)",
            "all x. all y. (Mine(x) & Donated(x) & In(x, y) & MountainRange(y) -> -In(y, Texas))"
        ],
        "conclusion": "Juan de Onate visited a mountain range in Texas.",
        "conclusion-FOL": "exists x. (Visited(JuanDeOnate, x) & MountainRange(x) & In(x, Texas))",
        "label": "Uncertain"
    },
    {
        "premises": [
            "The Picuris Mountains are a mountain range in New Mexico or Texas.",
            "Juan de Onate visited the Picuris Mountains.",
            "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
            "There are no mountain ranges in texas that have mines that have been donated."
        ],
        "premises-FOL": [
            "MountainRange(ThePicurisMountains) & (((In(ThePicurisMountains, NewMexico) & -In(ThePicurisMountains, Texas)) | (-In(ThePicurisMountains, NewMexico) & In(ThePicurisMountains, Texas))))",
            "Visited(JuanDeOnate, ThePicurisMountains)",
            "In(HardingPegmatiteMine, ThePicurisMountains) & Mine(HardingPegmatiteMine) & Donated(HardingPegmatiteMine)",
            "all x. all y. (Mine(x) & Donated(x) & In(x, y) & MountainRange(y) -> -In(y, Texas))"
        ],
        "conclusion": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
        "conclusion-FOL": "all x. (In(HardingPegmatiteMine, x) -> -(MountainRange(x) & In(x, NewMexico)))",
        "label": "False"
    },
    {
        "premises": [
            "If a man is taller than another man, the taller one can block the other's shooting.",
            "Michael is a man who is taller than everyone else in his class.",
            "If person x is taller than person y, and person y is taller than person z, then x is taller than z",
            "Peter is a man who is taller than Michael.",
            "Michael can block any shooting from a person as long as the person does not jump when shooting.",
            "Michael cannot block Windy's shooting.",
            "Every shooter who can jump when shooting is a great shooter."
        ],
        "premises-FOL": [
            "all x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))",
            "all x. (Man(x) & SameClass(x, Michael) & -(x=Michael) -> Taller(Michael, x))",
            "all x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))",
            "Man(Peter) & Taller(Peter, Michael)",
            "all x. (-JumpWhenShooting(x) -> CanBlock(Michael, x))",
            "-CanBlock(Michael, Windy)",
            "all x. (JumpWhenShooting(x) -> GreatShooter(x))"
        ],
        "conclusion": "Peter is shorter than a man in Michael's class.",
        "conclusion-FOL": "exists x. (Man(x) & SameClass(x, Michael) & -Taller(Peter, x))",
        "label": "False"
    },
    {
        "premises": [
            "If a man is taller than another man, the taller one can block the other's shooting.",
            "Michael is a man who is taller than everyone else in his class.",
            "If person x is taller than person y, and person y is taller than person z, then x is taller than z",
            "Peter is a man who is taller than Michael.",
            "Michael can block any shooting from a person as long as the person does not jump when shooting.",
            "Michael cannot block Windy's shooting.",
            "Every shooter who can jump when shooting is a great shooter."
        ],
        "premises-FOL": [
            "all x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))",
            "all x. (Man(x) & SameClass(x, Michael) & -(x=Michael) -> Taller(Michael, x))",
            "all x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))",
            "Man(Peter) & Taller(Peter, Michael)",
            "all x. (-JumpWhenShooting(x) -> CanBlock(Michael, x))",
            "-CanBlock(Michael, Windy)",
            "all x. (JumpWhenShooting(x) -> GreatShooter(x))"
        ],
        "conclusion": "Windy is a great shooter.",
        "conclusion-FOL": "GreatShooter(Windy)",
        "label": "True"
    },
    {
        "premises": [
            "If a man is taller than another man, the taller one can block the other's shooting.",
            "Michael is a man who is taller than everyone else in his class.",
            "If person x is taller than person y, and person y is taller than person z, then x is taller than z",
            "Peter is a man who is taller than Michael.",
            "Michael can block any shooting from a person as long as the person does not jump when shooting.",
            "Michael cannot block Windy's shooting.",
            "Every shooter who can jump when shooting is a great shooter."
        ],
        "premises-FOL": [
            "all x. all y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))",
            "all x. (Man(x) & SameClass(x, Michael) & -(x=Michael) -> Taller(Michael, x))",
            "all x. all y. all z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))",
            "Man(Peter) & Taller(Peter, Michael)",
            "all x. (-JumpWhenShooting(x) -> CanBlock(Michael, x))",
            "-CanBlock(Michael, Windy)",
            "all x. (JumpWhenShooting(x) -> GreatShooter(x))"
        ],
        "conclusion": "Peter can block Windy's shooting.",
        "conclusion-FOL": "CanBlock(Peter, Windy)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.",
            "Barutin Cove is on the southwest coast of Snow Island.",
            "Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.",
            "Antarctica is located on the South Shetland Islands. ",
            "If place A is located in place B and place B is located in place C, then place A is located in place C."
        ],
        "premises-FOL": [
            "Cove(BarutinCove) & NamedAfter(BarutinCove, BarutinSettlement) & LocatedIn(BarutinSettlement, Bulgaria)",
            "LocatedIn(BarutinCove, SnowIsland)",
            "LocatedIn(SnowIsland, SouthShetlandIslands) & LocatedIn(GreenwichIsland, SouthShetlandIslands) & LocatedIn(DeceptionIsland, SouthShetlandIslands)",
            "LocatedIn(SouthShetlandIslands, Antarctica)",
            "all x. all y. all z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))"
        ],
        "conclusion": "Barutin Cove is named after all islands in Antarctica.",
        "conclusion-FOL": "all x. (LocatedIn(x, Antarctica) -> NamedAfter(BarutinCove, x))",
        "label": "Uncertain"
    },
    {
        "premises": [
            "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.",
            "Barutin Cove is on the southwest coast of Snow Island.",
            "Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.",
            "Antarctica is located on the South Shetland Islands. ",
            "If place A is located in place B and place B is located in place C, then place A is located in place C."
        ],
        "premises-FOL": [
            "Cove(BarutinCove) & NamedAfter(BarutinCove, BarutinSettlement) & LocatedIn(BarutinSettlement, Bulgaria)",
            "LocatedIn(BarutinCove, SnowIsland)",
            "LocatedIn(SnowIsland, SouthShetlandIslands) & LocatedIn(GreenwichIsland, SouthShetlandIslands) & LocatedIn(DeceptionIsland, SouthShetlandIslands)",
            "LocatedIn(SouthShetlandIslands, Antarctica)",
            "all x. all y. all z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))"
        ],
        "conclusion": "There is at least one cove in Antarctica named after a place in Bulgaria.",
        "conclusion-FOL": "exists x. exists y. (Cove(x) & LocatedIn(x, Antarctica) & NameAfter(x, y) & LocatedIn(y, Bulgaria))",
        "label": "ERROR"
    },
    {
        "premises": [
            "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.",
            "Barutin Cove is on the southwest coast of Snow Island.",
            "Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.",
            "Antarctica is located on the South Shetland Islands. ",
            "If place A is located in place B and place B is located in place C, then place A is located in place C."
        ],
        "premises-FOL": [
            "Cove(BarutinCove) & NamedAfter(BarutinCove, BarutinSettlement) & LocatedIn(BarutinSettlement, Bulgaria)",
            "LocatedIn(BarutinCove, SnowIsland)",
            "LocatedIn(SnowIsland, SouthShetlandIslands) & LocatedIn(GreenwichIsland, SouthShetlandIslands) & LocatedIn(DeceptionIsland, SouthShetlandIslands)",
            "LocatedIn(SouthShetlandIslands, Antarctica)",
            "all x. all y. all z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))"
        ],
        "conclusion": "Barutin Cove is not located in Antarctica.",
        "conclusion-FOL": "-LocatedIn(BarutinCove, Antarctica)",
        "label": "False"
    },
    {
        "premises": [
            "Some affection is love.",
            "Some love is positive."
        ],
        "premises-FOL": [
            "exists x. (Affection(x) & Love(x))",
            "exists x. (Love(x) & Positive(x))"
        ],
        "conclusion": "Some affection is positive.",
        "conclusion-FOL": "exists x. (Affection(x) & Positive(x))",
        "label": "Uncertain"
    },
    {
        "premises": [
            "If something can transport multiple passengers, then they are not one-seaters.",
            "All Tesla Model 3 can transport multiple passengers.",
            "All single-seat electric cars are one-seaters.",
            "All Solo EV cars are single-seat electric cars. ",
            "If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. "
        ],
        "premises-FOL": [
            "all x. (exists y. exists z. (Passenger(y) & Passenger(z) & Transport(x, y) & Transport(x, y) & -(y=z)) -> -OneSeater(x))",
            "all x. (TeslaModelThree(x) -> (exists y. exists z. (Passenger(y) & Passenger(z) & Transport(x, y) & Transport(x, y) & -(y=z)))",
            "all x. (SingleSeat(x) & ElectricCar(x) -> OneSeater(x))",
            "all x. (SoloEV(x) & Car(x) -> SingleSeat(x) & ElectricCar(x))",
            "-TeslaModelThree(JohnsCar) -> -(TeslaModelThree(JohnsCar) | (SingleSeat(x) & ElectricCar(JohnsCar)))"
        ],
        "conclusion": "John's car is a Tesla Model 3.",
        "conclusion-FOL": "TeslaModelThree(JohnsCar)",
        "label": "ERROR"
    },
    {
        "premises": [
            "If something can transport multiple passengers, then they are not one-seaters.",
            "All Tesla Model 3 can transport multiple passengers.",
            "All single-seat electric cars are one-seaters.",
            "All Solo EV cars are single-seat electric cars. ",
            "If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. "
        ],
        "premises-FOL": [
            "all x. (exists y. exists z. (Passenger(y) & Passenger(z) & Transport(x, y) & Transport(x, y) & -(y=z)) -> -OneSeater(x))",
            "all x. (TeslaModelThree(x) -> (exists y. exists z. (Passenger(y) & Passenger(z) & Transport(x, y) & Transport(x, y) & -(y=z)))",
            "all x. (SingleSeat(x) & ElectricCar(x) -> OneSeater(x))",
            "all x. (SoloEV(x) & Car(x) -> SingleSeat(x) & ElectricCar(x))",
            "-TeslaModelThree(JohnsCar) -> -(TeslaModelThree(JohnsCar) | (SingleSeat(x) & ElectricCar(JohnsCar)))"
        ],
        "conclusion": "John's car is a Solo EV.",
        "conclusion-FOL": "SoloEV(JohnsCar) & Car(JohnsCar)",
        "label": "ERROR"
    },
    {
        "premises": [
            "If something can transport multiple passengers, then they are not one-seaters.",
            "All Tesla Model 3 can transport multiple passengers.",
            "All single-seat electric cars are one-seaters.",
            "All Solo EV cars are single-seat electric cars. ",
            "If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. "
        ],
        "premises-FOL": [
            "all x. (exists y. exists z. (Passenger(y) & Passenger(z) & Transport(x, y) & Transport(x, y) & -(y=z)) -> -OneSeater(x))",
            "all x. (TeslaModelThree(x) -> (exists y. exists z. (Passenger(y) & Passenger(z) & Transport(x, y) & Transport(x, y) & -(y=z)))",
            "all x. (SingleSeat(x) & ElectricCar(x) -> OneSeater(x))",
            "all x. (SoloEV(x) & Car(x) -> SingleSeat(x) & ElectricCar(x))",
            "-TeslaModelThree(JohnsCar) -> -(TeslaModelThree(JohnsCar) | (SingleSeat(x) & ElectricCar(JohnsCar)))"
        ],
        "conclusion": "John's car is not a Solo EV.",
        "conclusion-FOL": "-(SoloEV(JohnsCar) & Car(JohnsCar))",
        "label": "ERROR"
    },
    {
        "premises": [
            "All of Peter's pets that are mammals are also animals.",
            "All monkeys are mammals. ",
            "Peter's pets are all either monkeys or birds. ",
            "Peter's birds can fly.",
            "All animals that are Peter's pets can breathe.",
            "If Peter's pet can fly, then it has wings.",
            "Rock is Peter's pet.",
            "Rock can fly, or Rock is a bird, or Rock cannot breathe. "
        ],
        "premises-FOL": [
            "all x. (PetersPet(x) & Mammal(x) -> Animal(x))",
            "all x. (Monkey(x) -> Mammal(x))",
            "all x. (PetersPet(x) -> Monkey(x) \u2295  Bird(x))",
            "all x. (Bird(x) -> CanFly(x))",
            "all x. (PetersPet(x) & Animal(x) -> Breathe(x))",
            "all x. (PetersPet(x) & CanFly(x) -> exists y. exists z. (-(y=z) & Wing(y) & Wing(z) & Have(x, y) & Have(x, z)))",
            "PeterSPet(Rock)",
            "CanFly(Rock) | Bird(Rock) | -Breathe(Rock)"
        ],
        "conclusion": "Rock is a monkey.",
        "conclusion-FOL": "Monkey(Rock)",
        "label": "ERROR"
    },
    {
        "premises": [
            "All of Peter's pets that are mammals are also animals.",
            "All monkeys are mammals. ",
            "Peter's pets are all either monkeys or birds. ",
            "Peter's birds can fly.",
            "All animals that are Peter's pets can breathe.",
            "If Peter's pet can fly, then it has wings.",
            "Rock is Peter's pet.",
            "Rock can fly, or Rock is a bird, or Rock cannot breathe. "
        ],
        "premises-FOL": [
            "all x. (PetersPet(x) & Mammal(x) -> Animal(x))",
            "all x. (Monkey(x) -> Mammal(x))",
            "all x. (PetersPet(x) -> Monkey(x) \u2295  Bird(x))",
            "all x. (Bird(x) -> CanFly(x))",
            "all x. (PetersPet(x) & Animal(x) -> Breathe(x))",
            "all x. (PetersPet(x) & CanFly(x) -> exists y. exists z. (-(y=z) & Wing(y) & Wing(z) & Have(x, y) & Have(x, z)))",
            "PeterSPet(Rock)",
            "CanFly(Rock) | Bird(Rock) | -Breathe(Rock)"
        ],
        "conclusion": "Rock has wings.",
        "conclusion-FOL": "exists y. exists z. (-(y=z) & Wing(y) & Wing(z) & Have(Rock, y) & Have(Rock, z))",
        "label": "ERROR"
    },
    {
        "premises": [
            "All of Peter's pets that are mammals are also animals.",
            "All monkeys are mammals. ",
            "Peter's pets are all either monkeys or birds. ",
            "Peter's birds can fly.",
            "All animals that are Peter's pets can breathe.",
            "If Peter's pet can fly, then it has wings.",
            "Rock is Peter's pet.",
            "Rock can fly, or Rock is a bird, or Rock cannot breathe. "
        ],
        "premises-FOL": [
            "all x. (PetersPet(x) & Mammal(x) -> Animal(x))",
            "all x. (Monkey(x) -> Mammal(x))",
            "all x. (PetersPet(x) -> Monkey(x) \u2295  Bird(x))",
            "all x. (Bird(x) -> CanFly(x))",
            "all x. (PetersPet(x) & Animal(x) -> Breathe(x))",
            "all x. (PetersPet(x) & CanFly(x) -> exists y. exists z. (-(y=z) & Wing(y) & Wing(z) & Have(x, y) & Have(x, z)))",
            "PeterSPet(Rock)",
            "CanFly(Rock) | Bird(Rock) | -Breathe(Rock)"
        ],
        "conclusion": "Rock does not have wings.",
        "conclusion-FOL": "-(exists y. exists z. (-(y=z) & Wing(y) & Wing(z) & Have(Rock, y) & Have(Rock, z)))",
        "label": "ERROR"
    },
    {
        "premises": [
            "All people who make wedding plans are people who are engaged.",
            "All people who invite others to come to their ceremony make wedding plans.",
            "Anyone who has a well-attended wedding invites others to come to their ceremony.",
            "Some people that have well-attended weddings have larger families.",
            "If John is engaged, then John does not invite friends to their ceremony and make wedding plans.",
            "If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "
        ],
        "premises-FOL": [
            "all x. (Make(x, WeddingPlan) -> Engaged(x))",
            "all x. (exists y. exists z. (-(y=x) & -(z=x) & -(y=z) & InviteToComeTo(x, y, Wedding) & InviteToComeTo(x, z, Wedding)) -> Make(x, WeddingPlan))",
            "all x. (Have(x, WellAttendedWedding) -> exists y. exists z. (-(y=x) & -(z=x) & -(y=z) & InviteToComeTo(x, y, Wedding) & InviteToComeTo(x, z, Wedding)))",
            "exists x. (Have(x, WellAttendedWedding) & Have(x, LargerFamily))",
            "Engaged(John) -> -(exists y. exists z. (-(y=x) & -(z=x) & -(y=z) & InviteToComeTo(John, y, Wedding) & Invite(John, z, ComeTo, Wedding))) & Make(John, WeddingPlan)",
            "Have(John, LargerFamily) -> Have(John, WellAttendedWedding) \u2295 exists y. exists z. (-(y=x) & -(z=x) & -(y=z) & Invite(x, y, ComeTo, Wedding) & InviteToComeTo(x, z, Wedding))"
        ],
        "conclusion": "John has a larger family.",
        "conclusion-FOL": "Have(John, LargeFamily)",
        "label": "ERROR"
    },
    {
        "premises": [
            "All people who make wedding plans are people who are engaged.",
            "All people who invite others to come to their ceremony make wedding plans.",
            "Anyone who has a well-attended wedding invites others to come to their ceremony.",
            "Some people that have well-attended weddings have larger families.",
            "If John is engaged, then John does not invite friends to their ceremony and make wedding plans.",
            "If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "
        ],
        "premises-FOL": [
            "all x. (Make(x, WeddingPlan) -> Engaged(x))",
            "all x. (exists y. exists z. (-(y=x) & -(z=x) & -(y=z) & InviteToComeTo(x, y, Wedding) & InviteToComeTo(x, z, Wedding)) -> Make(x, WeddingPlan))",
            "all x. (Have(x, WellAttendedWedding) -> exists y. exists z. (-(y=x) & -(z=x) & -(y=z) & InviteToComeTo(x, y, Wedding) & InviteToComeTo(x, z, Wedding)))",
            "exists x. (Have(x, WellAttendedWedding) & Have(x, LargerFamily))",
            "Engaged(John) -> -(exists y. exists z. (-(y=x) & -(z=x) & -(y=z) & InviteToComeTo(John, y, Wedding) & Invite(John, z, ComeTo, Wedding))) & Make(John, WeddingPlan)",
            "Have(John, LargerFamily) -> Have(John, WellAttendedWedding) \u2295 exists y. exists z. (-(y=x) & -(z=x) & -(y=z) & Invite(x, y, ComeTo, Wedding) & InviteToComeTo(x, z, Wedding))"
        ],
        "conclusion": "John does not have a larger family.",
        "conclusion-FOL": "-Have(John, LargerFamily)",
        "label": "ERROR"
    },
    {
        "premises": [
            "All people who make wedding plans are people who are engaged.",
            "All people who invite others to come to their ceremony make wedding plans.",
            "Anyone who has a well-attended wedding invites others to come to their ceremony.",
            "Some people that have well-attended weddings have larger families.",
            "If John is engaged, then John does not invite friends to their ceremony and make wedding plans.",
            "If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "
        ],
        "premises-FOL": [
            "all x. (Make(x, WeddingPlan) -> Engaged(x))",
            "all x. (exists y. exists z. (-(y=x) & -(z=x) & -(y=z) & InviteToComeTo(x, y, Wedding) & InviteToComeTo(x, z, Wedding)) -> Make(x, WeddingPlan))",
            "all x. (Have(x, WellAttendedWedding) -> exists y. exists z. (-(y=x) & -(z=x) & -(y=z) & InviteToComeTo(x, y, Wedding) & InviteToComeTo(x, z, Wedding)))",
            "exists x. (Have(x, WellAttendedWedding) & Have(x, LargerFamily))",
            "Engaged(John) -> -(exists y. exists z. (-(y=x) & -(z=x) & -(y=z) & InviteToComeTo(John, y, Wedding) & Invite(John, z, ComeTo, Wedding))) & Make(John, WeddingPlan)",
            "Have(John, LargerFamily) -> Have(John, WellAttendedWedding) \u2295 exists y. exists z. (-(y=x) & -(z=x) & -(y=z) & Invite(x, y, ComeTo, Wedding) & InviteToComeTo(x, z, Wedding))"
        ],
        "conclusion": "John is engaged.",
        "conclusion-FOL": "Engaged(John)",
        "label": "ERROR"
    },
    {
        "premises": [
            "All people who make wedding plans are people who are engaged.",
            "All people who invite others to come to their ceremony make wedding plans.",
            "Anyone who has a well-attended wedding invites others to come to their ceremony.",
            "Some people that have well-attended weddings have larger families.",
            "If John is engaged, then John does not invite friends to their ceremony and make wedding plans.",
            "If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "
        ],
        "premises-FOL": [
            "all x. (Make(x, WeddingPlan) -> Engaged(x))",
            "all x. (exists y. exists z. (-(y=x) & -(z=x) & -(y=z) & InviteToComeTo(x, y, Wedding) & InviteToComeTo(x, z, Wedding)) -> Make(x, WeddingPlan))",
            "all x. (Have(x, WellAttendedWedding) -> exists y. exists z. (-(y=x) & -(z=x) & -(y=z) & InviteToComeTo(x, y, Wedding) & InviteToComeTo(x, z, Wedding)))",
            "exists x. (Have(x, WellAttendedWedding) & Have(x, LargerFamily))",
            "Engaged(John) -> -(exists y. exists z. (-(y=x) & -(z=x) & -(y=z) & InviteToComeTo(John, y, Wedding) & Invite(John, z, ComeTo, Wedding))) & Make(John, WeddingPlan)",
            "Have(John, LargerFamily) -> Have(John, WellAttendedWedding) \u2295 exists y. exists z. (-(y=x) & -(z=x) & -(y=z) & Invite(x, y, ComeTo, Wedding) & InviteToComeTo(x, z, Wedding))"
        ],
        "conclusion": "John neither has a larger family nor does he invite others to his wedding.",
        "conclusion-FOL": "-Have(John, LargerFamily) & -(exists y. exists z. (-(y=John) & -(z=John) & -(y=z) & InviteToComeTo(John, y, Wedding) & InviteToComeTo(John, z, Wedding)))",
        "label": "ERROR"
    },
    {
        "premises": [
            "Some mammals have teeth.",
            "Platypuses have no teeth.",
            "Platypuses are mammals. ",
            "Humans have teeth."
        ],
        "premises-FOL": [
            "exists x. exists y. (Mammal(x) & Mammal(y) & (-(x=y)) & Have(x, Teeth) & Have(y, Teeth))",
            "-Have(Platypus, Teeth)",
            "Mammal(Platypus)",
            "Have(Humans, Teeth)"
        ],
        "conclusion": "Platypuses are mammals with no teeth.",
        "conclusion-FOL": "Mammal(Platypus) & (-Have(Platypus, Teeth))",
        "label": "True"
    },
    {
        "premises": [
            "Some mammals have teeth.",
            "Platypuses have no teeth.",
            "Platypuses are mammals. ",
            "Humans have teeth."
        ],
        "premises-FOL": [
            "exists x. exists y. (Mammal(x) & Mammal(y) & (-(x=y)) & Have(x, Teeth) & Have(y, Teeth))",
            "-Have(Platypus, Teeth)",
            "Mammal(Platypus)",
            "Have(Humans, Teeth)"
        ],
        "conclusion": "Platypuses are reptiles.",
        "conclusion-FOL": "Reptile(Platypus)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "Some mammals have teeth.",
            "Platypuses have no teeth.",
            "Platypuses are mammals. ",
            "Humans have teeth."
        ],
        "premises-FOL": [
            "exists x. exists y. (Mammal(x) & Mammal(y) & (-(x=y)) & Have(x, Teeth) & Have(y, Teeth))",
            "-Have(Platypus, Teeth)",
            "Mammal(Platypus)",
            "Have(Humans, Teeth)"
        ],
        "conclusion": "Humans are mammals.",
        "conclusion-FOL": "Mammal(Humans)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "Plungers suck.",
            "Vacuums suck.",
            "Vampires suck.",
            "Space is a vacuum.",
            "A duster is a household appliance that doesn't suck."
        ],
        "premises-FOL": [
            "all x. (Plunger(x) -> Suck(x))",
            "all x. (Vacuum(x) -> Suck(x))",
            "all x. (Vampire(x) -> Suck(x))",
            "Vacuum(Space)",
            "HouseholdAppliance(Duster) & -Suck(Duster)"
        ],
        "conclusion": "Space sucks.",
        "conclusion-FOL": "Suck(Space)",
        "label": "True"
    },
    {
        "premises": [
            "Plungers suck.",
            "Vacuums suck.",
            "Vampires suck.",
            "Space is a vacuum.",
            "A duster is a household appliance that doesn't suck."
        ],
        "premises-FOL": [
            "all x. (Plunger(x) -> Suck(x))",
            "all x. (Vacuum(x) -> Suck(x))",
            "all x. (Vampire(x) -> Suck(x))",
            "Vacuum(Space)",
            "HouseholdAppliance(Duster) & -Suck(Duster)"
        ],
        "conclusion": "Space is a vampire.",
        "conclusion-FOL": "Vampire(Space)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "Plungers suck.",
            "Vacuums suck.",
            "Vampires suck.",
            "Space is a vacuum.",
            "A duster is a household appliance that doesn't suck."
        ],
        "premises-FOL": [
            "all x. (Plunger(x) -> Suck(x))",
            "all x. (Vacuum(x) -> Suck(x))",
            "all x. (Vampire(x) -> Suck(x))",
            "Vacuum(Space)",
            "HouseholdAppliance(Duster) & -Suck(Duster)"
        ],
        "conclusion": "If something is a household appliance, it sucks.",
        "conclusion-FOL": "all x. (HouseHoldApp(x) -> Suck(x))",
        "label": "ERROR"
    },
    {
        "premises": [
            "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
            "Unsupervised learning algorithms do not require labeled data.",
            "The state-of-the-art text summarization model is trained with machine learning algorithms.",
            "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
            "The Machine Learning algorithm for training text summarization models requires labeled data."
        ],
        "premises-FOL": [
            "all x. (MachineLearningAlgorithm(x) -> SupervisedLearningAlgorithm(x) | UnsupervisedLearningAlgorithm(x) | ReinforcementLearningAlgorithm(x))",
            "all x. (UnsupervisedLearningAlgorithm(x) -> -Require(x, LabeledData))",
            "all x. (TrainedWith(StateOfTheArtTextSummarizationModel, x) -> MachineLearningAlgorithm(x))",
            "all x. (ReinforcementLearningAlgorithm(x) -> -TrainedWith(StateOfTheArtTextSummarizationModel, x))",
            "all x. ((MachineLearningAlgorithm(x) & TrainedWith(StateOfTheArtTextSummarizationModel, x)) -> Require(x, LabeledData))"
        ],
        "conclusion": "Supervised learning is used to train the state-of-the-art text summarization model.",
        "conclusion-FOL": "exists x. (SupervisedLearningAlgorithm(x) & TrainedWith(StateOfTheArtTextSummarizationModel, x))",
        "label": "ERROR"
    },
    {
        "premises": [
            "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
            "Unsupervised learning algorithms do not require labeled data.",
            "The state-of-the-art text summarization model is trained with machine learning algorithms.",
            "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
            "The Machine Learning algorithm for training text summarization models requires labeled data."
        ],
        "premises-FOL": [
            "all x. (MachineLearningAlgorithm(x) -> SupervisedLearningAlgorithm(x) | UnsupervisedLearningAlgorithm(x) | ReinforcementLearningAlgorithm(x))",
            "all x. (UnsupervisedLearningAlgorithm(x) -> -Require(x, LabeledData))",
            "all x. (TrainedWith(StateOfTheArtTextSummarizationModel, x) -> MachineLearningAlgorithm(x))",
            "all x. (ReinforcementLearningAlgorithm(x) -> -TrainedWith(StateOfTheArtTextSummarizationModel, x))",
            "all x. ((MachineLearningAlgorithm(x) & TrainedWith(StateOfTheArtTextSummarizationModel, x)) -> Require(x, LabeledData))"
        ],
        "conclusion": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
        "conclusion-FOL": "exists x. (UnsupervisedLearningAlgorithm(x) & TrainedWith(StateOfTheArtTextSummarizationModel, x))",
        "label": "False"
    },
    {
        "premises": [
            "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.",
            "If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.",
            "If a film is rated General Audience, then it is appropriate for people of all ages.",
            "All family-friendly animated films are rated General Audience.",
            "All movies in the Frozen series are family-friendly animated films.",
            "\u201cHachi: A dog\u2019s Tale\u201d is a film.",
            "\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. "
        ],
        "premises-FOL": [
            "all x. (Film(x) & Rated(x, AdultsOnly) -> CanWatchWithout(Children, x, GuidanceFromParents))",
            "all x. (Film(x) & Contain(x, ExcessiveEroticContent) & Contain(x, ExcessiveViolentContent) -> -CanWatchWithout(Children, x, GuidanceFromParents))",
            "all x. (Film(x) & Rated(x, GeneralAudience) -> AppropriateFor(x, PeopleOfAllAges))",
            "all x. (Film(x) & FamilyFriendly(x) & Animated(x) -> Rated(x, GeneralAudience))",
            "all x. (Film(x) & InfrozenSeries(x) -> FamilyFriendly(x) & Animated(x))",
            "Film(HachiAdogsTale)",
            "(FamilyFriendly(HachiAdogsTale) & Animated(HachiAdogsTale)) \u2295 Rated(HachiAdogsTale, AdultsOnly)"
        ],
        "conclusion": "\"Hachi: A dog's Tale\" is rated General Audience.",
        "conclusion-FOL": "Rated(x, GeneralAudience)",
        "label": "ERROR"
    },
    {
        "premises": [
            "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.",
            "If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.",
            "If a film is rated General Audience, then it is appropriate for people of all ages.",
            "All family-friendly animated films are rated General Audience.",
            "All movies in the Frozen series are family-friendly animated films.",
            "\u201cHachi: A dog\u2019s Tale\u201d is a film.",
            "\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. "
        ],
        "premises-FOL": [
            "all x. (Film(x) & Rated(x, AdultsOnly) -> CanWatchWithout(Children, x, GuidanceFromParents))",
            "all x. (Film(x) & Contain(x, ExcessiveEroticContent) & Contain(x, ExcessiveViolentContent) -> -CanWatchWithout(Children, x, GuidanceFromParents))",
            "all x. (Film(x) & Rated(x, GeneralAudience) -> AppropriateFor(x, PeopleOfAllAges))",
            "all x. (Film(x) & FamilyFriendly(x) & Animated(x) -> Rated(x, GeneralAudience))",
            "all x. (Film(x) & InfrozenSeries(x) -> FamilyFriendly(x) & Animated(x))",
            "Film(HachiAdogsTale)",
            "(FamilyFriendly(HachiAdogsTale) & Animated(HachiAdogsTale)) \u2295 Rated(HachiAdogsTale, AdultsOnly)"
        ],
        "conclusion": "\"Hachi: A dog's Tale\" contains excessive erotic and violent content or is in the \"Frozen\" series or both.",
        "conclusion-FOL": "(Contain(x, ExcessiveEroticContent) & Contain(x, ExcessiveViolentContent)) | InfrozenSeries(ExcessiveViolentContent)",
        "label": "ERROR"
    },
    {
        "premises": [
            "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.",
            "If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.",
            "If a film is rated General Audience, then it is appropriate for people of all ages.",
            "All family-friendly animated films are rated General Audience.",
            "All movies in the Frozen series are family-friendly animated films.",
            "\u201cHachi: A dog\u2019s Tale\u201d is a film.",
            "\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. "
        ],
        "premises-FOL": [
            "all x. (Film(x) & Rated(x, AdultsOnly) -> CanWatchWithout(Children, x, GuidanceFromParents))",
            "all x. (Film(x) & Contain(x, ExcessiveEroticContent) & Contain(x, ExcessiveViolentContent) -> -CanWatchWithout(Children, x, GuidanceFromParents))",
            "all x. (Film(x) & Rated(x, GeneralAudience) -> AppropriateFor(x, PeopleOfAllAges))",
            "all x. (Film(x) & FamilyFriendly(x) & Animated(x) -> Rated(x, GeneralAudience))",
            "all x. (Film(x) & InfrozenSeries(x) -> FamilyFriendly(x) & Animated(x))",
            "Film(HachiAdogsTale)",
            "(FamilyFriendly(HachiAdogsTale) & Animated(HachiAdogsTale)) \u2295 Rated(HachiAdogsTale, AdultsOnly)"
        ],
        "conclusion": "\"Hachi: A dog's Tale\" either contains excessive erotic and violent content and is a film in the \"Frozen\" series, or it neither contains excessive erotic and violent content nor is a film in the \"Frozen\" series.",
        "conclusion-FOL": "-((Contain(x, ExcessiveEroticContent) & Contain(x, ExcessiveViolentContent)) \u2295 InfrozenSeries(ExcessiveViolentContent))",
        "label": "ERROR"
    },
    {
        "premises": [
            "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
            "Heck cattle were bred back in the 1920s to resemble the aurochs.",
            "Heck cattle are animals.",
            "Aurochs are animals.",
            "Some animals to be bred back resemble extinct animals."
        ],
        "premises-FOL": [
            "all x. (BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreedingOfDomesticAnimals(x)))",
            "exists x. exists y. (HeckCattle(x) & BreedingBack(x) & Auroch(y) & Resemble(x, y))",
            "all x. (HeckCattle(x) -> Animal(x))",
            "all x. (Auroch(x) -> Animal(x))",
            "exists x. exists y. (Animal(x) & Animal(y) & (-(x=y)) & BreedingBack(x) & BreedingBack(y) & (exists w.(Dead(w) & Resemble(x, w)) & (-(w=z)) & (exists z.(Dead(z) & Resemble(y, z))))"
        ],
        "conclusion": "Some Heck cattle are artificially selected.",
        "conclusion-FOL": "exists x. exists y.(HeckCattle(x) & ArtificialSelection(x) & (-(x=y)) & HeckCattle(y) & ArtificialSelection(y))",
        "label": "ERROR"
    },
    {
        "premises": [
            "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
            "Heck cattle were bred back in the 1920s to resemble the aurochs.",
            "Heck cattle are animals.",
            "Aurochs are animals.",
            "Some animals to be bred back resemble extinct animals."
        ],
        "premises-FOL": [
            "all x. (BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreedingOfDomesticAnimals(x)))",
            "exists x. exists y. (HeckCattle(x) & BreedingBack(x) & Auroch(y) & Resemble(x, y))",
            "all x. (HeckCattle(x) -> Animal(x))",
            "all x. (Auroch(x) -> Animal(x))",
            "exists x. exists y. (Animal(x) & Animal(y) & (-(x=y)) & BreedingBack(x) & BreedingBack(y) & (exists w.(Dead(w) & Resemble(x, w)) & (-(w=z)) & (exists z.(Dead(z) & Resemble(y, z))))"
        ],
        "conclusion": "Aurochs are extinct.",
        "conclusion-FOL": "all x. (Auroch(x) -> Dead(x))",
        "label": "ERROR"
    },
    {
        "premises": [
            "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
            "If someone has United States citizenship, then they can register to vote in the United States.",
            "A person either has United States citizenship or Taiwanese citizenship.",
            "No Russian Federation officials hold Taiwanese citizenship. ",
            "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
            "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
        ],
        "premises-FOL": [
            "all x. (CanRegisterToVoteIn(x, UnitedStates) -> CanParticipateIn(x, TwoZeroTwoFourUnitedStatesElection))",
            "all x. (Have(x, UnitedStatesCitizenship) -> CanRegisterToVoteIn(x, UnitedStates))",
            "all x. (Have(x, UnitedStatesCitizenship) | Have(x, TaiwaneseCitizenship))",
            "all x. (Russian(x) & FederationOfficial(x) -> -Have(x, TaiwaneseCitizenship))",
            "-Have(Vladimir, TaiwaneseCitizenship) & -ManagerAt(Vladimir, Gazprom)",
            "(Russian(Ekaterina) & FederationOfficial(Ekaterina)) | CanRegisterToVoteIn(Ekaterina, UnitedStates)"
        ],
        "conclusion": "Vladimir is a Russian federation official",
        "conclusion-FOL": "Russian(Vladimir) & FederationOfficial(Vladimir)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
            "If someone has United States citizenship, then they can register to vote in the United States.",
            "A person either has United States citizenship or Taiwanese citizenship.",
            "No Russian Federation officials hold Taiwanese citizenship. ",
            "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
            "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
        ],
        "premises-FOL": [
            "all x. (CanRegisterToVoteIn(x, UnitedStates) -> CanParticipateIn(x, TwoZeroTwoFourUnitedStatesElection))",
            "all x. (Have(x, UnitedStatesCitizenship) -> CanRegisterToVoteIn(x, UnitedStates))",
            "all x. (Have(x, UnitedStatesCitizenship) | Have(x, TaiwaneseCitizenship))",
            "all x. (Russian(x) & FederationOfficial(x) -> -Have(x, TaiwaneseCitizenship))",
            "-Have(Vladimir, TaiwaneseCitizenship) & -ManagerAt(Vladimir, Gazprom)",
            "(Russian(Ekaterina) & FederationOfficial(Ekaterina)) | CanRegisterToVoteIn(Ekaterina, UnitedStates)"
        ],
        "conclusion": "Vladimir is not a Russian federation official",
        "conclusion-FOL": "-(Russian(Vladimir) & FederationOfficial(Vladimir))",
        "label": "Uncertain"
    },
    {
        "premises": [
            "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
            "If someone has United States citizenship, then they can register to vote in the United States.",
            "A person either has United States citizenship or Taiwanese citizenship.",
            "No Russian Federation officials hold Taiwanese citizenship. ",
            "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
            "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
        ],
        "premises-FOL": [
            "all x. (CanRegisterToVoteIn(x, UnitedStates) -> CanParticipateIn(x, TwoZeroTwoFourUnitedStatesElection))",
            "all x. (Have(x, UnitedStatesCitizenship) -> CanRegisterToVoteIn(x, UnitedStates))",
            "all x. (Have(x, UnitedStatesCitizenship) | Have(x, TaiwaneseCitizenship))",
            "all x. (Russian(x) & FederationOfficial(x) -> -Have(x, TaiwaneseCitizenship))",
            "-Have(Vladimir, TaiwaneseCitizenship) & -ManagerAt(Vladimir, Gazprom)",
            "(Russian(Ekaterina) & FederationOfficial(Ekaterina)) | CanRegisterToVoteIn(Ekaterina, UnitedStates)"
        ],
        "conclusion": "Ekaterina can participate in the 2024 United States presidential election or is a manager at Gazprom.",
        "conclusion-FOL": "CanParticipateIn(Ekaterina, TwoZeroTwoFourUnitedStatesElection) | ManagerAt(Ekaterina, Gazprom)",
        "label": "True"
    },
    {
        "premises": [
            "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
            "If someone has United States citizenship, then they can register to vote in the United States.",
            "A person either has United States citizenship or Taiwanese citizenship.",
            "No Russian Federation officials hold Taiwanese citizenship. ",
            "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
            "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
        ],
        "premises-FOL": [
            "all x. (CanRegisterToVoteIn(x, UnitedStates) -> CanParticipateIn(x, TwoZeroTwoFourUnitedStatesElection))",
            "all x. (Have(x, UnitedStatesCitizenship) -> CanRegisterToVoteIn(x, UnitedStates))",
            "all x. (Have(x, UnitedStatesCitizenship) | Have(x, TaiwaneseCitizenship))",
            "all x. (Russian(x) & FederationOfficial(x) -> -Have(x, TaiwaneseCitizenship))",
            "-Have(Vladimir, TaiwaneseCitizenship) & -ManagerAt(Vladimir, Gazprom)",
            "(Russian(Ekaterina) & FederationOfficial(Ekaterina)) | CanRegisterToVoteIn(Ekaterina, UnitedStates)"
        ],
        "conclusion": "Ekaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom.",
        "conclusion-FOL": "((CanParticipateIn(Ekaterina, TwoZeroTwoFourUnitedStatesElection) & -ManagerAt(Vladimir, Gazprom)) | (-CanParticipateIn(Ekaterina, TwoZeroTwoFourUnitedStatesElection) & ManagerAt(Vladimir, Gazprom)))",
        "label": "True"
    },
    {
        "premises": [
            "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
            "If someone has United States citizenship, then they can register to vote in the United States.",
            "A person either has United States citizenship or Taiwanese citizenship.",
            "No Russian Federation officials hold Taiwanese citizenship. ",
            "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
            "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
        ],
        "premises-FOL": [
            "all x. (CanRegisterToVoteIn(x, UnitedStates) -> CanParticipateIn(x, TwoZeroTwoFourUnitedStatesElection))",
            "all x. (Have(x, UnitedStatesCitizenship) -> CanRegisterToVoteIn(x, UnitedStates))",
            "all x. (Have(x, UnitedStatesCitizenship) | Have(x, TaiwaneseCitizenship))",
            "all x. (Russian(x) & FederationOfficial(x) -> -Have(x, TaiwaneseCitizenship))",
            "-Have(Vladimir, TaiwaneseCitizenship) & -ManagerAt(Vladimir, Gazprom)",
            "(Russian(Ekaterina) & FederationOfficial(Ekaterina)) | CanRegisterToVoteIn(Ekaterina, UnitedStates)"
        ],
        "conclusion": "It is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election.",
        "conclusion-FOL": "CanRegisterToVoteIn(Ekaterina, UnitedStates) & CanParticipateIn(Vladimir, TwoZeroTwoFourUnitedStatesElection)",
        "label": "ERROR"
    },
    {
        "premises": [
            "New Vessel Press is a publishing house specializing in translating foreign literature into English.",
            "All of New Vessel Press's published books are in English.",
            "Neapolitan Chronicles is a book published by New Vessel Press.",
            "Neapolitan Chronicles was translated from Italian.",
            "Palace of Flies is a book published by New Vessel Press."
        ],
        "premises-FOL": [
            "PublishingHouse(NewVesselPress) & SpecializesInTranslatingIntoEnglish(NewVesselPress, ForeignLiterature)",
            "all x. ((Book(x) & PublishedBy(x, NewVesselPress)) -> In(x, English))",
            "Book(NeapolitanChronicles) & PublishedBy(NeapolitanChronicles, NewVesselPress)",
            "TranslatedFrom(NeapolitanChronicles, Italian)",
            "Book(PalaceOfFlies) & PublishedBy(PalaceOfFlies, NewVesselPress)"
        ],
        "conclusion": "Neapolitan Chronicles is an English book.",
        "conclusion-FOL": "Book(NeapolitanChronicles) & In(NeapolitanChronicles, English)",
        "label": "True"
    },
    {
        "premises": [
            "New Vessel Press is a publishing house specializing in translating foreign literature into English.",
            "All of New Vessel Press's published books are in English.",
            "Neapolitan Chronicles is a book published by New Vessel Press.",
            "Neapolitan Chronicles was translated from Italian.",
            "Palace of Flies is a book published by New Vessel Press."
        ],
        "premises-FOL": [
            "PublishingHouse(NewVesselPress) & SpecializesInTranslatingIntoEnglish(NewVesselPress, ForeignLiterature)",
            "all x. ((Book(x) & PublishedBy(x, NewVesselPress)) -> In(x, English))",
            "Book(NeapolitanChronicles) & PublishedBy(NeapolitanChronicles, NewVesselPress)",
            "TranslatedFrom(NeapolitanChronicles, Italian)",
            "Book(PalaceOfFlies) & PublishedBy(PalaceOfFlies, NewVesselPress)"
        ],
        "conclusion": "Harry Potter was published by New Vessel Press.",
        "conclusion-FOL": "PublishedBy(HarryPotter, NewVesselPress)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "New Vessel Press is a publishing house specializing in translating foreign literature into English.",
            "All of New Vessel Press's published books are in English.",
            "Neapolitan Chronicles is a book published by New Vessel Press.",
            "Neapolitan Chronicles was translated from Italian.",
            "Palace of Flies is a book published by New Vessel Press."
        ],
        "premises-FOL": [
            "PublishingHouse(NewVesselPress) & SpecializesInTranslatingIntoEnglish(NewVesselPress, ForeignLiterature)",
            "all x. ((Book(x) & PublishedBy(x, NewVesselPress)) -> In(x, English))",
            "Book(NeapolitanChronicles) & PublishedBy(NeapolitanChronicles, NewVesselPress)",
            "TranslatedFrom(NeapolitanChronicles, Italian)",
            "Book(PalaceOfFlies) & PublishedBy(PalaceOfFlies, NewVesselPress)"
        ],
        "conclusion": "Palace of Flies was translated from Italian.",
        "conclusion-FOL": "TranslatedFrom(PalaceOfFlies, Italian)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "All hydrocarbons are organic compounds .",
            "All alkanes are hydrocarbons",
            "All organic compounds are chemical compounds.",
            "All organic compounds contain carbon.",
            "No chemical compounds contain only one element.",
            "The mixture either both is a chemical compound and contains only one element, or neither. "
        ],
        "premises-FOL": [
            "all x. (Hydrocarbon(x) -> Orgranic(x) & Compound(x))",
            "all x. (Alkane(x) -> Hydrocarbon(x))",
            "all x. (Orgranic(x) & Compound(x) -> Chemical(x) & Compound(x))",
            "all x. (Orgranic(x) & Compound(x) -> Contain(x, Carbon))",
            "all x. (Chemical(x) & Compound(x) -> all y. all z. (-(Contain(x, y) & Contain(x, z) & (y=z))))",
            "-((((Chemical(Mixture) & Compound(Mixture)) & -(all y. all z. (Contain(x, y) & Contain(x, z) & y=z))) | (-((Chemical(Mixture) & Compound(Mixture)) & (all y. all z. (Contain(x, y) & Contain(x, z) & y=z)))))"
        ],
        "conclusion": "The mixture contains carbon.",
        "conclusion-FOL": "Contain(Mixture, Carbon)",
        "label": "ERROR"
    },
    {
        "premises": [
            "All hydrocarbons are organic compounds .",
            "All alkanes are hydrocarbons",
            "All organic compounds are chemical compounds.",
            "All organic compounds contain carbon.",
            "No chemical compounds contain only one element.",
            "The mixture either both is a chemical compound and contains only one element, or neither. "
        ],
        "premises-FOL": [
            "all x. (Hydrocarbon(x) -> Orgranic(x) & Compound(x))",
            "all x. (Alkane(x) -> Hydrocarbon(x))",
            "all x. (Orgranic(x) & Compound(x) -> Chemical(x) & Compound(x))",
            "all x. (Orgranic(x) & Compound(x) -> Contain(x, Carbon))",
            "all x. (Chemical(x) & Compound(x) -> all y. all z. (-(Contain(x, y) & Contain(x, z) & (y=z))))",
            "-((((Chemical(Mixture) & Compound(Mixture)) & -(all y. all z. (Contain(x, y) & Contain(x, z) & y=z))) | (-((Chemical(Mixture) & Compound(Mixture)) & (all y. all z. (Contain(x, y) & Contain(x, z) & y=z)))))"
        ],
        "conclusion": "The mixture is an alkane and contains carbon.",
        "conclusion-FOL": "Alkane(Mixture) & Contain(Mixture, Carbon)",
        "label": "ERROR"
    },
    {
        "premises": [
            "All hydrocarbons are organic compounds .",
            "All alkanes are hydrocarbons",
            "All organic compounds are chemical compounds.",
            "All organic compounds contain carbon.",
            "No chemical compounds contain only one element.",
            "The mixture either both is a chemical compound and contains only one element, or neither. "
        ],
        "premises-FOL": [
            "all x. (Hydrocarbon(x) -> Orgranic(x) & Compound(x))",
            "all x. (Alkane(x) -> Hydrocarbon(x))",
            "all x. (Orgranic(x) & Compound(x) -> Chemical(x) & Compound(x))",
            "all x. (Orgranic(x) & Compound(x) -> Contain(x, Carbon))",
            "all x. (Chemical(x) & Compound(x) -> all y. all z. (-(Contain(x, y) & Contain(x, z) & (y=z))))",
            "-((((Chemical(Mixture) & Compound(Mixture)) & -(all y. all z. (Contain(x, y) & Contain(x, z) & y=z))) | (-((Chemical(Mixture) & Compound(Mixture)) & (all y. all z. (Contain(x, y) & Contain(x, z) & y=z)))))"
        ],
        "conclusion": "If the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane.",
        "conclusion-FOL": "(all x. all y. (Contain(Mixture, x) & Contain(Mixture, y) & x=y)) | Contain(Mixture, Carbon) -> -(Chemical(Mixture) & Compound(Mixture)) & -Alkane(Mixture))",
        "label": "ERROR"
    },
    {
        "premises": [
            "All humans are mortal.",
            "All Greeks are humans."
        ],
        "premises-FOL": [
            "all x. (Human(x) -> Mortal(x))",
            "all x. (Greek(x) -> Human(x))"
        ],
        "conclusion": "Some Greeks are mortal.",
        "conclusion-FOL": "exists x. exists y. (Greek(x) & Greek(y) & Mortal(x) & Mortal(y) & -(x=y))",
        "label": "Uncertain"
    },
    {
        "premises": [
            "None of the students who currently work in the library are from the computer science department. ",
            "All of the students with part-time jobs offered by the university currently work in the library. ",
            "All of the students who are taking the database course are from the computer science department. ",
            "All of the students taking a class with Professor David are taking the database course. ",
            "All students working in the lab are taking a class with Professor David.",
            "James is a student working in the lab. ",
            "James doesn't work in the lab or have a part-time job offered by the university."
        ],
        "premises-FOL": [
            "all x. (Student(x) & WorkIn(x, Library) -> (-From(x, ComputerScienceDepartment)))",
            "all x. (Student(x) & Have(x, PartTimeJob) & OfferedBy(y, University) -> WorkIn(x, Library))",
            "all x. ((Student(x) & Take(x, DatabaseCourse)) -> From(x, ComputerScienceDepartment))",
            "all x. ((Student(x) & InstructedBy(x, ProfessorDavid)) -> Take(x, DatabaseCourse))",
            "all x. ((Student(x) & WorkIn(x, Lab)) -> InstructedBy(x, ProfessorDavid))",
            "Student(James) & WorkIn(James, Lab)",
            "-exists x. (PartTimeJob(x) & Have(James, x) & OfferedBy(x, ComputerScienceDepartment)) & -WorkIn(James, Lab)"
        ],
        "conclusion": "James has a part-time job offered by the university.",
        "conclusion-FOL": "exists y. (PartTimeJob(y) & Have(James, y) & OfferedBy(y, University))",
        "label": "ERROR"
    },
    {
        "premises": [
            "None of the students who currently work in the library are from the computer science department. ",
            "All of the students with part-time jobs offered by the university currently work in the library. ",
            "All of the students who are taking the database course are from the computer science department. ",
            "All of the students taking a class with Professor David are taking the database course. ",
            "All students working in the lab are taking a class with Professor David.",
            "James is a student working in the lab. ",
            "James doesn't work in the lab or have a part-time job offered by the university."
        ],
        "premises-FOL": [
            "all x. (Student(x) & WorkIn(x, Library) -> (-From(x, ComputerScienceDepartment)))",
            "all x. (Student(x) & Have(x, PartTimeJob) & OfferedBy(y, University) -> WorkIn(x, Library))",
            "all x. ((Student(x) & Take(x, DatabaseCourse)) -> From(x, ComputerScienceDepartment))",
            "all x. ((Student(x) & InstructedBy(x, ProfessorDavid)) -> Take(x, DatabaseCourse))",
            "all x. ((Student(x) & WorkIn(x, Lab)) -> InstructedBy(x, ProfessorDavid))",
            "Student(James) & WorkIn(James, Lab)",
            "-exists x. (PartTimeJob(x) & Have(James, x) & OfferedBy(x, ComputerScienceDepartment)) & -WorkIn(James, Lab)"
        ],
        "conclusion": "James does not have a part-time job offered by the university.",
        "conclusion-FOL": "-exists y.(PartTimeJob(y) & Have(James, y) & OfferedBy(y, University))",
        "label": "ERROR"
    },
    {
        "premises": [
            "None of the students who currently work in the library are from the computer science department. ",
            "All of the students with part-time jobs offered by the university currently work in the library. ",
            "All of the students who are taking the database course are from the computer science department. ",
            "All of the students taking a class with Professor David are taking the database course. ",
            "All students working in the lab are taking a class with Professor David.",
            "James is a student working in the lab. ",
            "James doesn't work in the lab or have a part-time job offered by the university."
        ],
        "premises-FOL": [
            "all x. (Student(x) & WorkIn(x, Library) -> (-From(x, ComputerScienceDepartment)))",
            "all x. (Student(x) & Have(x, PartTimeJob) & OfferedBy(y, University) -> WorkIn(x, Library))",
            "all x. ((Student(x) & Take(x, DatabaseCourse)) -> From(x, ComputerScienceDepartment))",
            "all x. ((Student(x) & InstructedBy(x, ProfessorDavid)) -> Take(x, DatabaseCourse))",
            "all x. ((Student(x) & WorkIn(x, Lab)) -> InstructedBy(x, ProfessorDavid))",
            "Student(James) & WorkIn(James, Lab)",
            "-exists x. (PartTimeJob(x) & Have(James, x) & OfferedBy(x, ComputerScienceDepartment)) & -WorkIn(James, Lab)"
        ],
        "conclusion": "James either takes the database course or has a part-time job offered by the university.",
        "conclusion-FOL": "Take(James, DatabaseCourse) \u2295 (exists y. (PartTimeJob(y) & Have(James, y) & OfferedBy(y, University))",
        "label": "ERROR"
    },
    {
        "premises": [
            "None of the students who currently work in the library are from the computer science department. ",
            "All of the students with part-time jobs offered by the university currently work in the library. ",
            "All of the students who are taking the database course are from the computer science department. ",
            "All of the students taking a class with Professor David are taking the database course. ",
            "All students working in the lab are taking a class with Professor David.",
            "James is a student working in the lab. ",
            "James doesn't work in the lab or have a part-time job offered by the university."
        ],
        "premises-FOL": [
            "all x. (Student(x) & WorkIn(x, Library) -> (-From(x, ComputerScienceDepartment)))",
            "all x. (Student(x) & Have(x, PartTimeJob) & OfferedBy(y, University) -> WorkIn(x, Library))",
            "all x. ((Student(x) & Take(x, DatabaseCourse)) -> From(x, ComputerScienceDepartment))",
            "all x. ((Student(x) & InstructedBy(x, ProfessorDavid)) -> Take(x, DatabaseCourse))",
            "all x. ((Student(x) & WorkIn(x, Lab)) -> InstructedBy(x, ProfessorDavid))",
            "Student(James) & WorkIn(James, Lab)",
            "-exists x. (PartTimeJob(x) & Have(James, x) & OfferedBy(x, ComputerScienceDepartment)) & -WorkIn(James, Lab)"
        ],
        "conclusion": "James takes the database course.",
        "conclusion-FOL": "Take(James, DatabaseCourse)",
        "label": "ERROR"
    },
    {
        "premises": [
            "If George likes music, he wants to compose.",
            "If George has access to a program, he can compose.",
            "If George can compose and wants to compose, he will compose."
        ],
        "premises-FOL": [
            "LikeMusic(George) -> WantToCompose(George)",
            "AccesstoProgram(George) -> CanCompose(George)",
            "(WantToCompose(George) & CanCompose(George)) -> WillCompose(George)"
        ],
        "conclusion": "If George likes music and has access to a program, he will compose.",
        "conclusion-FOL": "(LikeMusic(George) & AccesstoProgram(George)) -> WillCompose(George)",
        "label": "True"
    },
    {
        "premises": [
            "If George likes music, he wants to compose.",
            "If George has access to a program, he can compose.",
            "If George can compose and wants to compose, he will compose."
        ],
        "premises-FOL": [
            "LikeMusic(George) -> WantToCompose(George)",
            "AccesstoProgram(George) -> CanCompose(George)",
            "(WantToCompose(George) & CanCompose(George)) -> WillCompose(George)"
        ],
        "conclusion": "If George will not compose, George can not compose.",
        "conclusion-FOL": "-WantToCompose(George) -> -WillCompose(George)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "A hawk never swims. ",
            "Some birds are hawks."
        ],
        "premises-FOL": [
            "all x. (Hawk(x) -> -Swim(x))",
            "exists x. exists y. (Bird(x) & Bird(y) & Hawk(x) & Hawk(y) & -(x=y))"
        ],
        "conclusion": "All birds swim.",
        "conclusion-FOL": "all x. (Bird(x) -> Swim(x))",
        "label": "False"
    },
    {
        "premises": [
            "Some show airing at 8 pm on Monday gives out roses on TV.",
            "If a show gives out roses on TV, then the show is an episode of The Bachelor.",
            "The Bachelor portrays the lives of real people.",
            "All shows portraying the lives of real people are reality TV shows.",
            "Breaking Bad is a show.",
            "Breaking Bad is not a reality TV show."
        ],
        "premises-FOL": [
            "exists x. (Show(x) & AiringAtOn(x, EightPMMonday) & GivenOutOn(x, Rose, tV))",
            "all x. (Show(x) & GivenOutOnAt(Rose, tV, x) -> TheBachelor(x))",
            "all x. (TheBachelor(x) -> Portray(x, LifeOfRealPeople))",
            "all x. (Portray(x, LiveOfRealPeople) -> RealityTVShow(x))",
            "Show(BreakingBad)",
            "-RealityTVShow(BreakingBad)"
        ],
        "conclusion": "Breaking Bad is on Monday at 8 pm.",
        "conclusion-FOL": "all x. (MondayAtEightPM(x) & On(BreakingBad, x))",
        "label": "Uncertain"
    },
    {
        "premises": [
            "Some show airing at 8 pm on Monday gives out roses on TV.",
            "If a show gives out roses on TV, then the show is an episode of The Bachelor.",
            "The Bachelor portrays the lives of real people.",
            "All shows portraying the lives of real people are reality TV shows.",
            "Breaking Bad is a show.",
            "Breaking Bad is not a reality TV show."
        ],
        "premises-FOL": [
            "exists x. (Show(x) & AiringAtOn(x, EightPMMonday) & GivenOutOn(x, Rose, tV))",
            "all x. (Show(x) & GivenOutOnAt(Rose, tV, x) -> TheBachelor(x))",
            "all x. (TheBachelor(x) -> Portray(x, LifeOfRealPeople))",
            "all x. (Portray(x, LiveOfRealPeople) -> RealityTVShow(x))",
            "Show(BreakingBad)",
            "-RealityTVShow(BreakingBad)"
        ],
        "conclusion": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
        "conclusion-FOL": "all x. all y. (MondayAtEightPM(x) & Rose(y) & GivenOutOn(y, Tv) & On(Tv, x) & From(y, BreakingBad))",
        "label": "ERROR"
    },
    {
        "premises": [
            "Some show airing at 8 pm on Monday gives out roses on TV.",
            "If a show gives out roses on TV, then the show is an episode of The Bachelor.",
            "The Bachelor portrays the lives of real people.",
            "All shows portraying the lives of real people are reality TV shows.",
            "Breaking Bad is a show.",
            "Breaking Bad is not a reality TV show."
        ],
        "premises-FOL": [
            "exists x. (Show(x) & AiringAtOn(x, EightPMMonday) & GivenOutOn(x, Rose, tV))",
            "all x. (Show(x) & GivenOutOnAt(Rose, tV, x) -> TheBachelor(x))",
            "all x. (TheBachelor(x) -> Portray(x, LifeOfRealPeople))",
            "all x. (Portray(x, LiveOfRealPeople) -> RealityTVShow(x))",
            "Show(BreakingBad)",
            "-RealityTVShow(BreakingBad)"
        ],
        "conclusion": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
        "conclusion-FOL": "all x. all y. ((Rose(y) & GivenOutOn(y, Tv) & On(Tv, x) & From(y, BreakingBad)) -> MondayAtEightPM(x))",
        "label": "ERROR"
    },
    {
        "premises": [
            "Heinrich Schmidt was a German politician. ",
            "Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
        ],
        "premises-FOL": [
            "German(HeinrichSchmidt) & Politician(HeinrichSchmidt)",
            "Member(HeinrichSchmidt, PrussianStateParliament) & Member(HeinrichSchmidt, NaziReichstag)"
        ],
        "conclusion": "Heinrich Schmidt was German or Russian or both.",
        "conclusion-FOL": "German(HeinrichSchmidt) | Russian(HeinrichSchmidt)",
        "label": "True"
    },
    {
        "premises": [
            "Heinrich Schmidt was a German politician. ",
            "Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
        ],
        "premises-FOL": [
            "German(HeinrichSchmidt) & Politician(HeinrichSchmidt)",
            "Member(HeinrichSchmidt, PrussianStateParliament) & Member(HeinrichSchmidt, NaziReichstag)"
        ],
        "conclusion": "Some German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
        "conclusion-FOL": "exists x. (German(x) & Politician(x) & Member(x, PrussianStateParliament) & Member(x, NaziReichstag))",
        "label": "True"
    },
    {
        "premises": [
            "Heinrich Schmidt was a German politician. ",
            "Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
        ],
        "premises-FOL": [
            "German(HeinrichSchmidt) & Politician(HeinrichSchmidt)",
            "Member(HeinrichSchmidt, PrussianStateParliament) & Member(HeinrichSchmidt, NaziReichstag)"
        ],
        "conclusion": "No politicians are part of the Nazi Reichstag.",
        "conclusion-FOL": "all x. (Politician(x) -> -Member(x, NaziReichstag))",
        "label": "False"
    },
    {
        "premises": [
            "If something is a deadly disease, then it comes with a low survival rate. ",
            "Severe cancers are deadly diseases.",
            "Bile duct cancer is a severe form cancer. ",
            "All Cholangiocarcinoma is bile duct cancer.",
            "Mild flu comes with a low survival rate.",
            "Colorectal cancer is not both a bile duct cancer and with a low survival rate."
        ],
        "premises-FOL": [
            "all x. (DeadlyDiseases(x) -> ComeWith(x, LowSurvivalRate))",
            "all x. (SevereCancer(x) -> DeadlyDiseases(x))",
            "all x. (BileDuctCancer(x) -> SevereCancer(x))",
            "all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))",
            "all x. (MildFlu(x) -> -ComeWith(x, LowSurvivalRate)) ",
            "-(BileDuctCancer(ColorectalCancer) & ComeWith(ColorectalCancer, LowSurvivalRate))"
        ],
        "conclusion": "Colorectal cancer is a kind of severe cancer",
        "conclusion-FOL": "SevereCancer(ColorectalCancer)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "If something is a deadly disease, then it comes with a low survival rate. ",
            "Severe cancers are deadly diseases.",
            "Bile duct cancer is a severe form cancer. ",
            "All Cholangiocarcinoma is bile duct cancer.",
            "Mild flu comes with a low survival rate.",
            "Colorectal cancer is not both a bile duct cancer and with a low survival rate."
        ],
        "premises-FOL": [
            "all x. (DeadlyDiseases(x) -> ComeWith(x, LowSurvivalRate))",
            "all x. (SevereCancer(x) -> DeadlyDiseases(x))",
            "all x. (BileDuctCancer(x) -> SevereCancer(x))",
            "all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))",
            "all x. (MildFlu(x) -> -ComeWith(x, LowSurvivalRate)) ",
            "-(BileDuctCancer(ColorectalCancer) & ComeWith(ColorectalCancer, LowSurvivalRate))"
        ],
        "conclusion": "If colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu.",
        "conclusion-FOL": "-(BileDuctCancer(ColorectalCancer) | Cholangiocarcinoma(ColorectalCancer)) | (BileDuctCancer(ColorectalCancer) & MildFlu(ColorectalCancer))",
        "label": "True"
    },
    {
        "premises": [
            "If something is a deadly disease, then it comes with a low survival rate. ",
            "Severe cancers are deadly diseases.",
            "Bile duct cancer is a severe form cancer. ",
            "All Cholangiocarcinoma is bile duct cancer.",
            "Mild flu comes with a low survival rate.",
            "Colorectal cancer is not both a bile duct cancer and with a low survival rate."
        ],
        "premises-FOL": [
            "all x. (DeadlyDiseases(x) -> ComeWith(x, LowSurvivalRate))",
            "all x. (SevereCancer(x) -> DeadlyDiseases(x))",
            "all x. (BileDuctCancer(x) -> SevereCancer(x))",
            "all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))",
            "all x. (MildFlu(x) -> -ComeWith(x, LowSurvivalRate)) ",
            "-(BileDuctCancer(ColorectalCancer) & ComeWith(ColorectalCancer, LowSurvivalRate))"
        ],
        "conclusion": "Colorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above.",
        "conclusion-FOL": "Cholangiocarcinoma(ColorectalCancer) & (MildFlu(ColorectalCancer) | BileDuctCancer(ColorectalCancer))",
        "label": "False"
    },
    {
        "premises": [
            "All people who eat salads regularly are very conscious about their health and eating habits.",
            "All people who grew up in health-conscious childhood homes eat salads regularly.",
            "All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.",
            "All people who disregard their physical well-being are not very conscious about their health and eating habits.",
            "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
            "Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither."
        ],
        "premises-FOL": [
            "all x. (RegularlyEat(x, Salad) -> ConsciousAbout(x, Health) & ConsciousAbout(x, EatinggHabit))",
            "all x. (GrewUpIn(x, Health-ConsciousChildhoodHome) -> RegularlyEat(x, Salad))",
            "all x. (Fulfill(x, DailyNutritionalIntake) -> GrewUpIn(x, Health-ConsciousChildhoodHome))",
            "all x. (Disregard(x, PhysicalWellbeing) -> -(ConsciousAbout(x, Health) & ConsciousAbout(x, EatingHabit)))",
            "all x. (VisitDaily(x, Gym) -> Fulfill(x, DailyNutritionalIntake))",
            "-(((GrowUpIn(Taylor, Health-ConsciousChildhoodHome) & -Disregard(Taylor, PhysicalWellbeing)) | (-GrowUpIn(Taylor, Health-ConsciousChildhoodHome) & Disregard(Taylor, PhysicalWellbeing))))"
        ],
        "conclusion": "Taylor eats salads regularly.",
        "conclusion-FOL": "RegularlyEat(Taylor, Salad)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "All people who eat salads regularly are very conscious about their health and eating habits.",
            "All people who grew up in health-conscious childhood homes eat salads regularly.",
            "All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.",
            "All people who disregard their physical well-being are not very conscious about their health and eating habits.",
            "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
            "Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither."
        ],
        "premises-FOL": [
            "all x. (RegularlyEat(x, Salad) -> ConsciousAbout(x, Health) & ConsciousAbout(x, EatinggHabit))",
            "all x. (GrewUpIn(x, Health-ConsciousChildhoodHome) -> RegularlyEat(x, Salad))",
            "all x. (Fulfill(x, DailyNutritionalIntake) -> GrewUpIn(x, Health-ConsciousChildhoodHome))",
            "all x. (Disregard(x, PhysicalWellbeing) -> -(ConsciousAbout(x, Health) & ConsciousAbout(x, EatingHabit)))",
            "all x. (VisitDaily(x, Gym) -> Fulfill(x, DailyNutritionalIntake))",
            "-(((GrowUpIn(Taylor, Health-ConsciousChildhoodHome) & -Disregard(Taylor, PhysicalWellbeing)) | (-GrowUpIn(Taylor, Health-ConsciousChildhoodHome) & Disregard(Taylor, PhysicalWellbeing))))"
        ],
        "conclusion": "Taylor visits the gym at least once a day.",
        "conclusion-FOL": "VisitDaily(Taylor, Gym)",
        "label": "ERROR"
    },
    {
        "premises": [
            "All people who eat salads regularly are very conscious about their health and eating habits.",
            "All people who grew up in health-conscious childhood homes eat salads regularly.",
            "All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.",
            "All people who disregard their physical well-being are not very conscious about their health and eating habits.",
            "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
            "Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither."
        ],
        "premises-FOL": [
            "all x. (RegularlyEat(x, Salad) -> ConsciousAbout(x, Health) & ConsciousAbout(x, EatinggHabit))",
            "all x. (GrewUpIn(x, Health-ConsciousChildhoodHome) -> RegularlyEat(x, Salad))",
            "all x. (Fulfill(x, DailyNutritionalIntake) -> GrewUpIn(x, Health-ConsciousChildhoodHome))",
            "all x. (Disregard(x, PhysicalWellbeing) -> -(ConsciousAbout(x, Health) & ConsciousAbout(x, EatingHabit)))",
            "all x. (VisitDaily(x, Gym) -> Fulfill(x, DailyNutritionalIntake))",
            "-(((GrowUpIn(Taylor, Health-ConsciousChildhoodHome) & -Disregard(Taylor, PhysicalWellbeing)) | (-GrowUpIn(Taylor, Health-ConsciousChildhoodHome) & Disregard(Taylor, PhysicalWellbeing))))"
        ],
        "conclusion": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
        "conclusion-FOL": "-GrowUpIn(Taylor, Health-ConsciousChildhoodHome) & -VisitDaily(Taylor, Gym))",
        "label": "ERROR"
    },
    {
        "premises": [
            "The summer Olympic games is a sporting event. ",
            "The last summer Olympic games was in Tokyo.",
            "The United States won the most medals in Tokyo. "
        ],
        "premises-FOL": [
            "SportingEvent(Olympics)",
            "LastSummerOlympics(Tokyo)",
            "MostMedals(UnitedStates, Tokyo)"
        ],
        "conclusion": "The world championships is a sporting event.",
        "conclusion-FOL": "SportingEvent(Champs)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "The summer Olympic games is a sporting event. ",
            "The last summer Olympic games was in Tokyo.",
            "The United States won the most medals in Tokyo. "
        ],
        "premises-FOL": [
            "SportingEvent(Olympics)",
            "LastSummerOlympics(Tokyo)",
            "MostMedals(UnitedStates, Tokyo)"
        ],
        "conclusion": "The last summer Olympic games were not in Tokyo.",
        "conclusion-FOL": "-LastSummerOlympics(Tokyo)",
        "label": "False"
    },
    {
        "premises": [
            "The summer Olympic games is a sporting event. ",
            "The last summer Olympic games was in Tokyo.",
            "The United States won the most medals in Tokyo. "
        ],
        "premises-FOL": [
            "SportingEvent(Olympics)",
            "LastSummerOlympics(Tokyo)",
            "MostMedals(UnitedStates, Tokyo)"
        ],
        "conclusion": "The United States won the most medals in the last summer Olympic games.",
        "conclusion-FOL": "exists x. (LastSummerOlympics(x) & MostMedals(UnitedStates, x))",
        "label": "True"
    },
    {
        "premises": [
            "All horses have hooves.",
            "No humans have hooves."
        ],
        "premises-FOL": [
            "all x. (Horse(x) -> exists y. exists z. (-(y=z) & Hoof(y) & Hoof(z) & Have(x, y) & Have(x, z)))",
            "all x. (Human(x) -> -(exists y. exists z. (-(y=z) & Hoof(y) & Hoof(z) & Have(x, y) & Have(x, z))))"
        ],
        "conclusion": "Some humans are horses.",
        "conclusion-FOL": "exists x. (Human(x) & Human(y) & Horse(x) & Horse(y) & -(x=y))",
        "label": "False"
    },
    {
        "premises": [
            "Susan flies to LGA airport.",
            "The departure and arrival can not be at the same airport.",
            "John flies from LGA airport."
        ],
        "premises-FOL": [
            "FlyTo(Susan, LgaAirport)",
            "all x. all y. (((FlyFrom(x, y) & -FlyTo(x, y)) | (-FlyFrom(x, y) & FlyTo(x, y))))",
            "FlyFrom(John, LgaAirport)"
        ],
        "conclusion": "Susan flies from LGA airport.",
        "conclusion-FOL": "FlyFrom(Susan, LgaAirport)",
        "label": "False"
    },
    {
        "premises": [
            "Susan flies to LGA airport.",
            "The departure and arrival can not be at the same airport.",
            "John flies from LGA airport."
        ],
        "premises-FOL": [
            "FlyTo(Susan, LgaAirport)",
            "all x. all y. (((FlyFrom(x, y) & -FlyTo(x, y)) | (-FlyFrom(x, y) & FlyTo(x, y))))",
            "FlyFrom(John, LgaAirport)"
        ],
        "conclusion": "John flies to LGA airport.",
        "conclusion-FOL": "FlyTo(John, LgaAirport)",
        "label": "False"
    },
    {
        "premises": [
            "No one nice to animals is also mean to animals.",
            "Some grumpy people are mean to animals.",
            "All animal lovers are nice to animals.",
            "All pet owners love animals.",
            "Tom is a pet owner."
        ],
        "premises-FOL": [
            "all x. (NiceTo(x, Animal) -> -MeanTo(x, Animal))",
            "exists x. (Grumpy(x) & MeanTo(x, Animal))",
            "all x. (AnimalLover(x) -> NiceTo(x, Animal))",
            "all x. (PetOwner(x) -> AnimalLover(x))",
            "PetOwner(Tom)"
        ],
        "conclusion": "Tom is a grumpy person.",
        "conclusion-FOL": "Grumpy(Tom)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "No one nice to animals is also mean to animals.",
            "Some grumpy people are mean to animals.",
            "All animal lovers are nice to animals.",
            "All pet owners love animals.",
            "Tom is a pet owner."
        ],
        "premises-FOL": [
            "all x. (NiceTo(x, Animal) -> -MeanTo(x, Animal))",
            "exists x. (Grumpy(x) & MeanTo(x, Animal))",
            "all x. (AnimalLover(x) -> NiceTo(x, Animal))",
            "all x. (PetOwner(x) -> AnimalLover(x))",
            "PetOwner(Tom)"
        ],
        "conclusion": "Tom is not both a grumpy person and mean to animals.",
        "conclusion-FOL": "-(Grumpy(Tom) & MeanTo(Tom, Animal))",
        "label": "True"
    },
    {
        "premises": [
            "No one nice to animals is also mean to animals.",
            "Some grumpy people are mean to animals.",
            "All animal lovers are nice to animals.",
            "All pet owners love animals.",
            "Tom is a pet owner."
        ],
        "premises-FOL": [
            "all x. (NiceTo(x, Animal) -> -MeanTo(x, Animal))",
            "exists x. (Grumpy(x) & MeanTo(x, Animal))",
            "all x. (AnimalLover(x) -> NiceTo(x, Animal))",
            "all x. (PetOwner(x) -> AnimalLover(x))",
            "PetOwner(Tom)"
        ],
        "conclusion": "If Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover.",
        "conclusion-FOL": "-(Grumpy(Tom) & MeanTo(Tom, Animal)) -> -Grumpy(Tom) & -AnimalLover(Tom))",
        "label": "ERROR"
    },
    {
        "premises": [
            "A podcast is not a novel.",
            "If a person is born in American City, the person is American.",
            "If a book is a novel and it is written by a person, then the person is a novel writer.",
            "Dani Shapiro is an American writer.",
            "Family History is written by Dani Shapiro.",
            "Family History is a novel written in 2003.",
            "Dani Shapiro created a podcast called Family Secrets.",
            "Boston is an American city."
        ],
        "premises-FOL": [
            "all x. (Podcast(x) -> -Novel(x))",
            "all x.((exists y.(BornIn(x, y) & City(y) & LocatedIn(y,America)) -> American(x))",
            "all x. all y. ((Novel(x) & WrittenBy(x, y)) -> WritesNovel(y))",
            "American(Dani_Shapiro) & Writer(Dani_Shapiro)",
            "WrittenBy(Family_History, Dani_Shapiro)",
            "Novel(Family_History) & WrittenIn(Family_History, YrTwoZeroZeroThree)",
            "Podcast(Family_Secrets) & CreatedBy(Family_Secrets, Dani_Shapiro)",
            "City(Boston) & American(Boston)"
        ],
        "conclusion": "Dani Shapiro is a novel writer.",
        "conclusion-FOL": "WritesNovel(Dani_Shapiro)",
        "label": "ERROR"
    },
    {
        "premises": [
            "A podcast is not a novel.",
            "If a person is born in American City, the person is American.",
            "If a book is a novel and it is written by a person, then the person is a novel writer.",
            "Dani Shapiro is an American writer.",
            "Family History is written by Dani Shapiro.",
            "Family History is a novel written in 2003.",
            "Dani Shapiro created a podcast called Family Secrets.",
            "Boston is an American city."
        ],
        "premises-FOL": [
            "all x. (Podcast(x) -> -Novel(x))",
            "all x.((exists y.(BornIn(x, y) & City(y) & LocatedIn(y,America)) -> American(x))",
            "all x. all y. ((Novel(x) & WrittenBy(x, y)) -> WritesNovel(y))",
            "American(Dani_Shapiro) & Writer(Dani_Shapiro)",
            "WrittenBy(Family_History, Dani_Shapiro)",
            "Novel(Family_History) & WrittenIn(Family_History, YrTwoZeroZeroThree)",
            "Podcast(Family_Secrets) & CreatedBy(Family_Secrets, Dani_Shapiro)",
            "City(Boston) & American(Boston)"
        ],
        "conclusion": "Family Secrets is a novel.",
        "conclusion-FOL": "IsNovel(Family_Secrets)",
        "label": "ERROR"
    },
    {
        "premises": [
            "A podcast is not a novel.",
            "If a person is born in American City, the person is American.",
            "If a book is a novel and it is written by a person, then the person is a novel writer.",
            "Dani Shapiro is an American writer.",
            "Family History is written by Dani Shapiro.",
            "Family History is a novel written in 2003.",
            "Dani Shapiro created a podcast called Family Secrets.",
            "Boston is an American city."
        ],
        "premises-FOL": [
            "all x. (Podcast(x) -> -Novel(x))",
            "all x.((exists y.(BornIn(x, y) & City(y) & LocatedIn(y,America)) -> American(x))",
            "all x. all y. ((Novel(x) & WrittenBy(x, y)) -> WritesNovel(y))",
            "American(Dani_Shapiro) & Writer(Dani_Shapiro)",
            "WrittenBy(Family_History, Dani_Shapiro)",
            "Novel(Family_History) & WrittenIn(Family_History, YrTwoZeroZeroThree)",
            "Podcast(Family_Secrets) & CreatedBy(Family_Secrets, Dani_Shapiro)",
            "City(Boston) & American(Boston)"
        ],
        "conclusion": "Dani Shapiro was born in Boston.",
        "conclusion-FOL": "BornIn(Dani_Shapiro, Boston)",
        "label": "ERROR"
    },
    {
        "premises": [
            "Some professional basketball players are not American nationals.",
            "All professional basketball players can do jump shots.",
            "If someone can jump shots, they leap straight into the air.",
            "If someone leaps straight into the air, they activate their leg muscles. ",
            "Yuri does not activate his leg muscles."
        ],
        "premises-FOL": [
            "exists x. (Professional(x) & BasketballPlayer(x) & -AmericanNational(x))",
            "all x. (Professional(x) & BasketballPlayer(x) -> CanDo(x, JumpShot))",
            "all x. (CanDo(x, JumpShot) -> LeapStraightIntoAir(x))",
            "all x. (LeapStraightIntoAir(x) -> Activate(x, LegMuscle))",
            "-Activate(Yuri, LegMuscle)"
        ],
        "conclusion": "Yuri is an American national.",
        "conclusion-FOL": "AmericanNational(Yuri)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "Some professional basketball players are not American nationals.",
            "All professional basketball players can do jump shots.",
            "If someone can jump shots, they leap straight into the air.",
            "If someone leaps straight into the air, they activate their leg muscles. ",
            "Yuri does not activate his leg muscles."
        ],
        "premises-FOL": [
            "exists x. (Professional(x) & BasketballPlayer(x) & -AmericanNational(x))",
            "all x. (Professional(x) & BasketballPlayer(x) -> CanDo(x, JumpShot))",
            "all x. (CanDo(x, JumpShot) -> LeapStraightIntoAir(x))",
            "all x. (LeapStraightIntoAir(x) -> Activate(x, LegMuscle))",
            "-Activate(Yuri, LegMuscle)"
        ],
        "conclusion": "Yuri is not an American professional basketball player.",
        "conclusion-FOL": "-(AmericanNational(Yuri) & Professional(Yuri) & BasketballPlayer(Yuri))",
        "label": "True"
    },
    {
        "premises": [
            "Some professional basketball players are not American nationals.",
            "All professional basketball players can do jump shots.",
            "If someone can jump shots, they leap straight into the air.",
            "If someone leaps straight into the air, they activate their leg muscles. ",
            "Yuri does not activate his leg muscles."
        ],
        "premises-FOL": [
            "exists x. (Professional(x) & BasketballPlayer(x) & -AmericanNational(x))",
            "all x. (Professional(x) & BasketballPlayer(x) -> CanDo(x, JumpShot))",
            "all x. (CanDo(x, JumpShot) -> LeapStraightIntoAir(x))",
            "all x. (LeapStraightIntoAir(x) -> Activate(x, LegMuscle))",
            "-Activate(Yuri, LegMuscle)"
        ],
        "conclusion": "Yuri is an American professional basketball player.",
        "conclusion-FOL": "AmericanNational(Yuri) & Professional(Yuri) & BasketballPlayer(Yuri)",
        "label": "False"
    },
    {
        "premises": [
            "Some professional basketball players are not American nationals.",
            "All professional basketball players can do jump shots.",
            "If someone can jump shots, they leap straight into the air.",
            "If someone leaps straight into the air, they activate their leg muscles. ",
            "Yuri does not activate his leg muscles."
        ],
        "premises-FOL": [
            "exists x. (Professional(x) & BasketballPlayer(x) & -AmericanNational(x))",
            "all x. (Professional(x) & BasketballPlayer(x) -> CanDo(x, JumpShot))",
            "all x. (CanDo(x, JumpShot) -> LeapStraightIntoAir(x))",
            "all x. (LeapStraightIntoAir(x) -> Activate(x, LegMuscle))",
            "-Activate(Yuri, LegMuscle)"
        ],
        "conclusion": "If Yuri does not leap straight into the air, then Yuri is an American professional basketball player.",
        "conclusion-FOL": "-LeapStraightIntoAir(Yuri) -> (AmericanNational(Yuri) & Professional(Yuri) & BasketballPlayer(Yuri))",
        "label": "False"
    },
    {
        "premises": [
            "Some professional basketball players are not American nationals.",
            "All professional basketball players can do jump shots.",
            "If someone can jump shots, they leap straight into the air.",
            "If someone leaps straight into the air, they activate their leg muscles. ",
            "Yuri does not activate his leg muscles."
        ],
        "premises-FOL": [
            "exists x. (Professional(x) & BasketballPlayer(x) & -AmericanNational(x))",
            "all x. (Professional(x) & BasketballPlayer(x) -> CanDo(x, JumpShot))",
            "all x. (CanDo(x, JumpShot) -> LeapStraightIntoAir(x))",
            "all x. (LeapStraightIntoAir(x) -> Activate(x, LegMuscle))",
            "-Activate(Yuri, LegMuscle)"
        ],
        "conclusion": "If Yuri is not an American professional basketball player, then Yuri is a professional basketball player.",
        "conclusion-FOL": "-(AmericanNational(Yuri) & Professional(Yuri) & BasketballPlayer(Yuri)) -> (Professional(Yuri) & BasketballPlayer(Yuri))",
        "label": "False"
    },
    {
        "premises": [
            "Events are either happy or sad.",
            "At least one event is happy. "
        ],
        "premises-FOL": [
            "all x. (Event(x) -> ((Happy(x) & -Sad(x)) | (-Happy(x) & Sad(x))))",
            "exists x. (Event(x) & Happy(x)) "
        ],
        "conclusion": "All events are sad.",
        "conclusion-FOL": "all x. (Event(x) -> Sad(x))",
        "label": "False"
    },
    {
        "premises": [
            "The winner of the 1992 du Maurier Classic was Steinhauer.",
            "Steinhauer participated in the 1992 du Maurier Classic.",
            "One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.",
            "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
            "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
        ],
        "premises-FOL": [
            "WinnerOf(Steinhauer, DuMaurierClassic, YearOneNineNineTwo)",
            "Participate(DuMaurierClassic, Steinhauer, YearOneNineNineTwo)",
            "exists x. exists y. (OnLeaderBoardOf(x, DuMaurierClassic) & SixWayTie(x)) & In(y, SixWayTie) & Belgium(y))",
            "From(Descampe, Belgium) & OnLeaderBoardOf(Descampe, DuMaurierClassic)",
            "all x. (LeaderBoard(Maurier, x) -> Participate(Maurier, x))"
        ],
        "conclusion": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
        "conclusion-FOL": "-WinnerOf(Steinhauer, DuMaurierClassic, YearOneNineNineTwo)",
        "label": "ERROR"
    },
    {
        "premises": [
            "The winner of the 1992 du Maurier Classic was Steinhauer.",
            "Steinhauer participated in the 1992 du Maurier Classic.",
            "One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.",
            "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
            "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
        ],
        "premises-FOL": [
            "WinnerOf(Steinhauer, DuMaurierClassic, YearOneNineNineTwo)",
            "Participate(DuMaurierClassic, Steinhauer, YearOneNineNineTwo)",
            "exists x. exists y. (OnLeaderBoardOf(x, DuMaurierClassic) & SixWayTie(x)) & In(y, SixWayTie) & Belgium(y))",
            "From(Descampe, Belgium) & OnLeaderBoardOf(Descampe, DuMaurierClassic)",
            "all x. (LeaderBoard(Maurier, x) -> Participate(Maurier, x))"
        ],
        "conclusion": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
        "conclusion-FOL": "SixWayTie(Descampe)",
        "label": "ERROR"
    },
    {
        "premises": [
            "Jane does not like any animals that bark.",
            "All dogs are animals that bark.",
            "Jane likes all animals that jump.",
            "If an animal has legs, then it jumps.",
            "If an animal is terricolous, then it has legs. ",
            "KiKi is an animal.",
            "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
        ],
        "premises-FOL": [
            "all x. (Animal(x) & Bark(x) -> -Like(Jane, x))",
            "all x. (Dog(x) -> Animal(x) & Bark(x))",
            "all x. (Animal(x) & Jump(x) -> Like(Jane, x))",
            "all x. (exists y. exists z. (-(y=z) & Leg(y) & Leg(z) & Have(x, y) & Have(x, z)) -> Jump(x))",
            "all x. (Terricolous(x) -> exists y. exists z. (-(y=z) & Leg(y) & Leg(z) & Have(x, y) & Have(x, z)))",
            "Animal(Kiki)",
            "-Jump(Kiki) & -(exists y. exists z. (-(y=z) & Leg(y) & Leg(z) & Have(Kiki, y) & Have(Kiki, z))) -> Terricolous(Kiki) | exists y. exists z. (-(y=z) & Leg(y) & Leg(z) & Have(Kiki, y) & Have(Kiki, z))"
        ],
        "conclusion": "KiKi is terricolous.",
        "conclusion-FOL": "Terricolous(Kiki)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "Jane does not like any animals that bark.",
            "All dogs are animals that bark.",
            "Jane likes all animals that jump.",
            "If an animal has legs, then it jumps.",
            "If an animal is terricolous, then it has legs. ",
            "KiKi is an animal.",
            "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
        ],
        "premises-FOL": [
            "all x. (Animal(x) & Bark(x) -> -Like(Jane, x))",
            "all x. (Dog(x) -> Animal(x) & Bark(x))",
            "all x. (Animal(x) & Jump(x) -> Like(Jane, x))",
            "all x. (exists y. exists z. (-(y=z) & Leg(y) & Leg(z) & Have(x, y) & Have(x, z)) -> Jump(x))",
            "all x. (Terricolous(x) -> exists y. exists z. (-(y=z) & Leg(y) & Leg(z) & Have(x, y) & Have(x, z)))",
            "Animal(Kiki)",
            "-Jump(Kiki) & -(exists y. exists z. (-(y=z) & Leg(y) & Leg(z) & Have(Kiki, y) & Have(Kiki, z))) -> Terricolous(Kiki) | exists y. exists z. (-(y=z) & Leg(y) & Leg(z) & Have(Kiki, y) & Have(Kiki, z))"
        ],
        "conclusion": "KiKi is a barking dog.",
        "conclusion-FOL": "Bark(Kiki) & Dog(Kiki)",
        "label": "False"
    },
    {
        "premises": [
            "Jane does not like any animals that bark.",
            "All dogs are animals that bark.",
            "Jane likes all animals that jump.",
            "If an animal has legs, then it jumps.",
            "If an animal is terricolous, then it has legs. ",
            "KiKi is an animal.",
            "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
        ],
        "premises-FOL": [
            "all x. (Animal(x) & Bark(x) -> -Like(Jane, x))",
            "all x. (Dog(x) -> Animal(x) & Bark(x))",
            "all x. (Animal(x) & Jump(x) -> Like(Jane, x))",
            "all x. (exists y. exists z. (-(y=z) & Leg(y) & Leg(z) & Have(x, y) & Have(x, z)) -> Jump(x))",
            "all x. (Terricolous(x) -> exists y. exists z. (-(y=z) & Leg(y) & Leg(z) & Have(x, y) & Have(x, z)))",
            "Animal(Kiki)",
            "-Jump(Kiki) & -(exists y. exists z. (-(y=z) & Leg(y) & Leg(z) & Have(Kiki, y) & Have(Kiki, z))) -> Terricolous(Kiki) | exists y. exists z. (-(y=z) & Leg(y) & Leg(z) & Have(Kiki, y) & Have(Kiki, z))"
        ],
        "conclusion": "KiKi does not bark and he is not a dog.",
        "conclusion-FOL": "-Bark(Kiki) & -Dog(Kiki)",
        "label": "True"
    },
    {
        "premises": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.",
            "N\u00e1utico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "premises-FOL": [
            "BornIn(AiltonSilva, YearOneNineNineFive) & CommonlyKnownAs(AiltonSilva, Ailton)",
            "FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)",
            "Brazilian(AiltonSilva) & Footballplayer(AiltonSilva) & PlayFor(AiltonSilva, Nautico)",
            "FootballClub(Nautico) & FootballClub(Braga)",
            "FootballClub(Fluminense)"
        ],
        "conclusion": "No one playing for Nautico is Brazilian.",
        "conclusion-FOL": "all x. (PlayFor(x, Nautico) -> -Brazilian(x))",
        "label": "False"
    },
    {
        "premises": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.",
            "N\u00e1utico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "premises-FOL": [
            "BornIn(AiltonSilva, YearOneNineNineFive) & CommonlyKnownAs(AiltonSilva, Ailton)",
            "FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)",
            "Brazilian(AiltonSilva) & Footballplayer(AiltonSilva) & PlayFor(AiltonSilva, Nautico)",
            "FootballClub(Nautico) & FootballClub(Braga)",
            "FootballClub(Fluminense)"
        ],
        "conclusion": "Ailton Silva does not play for a football club.",
        "conclusion-FOL": "all x. (FootballClub(x) -> -PlayFor(AiltonSilva, x))",
        "label": "False"
    },
    {
        "premises": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.",
            "N\u00e1utico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "premises-FOL": [
            "BornIn(AiltonSilva, YearOneNineNineFive) & CommonlyKnownAs(AiltonSilva, Ailton)",
            "FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)",
            "Brazilian(AiltonSilva) & Footballplayer(AiltonSilva) & PlayFor(AiltonSilva, Nautico)",
            "FootballClub(Nautico) & FootballClub(Braga)",
            "FootballClub(Fluminense)"
        ],
        "conclusion": "Ailton was not loaned out to a football club.",
        "conclusion-FOL": "all x. (FootballClub(x) -> -LoanedTo(Ailton, x))",
        "label": "False"
    },
    {
        "premises": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.",
            "N\u00e1utico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "premises-FOL": [
            "BornIn(AiltonSilva, YearOneNineNineFive) & CommonlyKnownAs(AiltonSilva, Ailton)",
            "FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)",
            "Brazilian(AiltonSilva) & Footballplayer(AiltonSilva) & PlayFor(AiltonSilva, Nautico)",
            "FootballClub(Nautico) & FootballClub(Braga)",
            "FootballClub(Fluminense)"
        ],
        "conclusion": "Ailton Silva played for Fluminense.",
        "conclusion-FOL": "PlayFor(AiltonSilva, Fluminense)",
        "label": "Uncertain"
    },
    {
        "premises": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.",
            "N\u00e1utico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "premises-FOL": [
            "BornIn(AiltonSilva, YearOneNineNineFive) & CommonlyKnownAs(AiltonSilva, Ailton)",
            "FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)",
            "Brazilian(AiltonSilva) & Footballplayer(AiltonSilva) & PlayFor(AiltonSilva, Nautico)",
            "FootballClub(Nautico) & FootballClub(Braga)",
            "FootballClub(Fluminense)"
        ],
        "conclusion": "Ailton Silva was loaned out to a football club.",
        "conclusion-FOL": "exists x. (FootballClub(x) & LoanedTo(AiltonSilva, x))",
        "label": "Uncertain"
    }
]